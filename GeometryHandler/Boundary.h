#ifndef __BOUNDARY__H
#define __BOUNDARY__H

#include "GeometryHandle.h"

namespace grasp {


class BoundaryData : public Triangle
{
public:
	std::vector<int> idBoundary;		//???????????????????id???
	double co[4];							//???????
	int check;								//??idBoundary????????
	int checkSort;							//????????????
	
	std::vector<std::vector<cnoid::Vector3> > BoundaryAreaAxis;	//???????????????
	std::vector<cnoid::Matrix3> BoundaryAreaRot;		//????????????????
#ifdef WIN32
	std::vector<cnoid::Vector2,Eigen::aligned_allocator<cnoid::Vector2> > BoundaryAreaRad;
#else
	std::vector<cnoid::Vector2> BoundaryAreaRad;		//????????????????
#endif
	std::vector<cnoid::Vector3> BoundaryAreaGap;		//????????????????
	std::vector<std::vector<int> > BoundaryCreateId;		//??????????2??id???
	std::vector<int> BoundaryShape;					//??????????????????? 1->???????????,2->?????,0->???

	int calcClusterBoundaryNbr(ClusterImpl *c);	//??id?VertexLink::nbrId?????
	void calcApproximatedPlane(int listNum, int id);	//1???(??????)?????????

}; 

class DepartData : public Triangle
{
public:
	std::vector<int> surface_id;
	std::vector<cnoid::VectorXd> surface_qc;
	std::vector<int> surface_shape;
	std::vector<cnoid::Vector3> meshe_center;	//???????
	std::vector<cnoid::Vector3> boundary_center;	//????????????
	std::vector< std::vector<cnoid::Vector3> > ellipseParameter;	//?????,?????????

	std::vector< std::vector<cnoid::Vector3> > grasp_point;					//??????
	std::vector< std::vector< std::vector<cnoid::Vector3> > > approachVec;	//???????????????????????
	std::vector< std::vector< std::vector<cnoid::Vector3> > > fingerVec;		//???????????????????
	

//	void createLineEllEll(int id1, int id2, std::vector<cnoid::VectorXd>& tmp_approachLine, std::vector<cnoid::VectorXd>& tmp_graspLine);	//???-???????????????????????
//	void createLineEllCyl(int id1, int id2, std::vector<cnoid::VectorXd>& tmp_approachLine, std::vector<cnoid::VectorXd>& tmp_graspLine);	//???-???????????????????????
//	void createLineEllHyp(int id1, int id2, std::vector<cnoid::VectorXd>& tmp_approachLine, std::vector<cnoid::VectorXd>& tmp_graspLine);	//???-?????????????????????????
//	void createLineEllPla(int id1, int id2, std::vector<cnoid::VectorXd>& tmp_approachLine, std::vector<cnoid::VectorXd>& tmp_graspLine);	//???-??????????????????????
//	void createLineCylCyl(int id1, int id2, std::vector<cnoid::VectorXd>& tmp_approachLine, std::vector<cnoid::VectorXd>& tmp_graspLine);	//???-???????????????????????
//	void createLineCylHyp(int id1, int id2, std::vector<cnoid::VectorXd>& tmp_approachLine, std::vector<cnoid::VectorXd>& tmp_graspLine);	//???-?????????????????????????
//	void createLineCylPla(int id1, int id2, std::vector<cnoid::VectorXd>& tmp_approachLine, std::vector<cnoid::VectorXd>& tmp_graspLine);	//???-??????????????????????
//	void createLineHypHyp(int id1, int id2, std::vector<cnoid::VectorXd>& tmp_approachLine, std::vector<cnoid::VectorXd>& tmp_graspLine);	//?????-?????????????????????????
//	void createLineHypPla(int id1, int id2, std::vector<cnoid::VectorXd>& tmp_approachLine, std::vector<cnoid::VectorXd>& tmp_graspLine);	//?????-??????????????????????
//	void createLinePlaPla(int id1, int id2, std::vector<cnoid::VectorXd>& tmp_approachLine, std::vector<cnoid::VectorXd>& tmp_graspLine);	//?????-??????????????????????
	void createLineEllEll(int id1, int id2, cnoid::Vector3& sub_midle_point, std::vector<cnoid::Vector3>& tmp_approachVec, std::vector<cnoid::Vector3>& tmp_fingerVec);	//???-???????????????????????
	void createLineEllCyl(int id1, int id2, cnoid::Vector3& sub_midle_point, std::vector<cnoid::Vector3>& tmp_approachVec, std::vector<cnoid::Vector3>& tmp_fingerVec);	//???-???????????????????????
	void createLineEllHyp(int id1, int id2, cnoid::Vector3& sub_midle_point, std::vector<cnoid::Vector3>& tmp_approachVec, std::vector<cnoid::Vector3>& tmp_fingerVec);	//???-?????????????????????????
	void createLineEllPla(int id1, int id2, cnoid::Vector3& sub_midle_point, std::vector<cnoid::Vector3>& tmp_approachVec, std::vector<cnoid::Vector3>& tmp_fingerVec);	//???-??????????????????????
	void createLineCylCyl(int id1, int id2, cnoid::Vector3& sub_midle_point, std::vector<cnoid::Vector3>& tmp_approachVec, std::vector<cnoid::Vector3>& tmp_fingerVec);	//???-???????????????????????
	void createLineCylHyp(int id1, int id2, cnoid::Vector3& sub_midle_point, std::vector<cnoid::Vector3>& tmp_approachVec, std::vector<cnoid::Vector3>& tmp_fingerVec);	//???-?????????????????????????
	void createLineCylPla(int id1, int id2, cnoid::Vector3& sub_midle_point, std::vector<cnoid::Vector3>& tmp_approachVec, std::vector<cnoid::Vector3>& tmp_fingerVec);	//???-??????????????????????
	void createLineHypHyp(int id1, int id2, cnoid::Vector3& sub_midle_point, std::vector<cnoid::Vector3>& tmp_approachVec, std::vector<cnoid::Vector3>& tmp_fingerVec);	//?????-?????????????????????????
	void createLineHypPla(int id1, int id2, cnoid::Vector3& sub_midle_point, std::vector<cnoid::Vector3>& tmp_approachVec, std::vector<cnoid::Vector3>& tmp_fingerVec);	//?????-??????????????????????
	void createLinePlaPla(int id1, int id2, cnoid::Vector3& sub_midle_point, std::vector<cnoid::Vector3>& tmp_approachVec, std::vector<cnoid::Vector3>& tmp_fingerVec);	//?????-??????????????????????

}; 



}

#endif