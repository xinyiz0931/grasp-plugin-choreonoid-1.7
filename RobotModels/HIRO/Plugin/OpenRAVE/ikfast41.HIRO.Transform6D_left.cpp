/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 41 generated on 2011-05-11 20:09:47.554272
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }
#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IKReal)6.28318530717959)
#define IKPI  ((IKReal)3.14159265358979)
#define IKPI_2  ((IKReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif							 // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C"
{
	void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
	void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
	void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
	void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
	void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
	void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}


using namespace std;			 // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
	#endif

	#ifdef IKFAST_REAL
	typedef IKFAST_REAL IKReal;
	#else
	typedef double IKReal;
	#endif

	class IKSolution
	{
		public:
			/// Gets a solution given its free parameters
			/// \param pfree The free parameters required, range is in [-pi,pi]
			void GetSolution(IKReal* psolution, const IKReal* pfree) const
			{
				for(std::size_t i = 0; i < basesol.size(); ++i)
				{
					if( basesol[i].freeind < 0 )
						psolution[i] = basesol[i].foffset;
					else
					{
						IKFAST_ASSERT(pfree != NULL);
						psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
						if( psolution[i] > IKPI )
						{
							psolution[i] -= IK2PI;
						}
						else if( psolution[i] < -IKPI )
						{
							psolution[i] += IK2PI;
						}
					}
				}
			}

			/// Gets the free parameters the solution requires to be set before a full solution can be returned
			/// \return vector of indices indicating the free parameters
			const std::vector<int>& GetFree() const { return vfree; }

			struct VARIABLE
			{
				VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
				VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
				int freeind;
								 ///< joint value is fmul*sol[freeind]+foffset
				IKReal fmul, foffset;
			};

								 ///< solution and their offsets if joints are mimiced
			std::vector<VARIABLE> basesol;
			std::vector<int> vfree;
	};

	inline float IKabs(float f) { return fabsf(f); }
	inline double IKabs(double f) { return fabs(f); }

	inline float IKlog(float f) { return logf(f); }
	inline double IKlog(double f) { return log(f); }

	#ifndef IKFAST_SINCOS_THRESH
	#define IKFAST_SINCOS_THRESH ((IKReal)0.000001)
	#endif

	inline float IKasin(float f)
	{
								 // any more error implies something is wrong with the solver
		IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH );
		if( f <= -1 ) return -IKPI_2;
		else if( f >= 1 ) return IKPI_2;
		return asinf(f);
	}
	inline double IKasin(double f)
	{
								 // any more error implies something is wrong with the solver
		IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH );
		if( f <= -1 ) return -IKPI_2;
		else if( f >= 1 ) return IKPI_2;
		return asin(f);
	}

	// return positive value in [0,y)
	inline float IKfmod(float x, float y)
	{
		while(x < 0)
		{
			x += y;
		}
		return fmodf(x,y);
	}

	// return positive value in [0,y)
	inline float IKfmod(double x, double y)
	{
		while(x < 0)
		{
			x += y;
		}
		return fmod(x,y);
	}

	inline float IKacos(float f)
	{
								 // any more error implies something is wrong with the solver
		IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH );
		if( f <= -1 ) return IKPI;
		else if( f >= 1 ) return 0;
		return acosf(f);
	}
	inline double IKacos(double f)
	{
								 // any more error implies something is wrong with the solver
		IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH );
		if( f <= -1 ) return IKPI;
		else if( f >= 1 ) return 0;
		return acos(f);
	}
	inline float IKsin(float f) { return sinf(f); }
	inline double IKsin(double f) { return sin(f); }
	inline float IKcos(float f) { return cosf(f); }
	inline double IKcos(double f) { return cos(f); }
	inline float IKtan(float f) { return tanf(f); }
	inline double IKtan(double f) { return tan(f); }
	inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
	inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
	inline float IKatan2(float fy, float fx)
	{
		if( isnan(fy) )
		{
								 // if both are nan, probably wrong value will be returned
			IKFAST_ASSERT(!isnan(fx));
			return IKPI_2;
		}
		else if( isnan(fx) )
		{
			return 0;
		}
		return atan2f(fy,fx);
	}
	inline double IKatan2(double fy, double fx)
	{
		if( isnan(fy) )
		{
								 // if both are nan, probably wrong value will be returned
			IKFAST_ASSERT(!isnan(fx));
			return IKPI_2;
		}
		else if( isnan(fx) )
		{
			return 0;
		}
		return atan2(fy,fx);
	}

	inline float IKsign(float f)
	{
		if( f > 0 )
		{
			return 1.0f;
		}
		else if( f < 0 )
		{
			return -1.0f;
		}
		return 0;
	}

	inline double IKsign(double f)
	{
		if( f > 0 )
		{
			return 1.0;
		}
		else if( f < 0 )
		{
			return -1.0;
		}
		return 0;
	}

	/// solves the forward kinematics equations.
	/// \param pfree is an array specifying the free joints of the chain.
	IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot)
	{
		IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78;
		x0=IKcos(j[0]);
		x1=IKcos(j[1]);
		x2=IKsin(j[2]);
		x3=IKcos(j[2]);
		x4=IKsin(j[1]);
		x5=IKsin(j[4]);
		x6=IKsin(j[0]);
		x7=IKsin(j[3]);
		x8=((x6)*(x7));
		x9=IKcos(j[3]);
		x10=((x0)*(x1)*(x3));
		x11=((x0)*(x2)*(x4));
		x12=((((-1.00000000000000)*(x11)))+(x10));
		x13=((x12)*(x9));
		x14=IKcos(j[4]);
		x15=((x0)*(x1)*(x2));
		x16=((x0)*(x3)*(x4));
		x17=((x15)+(x16));
		x18=((-1.00000000000000)*(x17));
		x19=IKsin(j[5]);
		x20=((x6)*(x9));
		x21=((((-1.00000000000000)*(x10)))+(x11));
		x22=((x21)*(x7));
		x23=IKcos(j[5]);
		x24=((((-1.00000000000000)*(x13)))+(x8));
		x25=((x24)*(x5));
		x26=((x14)*(x18));
		x27=((x25)+(x26));
		x28=((-1.00000000000000)*(x27));
		x29=((x1)*(x2));
		x30=((x3)*(x4));
		x31=((x30)+(x29));
		x32=((x2)*(x4));
		x33=((x1)*(x3));
		x34=((((-1.00000000000000)*(x33)))+(x32));
		x35=((x32)*(x6));
		x36=((x33)*(x6));
		x37=((x0)*(x7));
		x38=((((-1.00000000000000)*(x35)))+(x36));
		x39=((x38)*(x9));
		x40=((x39)+(x37));
		x41=((x29)*(x6));
		x42=((x30)*(x6));
		x43=((x42)+(x41));
		x44=((-1.00000000000000)*(x43));
		x45=((((-1.00000000000000)*(x36)))+(x35));
		x46=((x45)*(x7));
		x47=((x0)*(x9));
		x48=((x46)+(x47));
		x49=((x14)*(x34));
		x50=((x31)*(x5)*(x9));
		x51=((x49)+(x50));
		x52=((-1.00000000000000)*(x51));
		x53=((-1.00000000000000)*(x40));
		x54=((x5)*(x53));
		x55=((x14)*(x44));
		x56=((x55)+(x54));
		x57=((-1.00000000000000)*(x56));
		x58=((-1.00000000000000)*(x31));
		x59=((-1.00000000000000)*(x48));
		x60=((0.0900000000000000)*(x32));
		x61=((0.0900000000000000)*(x33));
		x62=((x60)+(((-1.00000000000000)*(x61))));
		x63=((0.0335000000000000)*(x33));
		x64=((0.0335000000000000)*(x32));
		x65=((x63)+(((-1.00000000000000)*(x64))));
		x66=((0.0335000000000000)*(x30));
		x67=((0.0335000000000000)*(x29));
		x68=((x66)+(x67));
		x69=((0.0900000000000000)*(x30));
		x70=((0.0900000000000000)*(x29));
		x71=((x70)+(x69));
		x72=((0.0900000000000000)*(x41));
		x73=((0.0900000000000000)*(x42));
		x74=((x73)+(x72));
		x75=((-1.00000000000000)*(x74));
		x76=((0.0335000000000000)*(x41));
		x77=((0.0335000000000000)*(x42));
		x78=((x77)+(x76));
		eerot[0]=((((x18)*(x5)))+(((x14)*(((x13)+(((-1.00000000000000)*(x8))))))));
		eerot[1]=((((x19)*(x28)))+(((x23)*(((((-1.00000000000000)*(x20)))+(x22))))));
		eerot[2]=((((x23)*(x28)))+(((x19)*(((((-1.00000000000000)*(x22)))+(x20))))));
		eetrans[0]=((((-0.250000000000000)*(x0)*(x4)))+(((x5)*(((((0.0335000000000000)*(x15)))+(((0.0335000000000000)*(x16)))))))+(((0.0200000000000000)*(x0)*(x1)))+(((-0.0850000000000000)*(x6)))+(((0.0200000000000000)*(x11)))+(((x14)*(((((-0.0335000000000000)*(x13)))+(((0.0335000000000000)*(x8)))))))+(((-0.0200000000000000)*(x10)))+(((x14)*(((((-0.0900000000000000)*(x16)))+(((-0.0900000000000000)*(x15)))))))+(((x5)*(((((-0.0900000000000000)*(x13)))+(((0.0900000000000000)*(x8)))))))+(((-0.220000000000000)*(x16)))+(((-0.220000000000000)*(x15))));
		eerot[3]=((((0.965925532213041)*(x14)*(x40)))+(((0.258820142606703)*(x34)*(x5)))+(((0.965925532213041)*(x44)*(x5)))+(((0.258820142606703)*(x14)*(x58)*(x9))));
		eerot[4]=((((0.965925532213041)*(x19)*(x57)))+(((0.258820142606703)*(x23)*(x31)*(x7)))+(((0.258820142606703)*(x19)*(x52)))+(((0.965925532213041)*(x23)*(x48))));
		eerot[5]=((((0.965925532213041)*(x19)*(x59)))+(((0.258820142606703)*(x19)*(x58)*(x7)))+(((0.258820142606703)*(x23)*(x52)))+(((0.965925532213041)*(x23)*(x57))));
		eetrans[1]=((0.145000000000000)+(((0.258820142606703)*(x14)*(x68)*(x9)))+(((-0.0193185106442608)*(x36)))+(((0.0193185106442608)*(x1)*(x6)))+(((0.965925532213041)*(x14)*(((((-0.0335000000000000)*(x37)))+(((-0.0335000000000000)*(x39)))))))+(((-0.00517640285213405)*(x4)))+(((0.0193185106442608)*(x35)))+(((0.0821036702381085)*(x0)))+(((0.965925532213041)*(x14)*(x75)))+(((-0.0569404313734746)*(x33)))+(((0.258820142606703)*(x5)*(x65)))+(((0.258820142606703)*(x5)*(x71)*(x9)))+(((-0.212503617086869)*(x41)))+(((-0.212503617086869)*(x42)))+(((0.965925532213041)*(x5)*(x78)))+(((0.0569404313734746)*(x32)))+(((0.00517640285213405)*(x29)))+(((-0.241481383053260)*(x4)*(x6)))+(((0.965925532213041)*(x5)*(((((-0.0900000000000000)*(x37)))+(((-0.0900000000000000)*(x39)))))))+(((0.00517640285213405)*(x30)))+(((-0.0647050356516757)*(x1)))+(((0.258820142606703)*(x14)*(x62))));
		eerot[6]=((((0.965925532213041)*(x34)*(x5)))+(((0.965925532213041)*(x14)*(x58)*(x9)))+(((-0.258820142606703)*(x14)*(x40)))+(((-0.258820142606703)*(x44)*(x5))));
		eerot[7]=((((-0.258820142606703)*(x23)*(x48)))+(((0.965925532213041)*(x19)*(x52)))+(((-0.258820142606703)*(x19)*(x57)))+(((0.965925532213041)*(x23)*(x31)*(x7))));
		eerot[8]=((((0.965925532213041)*(x19)*(x58)*(x7)))+(((-0.258820142606703)*(x23)*(x57)))+(((-0.258820142606703)*(x19)*(x59)))+(((0.965925532213041)*(x23)*(x52))));
		eetrans[2]=((0.380000000000000)+(((0.0193185106442608)*(x29)))+(((-0.00517640285213405)*(x35)))+(((0.0193185106442608)*(x30)))+(((0.965925532213041)*(x14)*(x62)))+(((0.965925532213041)*(x14)*(x68)*(x9)))+(((-0.212503617086869)*(x33)))+(((0.212503617086869)*(x32)))+(((0.0647050356516757)*(x4)*(x6)))+(((0.0569404313734746)*(x41)))+(((0.0569404313734746)*(x42)))+(((-0.0193185106442608)*(x4)))+(((-0.00517640285213405)*(x1)*(x6)))+(((-0.258820142606703)*(x14)*(((((-0.0335000000000000)*(x37)))+(((-0.0335000000000000)*(x39)))))))+(((-0.258820142606703)*(x5)*(((((-0.0900000000000000)*(x37)))+(((-0.0900000000000000)*(x39)))))))+(((0.965925532213041)*(x5)*(x71)*(x9)))+(((0.00517640285213405)*(x36)))+(((0.965925532213041)*(x5)*(x65)))+(((-0.258820142606703)*(x5)*(x78)))+(((-0.0219997121215697)*(x0)))+(((-0.258820142606703)*(x14)*(x75)))+(((-0.241481383053260)*(x1))));
	}

	IKFAST_API int getNumFreeParameters() { return 0; }
	IKFAST_API int* getFreeParameters() { return NULL; }
	IKFAST_API int getNumJoints() { return 6; }

	IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

	IKFAST_API int getIKType() { return 0x67000001; }

	class IKSolver
	{
		public:
			IKReal j13,cj13,sj13,htj13,j14,cj14,sj14,htj14,j15,cj15,sj15,htj15,j16,cj16,sj16,htj16,j17,cj17,sj17,htj17,j18,cj18,sj18,htj18,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;

			bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions)
			{
				for(int dummyiter = 0; dummyiter < 1; ++dummyiter)
				{
					vsolutions.resize(0); vsolutions.reserve(8);
					r00 = eerot[0*3+0];
					r01 = eerot[0*3+1];
					r02 = eerot[0*3+2];
					r10 = eerot[1*3+0];
					r11 = eerot[1*3+1];
					r12 = eerot[1*3+2];
					r20 = eerot[2*3+0];
					r21 = eerot[2*3+1];
					r22 = eerot[2*3+2];
					px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

					new_r00=((-1.00000000000000)*(r02));
					new_r01=r01;
					new_r02=r00;
					new_px=((px)+(((0.0335000000000000)*(r00))));
					new_r10=((((0.258820142606703)*(r22)))+(((-0.965925532213041)*(r12))));
					new_r11=((((-0.258820142606703)*(r21)))+(((0.965925532213041)*(r11))));
					new_r12=((((-0.258820142606703)*(r20)))+(((0.965925532213041)*(r10))));
					new_py=((-0.0417075479803439)+(((0.965925532213041)*(py)))+(((-0.00867047477732454)*(r20)))+(((0.0323585053291369)*(r10)))+(((-0.258820142606703)*(pz))));
					new_r20=((((-0.965925532213041)*(r22)))+(((-0.258820142606703)*(r12))));
					new_r21=((((0.965925532213041)*(r21)))+(((0.258820142606703)*(r11))));
					new_r22=((((0.965925532213041)*(r20)))+(((0.258820142606703)*(r10))));
					new_pz=((-0.404580622918927)+(((0.965925532213041)*(pz)))+(((0.00867047477732454)*(r10)))+(((0.258820142606703)*(py)))+(((0.0323585053291369)*(r20))));
					r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
					pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
					npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
					npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
					npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
					rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
					rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
					rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
					rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
					rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
					rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
					rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
					rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
					rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
					IKReal op[72], zeror[48];
					int numroots;
					IKReal x79=((2.27272727272727)*(pp));
					IKReal x80=((1.40909090909091)*(npx));
					IKReal x81=((0.0909090909090909)*(npz));
					IKReal x82=((0.0909090909090909)*(npy));
					IKReal x83=((0.0850000000000000)*(r22));
					IKReal x84=((-0.181818181818182)*(npx));
					IKReal x85=((2.81818181818182)*(npy));
					IKReal x86=((-0.0850000000000000)*(r21));
					IKReal x87=((rxp0_2)+(x83));
					IKReal x88=((-0.170000000000000)*(r20));
					IKReal x89=((2.00000000000000)*(rxp1_2));
					IKReal x90=((0.0850000000000000)*(r21));
					IKReal x91=((0.181818181818182)*(npx));
					IKReal x92=((2.00000000000000)*(npz));
					IKReal x93=((0.170000000000000)*(r20));
					IKReal x94=((2.00000000000000)*(rxp2_2));
					IKReal x95=((0.180000000000000)*(r21));
					IKReal x96=((x91)+(x92));
					IKReal x97=((0.360000000000000)*(r20));
					IKReal x98=((0.340000000000000)*(r21));
					IKReal x99=((-0.00772727272727273)+(((-1.00000000000000)*(x82))));
					IKReal x100=((0.590909090909091)*(npx));
					IKReal x101=((-0.00772727272727273)+(x82));
					IKReal x102=((rxp0_2)+(((-1.00000000000000)*(x83))));
					IKReal x103=((-1.00000000000000)*(x87));
					IKReal x104=((0.00772727272727273)+(((-1.00000000000000)*(x82))));
					IKReal x105=((-1.18181818181818)*(npy));
					IKReal x106=((0.0154545454545455)+(x101));
					IKReal x107=((-2.00000000000000)*(rxp1_2));
					IKReal x108=((x83)+(((-1.00000000000000)*(rxp0_2))));
					op[0]=((0.0599431818181818)+(x79)+(x81)+(((-1.00000000000000)*(x80))));
					op[1]=x99;
					op[2]=x85;
					op[3]=x84;
					op[4]=((0.0599431818181818)+(x79)+(x80)+(x81));
					op[5]=x101;
					op[6]=x108;
					op[7]=x86;
					op[8]=x89;
					op[9]=x88;
					op[10]=x87;
					op[11]=x90;
					op[12]=x104;
					op[13]=((0.0599431818181818)+(x79)+(((-1.00000000000000)*(x81)))+(((-1.00000000000000)*(x80))));
					op[14]=x84;
					op[15]=x85;
					op[16]=x106;
					op[17]=((0.0599431818181818)+(x79)+(x80)+(((-1.00000000000000)*(x81))));
					op[18]=x86;
					op[19]=x103;
					op[20]=x88;
					op[21]=x89;
					op[22]=x90;
					op[23]=x102;
					op[24]=((0.0163636363636364)+(((-1.00000000000000)*(x96))));
					op[25]=0;
					op[26]=((0.363636363636364)*(npy));
					op[27]=0;
					op[28]=((0.0163636363636364)+(x91)+(((-1.00000000000000)*(x92))));
					op[29]=0;
					op[30]=((x95)+(((-1.00000000000000)*(x93)))+(((-1.00000000000000)*(x94))));
					op[31]=0;
					op[32]=((x98)+(x97));
					op[33]=0;
					op[34]=((x93)+(((-1.00000000000000)*(x94)))+(((-1.00000000000000)*(x95))));
					op[35]=0;
					op[36]=0;
					op[37]=((-0.0163636363636364)+(x91)+(((-1.00000000000000)*(x92))));
					op[38]=0;
					op[39]=((-0.363636363636364)*(npy));
					op[40]=0;
					op[41]=((-0.0163636363636364)+(((-1.00000000000000)*(x96))));
					op[42]=0;
					op[43]=((x93)+(x95)+(((-1.00000000000000)*(x94))));
					op[44]=0;
					op[45]=((x97)+(((-1.00000000000000)*(x98))));
					op[46]=0;
					op[47]=((((-1.00000000000000)*(x93)))+(((-1.00000000000000)*(x94)))+(((-1.00000000000000)*(x95))));
					op[48]=((-0.120056818181818)+(x100)+(x79)+(((-1.00000000000000)*(x81))));
					op[49]=x99;
					op[50]=x105;
					op[51]=x84;
					op[52]=((-0.120056818181818)+(((-1.00000000000000)*(x100)))+(x79)+(((-1.00000000000000)*(x81))));
					op[53]=x101;
					op[54]=x102;
					op[55]=x86;
					op[56]=x107;
					op[57]=x88;
					op[58]=x103;
					op[59]=x90;
					op[60]=x104;
					op[61]=((-0.120056818181818)+(x100)+(x79)+(x81));
					op[62]=x84;
					op[63]=x105;
					op[64]=x106;
					op[65]=((-0.120056818181818)+(((-1.00000000000000)*(x100)))+(x79)+(x81));
					op[66]=x86;
					op[67]=x87;
					op[68]=x88;
					op[69]=x107;
					op[70]=x90;
					op[71]=x108;
					solvedialyticpoly8qep(op,zeror,numroots);
					IKReal j17array[16], cj17array[16], sj17array[16], j18array[16], cj18array[16], sj18array[16], j16array[16], cj16array[16], sj16array[16];
					int numsolutions = 0;
					for(int ij17 = 0; ij17 < numroots; ij17 += 3)
					{
						IKReal htj17 = zeror[ij17+0], htj18 = zeror[ij17+1], htj16 = zeror[ij17+2];
						j17array[numsolutions]=((2.00000000000000)*(atan(htj17)));
						j18array[numsolutions]=((2.00000000000000)*(atan(htj18)));
						j16array[numsolutions]=((2.00000000000000)*(atan(htj16)));
						IKReal x109=(htj17)*(htj17);
						IKReal x110=(htj18)*(htj18);
						IKReal x111=(htj16)*(htj16);
						cj17array[numsolutions]=((((IKabs(((1.00000000000000)+(x109))) != 0)?((IKReal)1/(((1.00000000000000)+(x109)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x109))))));
						cj18array[numsolutions]=((((IKabs(((1.00000000000000)+(x110))) != 0)?((IKReal)1/(((1.00000000000000)+(x110)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x110))))));
						cj16array[numsolutions]=((((IKabs(((1.00000000000000)+(x111))) != 0)?((IKReal)1/(((1.00000000000000)+(x111)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x111))))));
						sj17array[numsolutions]=((2.00000000000000)*(htj17)*(((IKabs(((1.00000000000000)+((htj17)*(htj17)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj17)*(htj17))))):(IKReal)1.0e30)));
						sj18array[numsolutions]=((2.00000000000000)*(htj18)*(((IKabs(((1.00000000000000)+((htj18)*(htj18)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj18)*(htj18))))):(IKReal)1.0e30)));
						sj16array[numsolutions]=((2.00000000000000)*(htj16)*(((IKabs(((1.00000000000000)+((htj16)*(htj16)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj16)*(htj16))))):(IKReal)1.0e30)));
						if( j17array[numsolutions] > IKPI )
						{
							j17array[numsolutions]-=IK2PI;
						}
						else if( j17array[numsolutions] < -IKPI )
						{
							j17array[numsolutions]+=IK2PI;
						}
						if( j18array[numsolutions] > IKPI )
						{
							j18array[numsolutions]-=IK2PI;
						}
						else if( j18array[numsolutions] < -IKPI )
						{
							j18array[numsolutions]+=IK2PI;
						}
						if( j16array[numsolutions] > IKPI )
						{
							j16array[numsolutions]-=IK2PI;
						}
						else if( j16array[numsolutions] < -IKPI )
						{
							j16array[numsolutions]+=IK2PI;
						}
						bool valid = true;
						for( int kj17 = 0; kj17 < numsolutions; ++kj17)
						{
							if( IKabs(cj17array[kj17]-cj17array[numsolutions]) < 0.00001 && IKabs(sj17array[kj17]-sj17array[numsolutions]) < 0.00001 &&IKabs(cj18array[kj17]-cj18array[numsolutions]) < 0.00001 && IKabs(sj18array[kj17]-sj18array[numsolutions]) < 0.00001 &&IKabs(cj16array[kj17]-cj16array[numsolutions]) < 0.00001 && IKabs(sj16array[kj17]-sj16array[numsolutions]) < 0.00001 && 1 )
							{
								valid=false; break;
							}
						}
						if( valid ) { numsolutions++; }
					}
					for(int ij17 = 0; ij17 < numsolutions; ++ij17)
					{
						j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];

						j18 = j18array[ij17]; cj18 = cj18array[ij17]; sj18 = sj18array[ij17];

						j16 = j16array[ij17]; cj16 = cj16array[ij17]; sj16 = sj16array[ij17];

						{
							IKReal dummyeval[1];
							IKReal gconst1;
							gconst1=IKsign(sj16);
							dummyeval[0]=sj16;
							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
							{
								{
									IKReal dummyeval[1];
									IKReal gconst0;
									IKReal x112=(cj18)*(cj18);
									IKReal x113=(sj18)*(sj18);
									gconst0=IKsign(((((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x113)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x112)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11)))+(((r01)*(r10)*(sj17)*(x113)))+(((r01)*(r10)*(sj17)*(x112)))));
									IKReal x114=(cj18)*(cj18);
									IKReal x115=(sj18)*(sj18);
									dummyeval[0]=((((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x115)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x114)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11)))+(((r01)*(r10)*(sj17)*(x115)))+(((r01)*(r10)*(sj17)*(x114))));
									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
									{
										{
											IKReal dummyeval[1];
											IKReal x116=(sj18)*(sj18);
											IKReal x117=(cj18)*(cj18);
											dummyeval[0]=((((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x116)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x117)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18)))+(((cj17)*(r00)*(r11)*(x116)))+(((cj17)*(r00)*(r11)*(x117))));
											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
											{
												{
													IKReal evalcond[3];
													evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
													evalcond[1]=((((r20)*(sj18)))+(((cj18)*(r21))));
													evalcond[2]=((-0.0850000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
													if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
													{
														{
															IKReal j15array[1], cj15array[1], sj15array[1];
															bool j15valid[1]={false};
															j15array[0]=IKatan2(((0.149443561208267)+(((3.97456279809221)*(cj17)*(npz)))+(((-3.97456279809221)*(cj18)*(npx)*(sj17)))+(((-0.317965023847377)*(npz)*(sj17)))+(((3.97456279809221)*(npy)*(sj17)*(sj18)))+(((0.357710651828299)*(sj17)))+(((0.317965023847377)*(cj17)*(npy)*(sj18)))+(((0.0286168521462639)*(cj17)))+(((-0.317965023847377)*(cj17)*(cj18)*(npx)))), ((-0.868044515103339)+(((-0.317965023847377)*(cj18)*(npx)*(sj17)))+(((0.317965023847377)*(cj17)*(npz)))+(((-0.357710651828299)*(cj17)))+(((3.97456279809221)*(cj17)*(cj18)*(npx)))+(((0.317965023847377)*(npy)*(sj17)*(sj18)))+(((-3.97456279809221)*(cj17)*(npy)*(sj18)))+(((3.97456279809221)*(npz)*(sj17)))+(((0.0286168521462639)*(sj17)))));
															sj15array[0]=IKsin(j15array[0]);
															cj15array[0]=IKcos(j15array[0]);
															if( j15array[0] > IKPI )
															{
																j15array[0]-=IK2PI;
															}
															else if( j15array[0] < -IKPI )
															{
																j15array[0]+=IK2PI;
															}
															j15valid[0] = true;
															for(int ij15 = 0; ij15 < 1; ++ij15)
															{
																if( !j15valid[ij15] )
																{
																	continue;
																}
																j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

																{
																	IKReal dummyeval[1];
																	dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																	{
																		{
																			IKReal dummyeval[1];
																			IKReal x118=(sj18)*(sj18);
																			IKReal x119=(cj18)*(cj18);
																			dummyeval[0]=((((x119)*((r01)*(r01))))+(((x119)*((r11)*(r11))))+(((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((x118)*((r10)*(r10))))+(((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((x118)*((r00)*(r00)))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				{
																					IKReal dummyeval[1];
																					IKReal x120=(sj18)*(sj18);
																					IKReal x121=(cj18)*(cj18);
																					dummyeval[0]=((((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x121)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x120)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18)))+(((cj17)*(r00)*(r11)*(x121)))+(((cj17)*(r00)*(r11)*(x120))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						continue;

																					} else
																					{
																						{
																							IKReal j13array[1], cj13array[1], sj13array[1];
																							bool j13valid[1]={false};
																							IKReal x122=(sj18)*(sj18);
																							IKReal x123=(cj18)*(cj18);
																							IKReal x124=((cj17)*(r01)*(r10)*(x122));
																							IKReal x125=((cj18)*(r01)*(r12)*(sj17));
																							IKReal x126=((r00)*(r12)*(sj17)*(sj18));
																							IKReal x127=((cj17)*(r01)*(r10)*(x123));
																							IKReal x128=((x126)+(x127)+(x124)+(x125));
																							IKReal x129=((cj17)*(r00)*(r11)*(x122));
																							IKReal x130=((cj17)*(r00)*(r11)*(x123));
																							IKReal x131=((r02)*(r10)*(sj17)*(sj18));
																							IKReal x132=((cj18)*(r02)*(r11)*(sj17));
																							IKReal x133=((x131)+(x130)+(x132)+(x129));
																							j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x128)))+(x133))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x128)))+(x133)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((x128)+(((-1.00000000000000)*(x133))))) != 0)?((IKReal)1/(((x128)+(((-1.00000000000000)*(x133)))))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
																							sj13array[0]=IKsin(j13array[0]);
																							cj13array[0]=IKcos(j13array[0]);
																							if( j13array[0] > IKPI )
																							{
																								j13array[0]-=IK2PI;
																							}
																							else if( j13array[0] < -IKPI )
																							{
																								j13array[0]+=IK2PI;
																							}
																							j13valid[0] = true;
																							for(int ij13 = 0; ij13 < 1; ++ij13)
																							{
																								if( !j13valid[ij13] )
																								{
																									continue;
																								}
																								j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																								{
																									IKReal dummyeval[1];
																									IKReal gconst19;
																									gconst19=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																									dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												{
																													IKReal dummyeval[1];
																													dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														continue;

																													} else
																													{
																														{
																															IKReal j14array[1], cj14array[1], sj14array[1];
																															bool j14valid[1]={false};
																															IKReal x134=(cj15)*(cj15);
																															IKReal x135=(sj15)*(sj15);
																															IKReal x136=((x135)+(x134));
																															j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x136) != 0)?((IKReal)1/(x136)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x136) != 0)?((IKReal)1/(x136)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																															sj14array[0]=IKsin(j14array[0]);
																															cj14array[0]=IKcos(j14array[0]);
																															if( j14array[0] > IKPI )
																															{
																																j14array[0]-=IK2PI;
																															}
																															else if( j14array[0] < -IKPI )
																															{
																																j14array[0]+=IK2PI;
																															}
																															j14valid[0] = true;
																															for(int ij14 = 0; ij14 < 1; ++ij14)
																															{
																																if( !j14valid[ij14] )
																																{
																																	continue;
																																}
																																j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j13;
																																	solution.basesol[1].foffset = j14;
																																	solution.basesol[2].foffset = j15;
																																	solution.basesol[3].foffset = j16;
																																	solution.basesol[4].foffset = j17;
																																	solution.basesol[5].foffset = j18;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}

																											} else
																											{
																												{
																													IKReal j14array[1], cj14array[1], sj14array[1];
																													bool j14valid[1]={false};
																													IKReal x137=(cj15)*(cj15);
																													IKReal x138=(sj15)*(sj15);
																													IKReal x139=((x137)+(x138));
																													j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x139) != 0)?((IKReal)1/(x139)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x139) != 0)?((IKReal)1/(x139)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																													sj14array[0]=IKsin(j14array[0]);
																													cj14array[0]=IKcos(j14array[0]);
																													if( j14array[0] > IKPI )
																													{
																														j14array[0]-=IK2PI;
																													}
																													else if( j14array[0] < -IKPI )
																													{
																														j14array[0]+=IK2PI;
																													}
																													j14valid[0] = true;
																													for(int ij14 = 0; ij14 < 1; ++ij14)
																													{
																														if( !j14valid[ij14] )
																														{
																															continue;
																														}
																														j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j13;
																															solution.basesol[1].foffset = j14;
																															solution.basesol[2].foffset = j15;
																															solution.basesol[3].foffset = j16;
																															solution.basesol[4].foffset = j17;
																															solution.basesol[5].foffset = j18;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j14array[1], cj14array[1], sj14array[1];
																											bool j14valid[1]={false};
																											j14array[0]=IKatan2(((gconst19)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst19)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																											sj14array[0]=IKsin(j14array[0]);
																											cj14array[0]=IKcos(j14array[0]);
																											if( j14array[0] > IKPI )
																											{
																												j14array[0]-=IK2PI;
																											}
																											else if( j14array[0] < -IKPI )
																											{
																												j14array[0]+=IK2PI;
																											}
																											j14valid[0] = true;
																											for(int ij14 = 0; ij14 < 1; ++ij14)
																											{
																												if( !j14valid[ij14] )
																												{
																													continue;
																												}
																												j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j13;
																													solution.basesol[1].foffset = j14;
																													solution.basesol[2].foffset = j15;
																													solution.basesol[3].foffset = j16;
																													solution.basesol[4].foffset = j17;
																													solution.basesol[5].foffset = j18;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}
																							}
																						}

																					}

																				}

																			} else
																			{
																				{
																					IKReal j13array[1], cj13array[1], sj13array[1];
																					bool j13valid[1]={false};
																					IKReal x140=(sj18)*(sj18);
																					IKReal x141=(cj18)*(cj18);
																					IKReal x142=(r10)*(r10);
																					IKReal x143=((x140)*(x142));
																					IKReal x144=(r00)*(r00);
																					IKReal x145=((x140)*(x144));
																					IKReal x146=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
																					IKReal x147=(r01)*(r01);
																					IKReal x148=((x141)*(x147));
																					IKReal x149=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
																					IKReal x150=(r11)*(r11);
																					IKReal x151=((x141)*(x150));
																					IKReal x152=((x151)+(x143)+(x145)+(x146)+(x148)+(x149));
																					j13array[0]=IKatan2(((((IKabs(x152) != 0)?((IKReal)1/(x152)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((-1.00000000000000)*(((IKabs(x152) != 0)?((IKReal)1/(x152)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
																					sj13array[0]=IKsin(j13array[0]);
																					cj13array[0]=IKcos(j13array[0]);
																					if( j13array[0] > IKPI )
																					{
																						j13array[0]-=IK2PI;
																					}
																					else if( j13array[0] < -IKPI )
																					{
																						j13array[0]+=IK2PI;
																					}
																					j13valid[0] = true;
																					for(int ij13 = 0; ij13 < 1; ++ij13)
																					{
																						if( !j13valid[ij13] )
																						{
																							continue;
																						}
																						j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																						{
																							IKReal dummyeval[1];
																							IKReal gconst19;
																							gconst19=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																							dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												continue;

																											} else
																											{
																												{
																													IKReal j14array[1], cj14array[1], sj14array[1];
																													bool j14valid[1]={false};
																													IKReal x153=(cj15)*(cj15);
																													IKReal x154=(sj15)*(sj15);
																													IKReal x155=((x154)+(x153));
																													j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x155) != 0)?((IKReal)1/(x155)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x155) != 0)?((IKReal)1/(x155)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																													sj14array[0]=IKsin(j14array[0]);
																													cj14array[0]=IKcos(j14array[0]);
																													if( j14array[0] > IKPI )
																													{
																														j14array[0]-=IK2PI;
																													}
																													else if( j14array[0] < -IKPI )
																													{
																														j14array[0]+=IK2PI;
																													}
																													j14valid[0] = true;
																													for(int ij14 = 0; ij14 < 1; ++ij14)
																													{
																														if( !j14valid[ij14] )
																														{
																															continue;
																														}
																														j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j13;
																															solution.basesol[1].foffset = j14;
																															solution.basesol[2].foffset = j15;
																															solution.basesol[3].foffset = j16;
																															solution.basesol[4].foffset = j17;
																															solution.basesol[5].foffset = j18;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j14array[1], cj14array[1], sj14array[1];
																											bool j14valid[1]={false};
																											IKReal x156=(cj15)*(cj15);
																											IKReal x157=(sj15)*(sj15);
																											IKReal x158=((x157)+(x156));
																											j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x158) != 0)?((IKReal)1/(x158)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x158) != 0)?((IKReal)1/(x158)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																											sj14array[0]=IKsin(j14array[0]);
																											cj14array[0]=IKcos(j14array[0]);
																											if( j14array[0] > IKPI )
																											{
																												j14array[0]-=IK2PI;
																											}
																											else if( j14array[0] < -IKPI )
																											{
																												j14array[0]+=IK2PI;
																											}
																											j14valid[0] = true;
																											for(int ij14 = 0; ij14 < 1; ++ij14)
																											{
																												if( !j14valid[ij14] )
																												{
																													continue;
																												}
																												j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j13;
																													solution.basesol[1].foffset = j14;
																													solution.basesol[2].foffset = j15;
																													solution.basesol[3].foffset = j16;
																													solution.basesol[4].foffset = j17;
																													solution.basesol[5].foffset = j18;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j14array[1], cj14array[1], sj14array[1];
																									bool j14valid[1]={false};
																									j14array[0]=IKatan2(((gconst19)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst19)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																									sj14array[0]=IKsin(j14array[0]);
																									cj14array[0]=IKcos(j14array[0]);
																									if( j14array[0] > IKPI )
																									{
																										j14array[0]-=IK2PI;
																									}
																									else if( j14array[0] < -IKPI )
																									{
																										j14array[0]+=IK2PI;
																									}
																									j14valid[0] = true;
																									for(int ij14 = 0; ij14 < 1; ++ij14)
																									{
																										if( !j14valid[ij14] )
																										{
																											continue;
																										}
																										j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j13;
																											solution.basesol[1].foffset = j14;
																											solution.basesol[2].foffset = j15;
																											solution.basesol[3].foffset = j16;
																											solution.basesol[4].foffset = j17;
																											solution.basesol[5].foffset = j18;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}
																					}
																				}

																			}

																		}

																	} else
																	{
																		{
																			IKReal j14array[1], cj14array[1], sj14array[1];
																			bool j14valid[1]={false};
																			IKReal x159=(cj15)*(cj15);
																			IKReal x160=(sj15)*(sj15);
																			IKReal x161=((x160)+(x159));
																			j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x161) != 0)?((IKReal)1/(x161)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x161) != 0)?((IKReal)1/(x161)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																			sj14array[0]=IKsin(j14array[0]);
																			cj14array[0]=IKcos(j14array[0]);
																			if( j14array[0] > IKPI )
																			{
																				j14array[0]-=IK2PI;
																			}
																			else if( j14array[0] < -IKPI )
																			{
																				j14array[0]+=IK2PI;
																			}
																			j14valid[0] = true;
																			for(int ij14 = 0; ij14 < 1; ++ij14)
																			{
																				if( !j14valid[ij14] )
																				{
																					continue;
																				}
																				j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																				{
																					IKReal dummyeval[1];
																					IKReal gconst20;
																					IKReal x162=(cj18)*(cj18);
																					IKReal x163=(sj18)*(sj18);
																					gconst20=IKsign(((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r10)*(r11)*(x162)))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x163)))+(((cj17)*(r00)*(r01)*(x162)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x163)))+(((r00)*(r02)*(sj17)*(sj18)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18)))));
																					IKReal x164=(cj18)*(cj18);
																					IKReal x165=(sj18)*(sj18);
																					dummyeval[0]=((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r10)*(r11)*(x164)))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x165)))+(((cj17)*(r00)*(r01)*(x164)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x165)))+(((r00)*(r02)*(sj17)*(sj18)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							IKReal x166=(sj18)*(sj18);
																							IKReal x167=(cj18)*(cj18);
																							dummyeval[0]=((((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((x166)*((r00)*(r00))))+(((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((x166)*((r10)*(r10))))+(((x167)*((r11)*(r11))))+(((x167)*((r01)*(r01)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									IKReal x168=(sj18)*(sj18);
																									IKReal x169=(cj18)*(cj18);
																									dummyeval[0]=((((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x169)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x168)))+(((cj17)*(r00)*(r11)*(x169)))+(((cj17)*(r00)*(r11)*(x168)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										continue;

																									} else
																									{
																										{
																											IKReal j13array[1], cj13array[1], sj13array[1];
																											bool j13valid[1]={false};
																											IKReal x170=(sj18)*(sj18);
																											IKReal x171=(cj18)*(cj18);
																											IKReal x172=((cj17)*(r01)*(r10)*(x170));
																											IKReal x173=((cj18)*(r01)*(r12)*(sj17));
																											IKReal x174=((r00)*(r12)*(sj17)*(sj18));
																											IKReal x175=((cj17)*(r01)*(r10)*(x171));
																											IKReal x176=((x173)+(x172)+(x175)+(x174));
																											IKReal x177=((cj17)*(r00)*(r11)*(x170));
																											IKReal x178=((cj17)*(r00)*(r11)*(x171));
																											IKReal x179=((r02)*(r10)*(sj17)*(sj18));
																											IKReal x180=((cj18)*(r02)*(r11)*(sj17));
																											IKReal x181=((x179)+(x178)+(x177)+(x180));
																											j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x176)))+(x181))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x176)))+(x181)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((((-1.00000000000000)*(x181)))+(x176))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x181)))+(x176)))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
																											sj13array[0]=IKsin(j13array[0]);
																											cj13array[0]=IKcos(j13array[0]);
																											if( j13array[0] > IKPI )
																											{
																												j13array[0]-=IK2PI;
																											}
																											else if( j13array[0] < -IKPI )
																											{
																												j13array[0]+=IK2PI;
																											}
																											j13valid[0] = true;
																											for(int ij13 = 0; ij13 < 1; ++ij13)
																											{
																												if( !j13valid[ij13] )
																												{
																													continue;
																												}
																												j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j13;
																													solution.basesol[1].foffset = j14;
																													solution.basesol[2].foffset = j15;
																													solution.basesol[3].foffset = j16;
																													solution.basesol[4].foffset = j17;
																													solution.basesol[5].foffset = j18;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j13array[1], cj13array[1], sj13array[1];
																									bool j13valid[1]={false};
																									IKReal x182=(sj18)*(sj18);
																									IKReal x183=(cj18)*(cj18);
																									IKReal x184=(r10)*(r10);
																									IKReal x185=((x182)*(x184));
																									IKReal x186=(r00)*(r00);
																									IKReal x187=((x182)*(x186));
																									IKReal x188=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
																									IKReal x189=(r01)*(r01);
																									IKReal x190=((x183)*(x189));
																									IKReal x191=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
																									IKReal x192=(r11)*(r11);
																									IKReal x193=((x183)*(x192));
																									IKReal x194=((x193)+(x191)+(x190)+(x185)+(x187)+(x188));
																									j13array[0]=IKatan2(((((IKabs(x194) != 0)?((IKReal)1/(x194)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((-1.00000000000000)*(((IKabs(x194) != 0)?((IKReal)1/(x194)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
																									sj13array[0]=IKsin(j13array[0]);
																									cj13array[0]=IKcos(j13array[0]);
																									if( j13array[0] > IKPI )
																									{
																										j13array[0]-=IK2PI;
																									}
																									else if( j13array[0] < -IKPI )
																									{
																										j13array[0]+=IK2PI;
																									}
																									j13valid[0] = true;
																									for(int ij13 = 0; ij13 < 1; ++ij13)
																									{
																										if( !j13valid[ij13] )
																										{
																											continue;
																										}
																										j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j13;
																											solution.basesol[1].foffset = j14;
																											solution.basesol[2].foffset = j15;
																											solution.basesol[3].foffset = j16;
																											solution.basesol[4].foffset = j17;
																											solution.basesol[5].foffset = j18;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j13array[1], cj13array[1], sj13array[1];
																							bool j13valid[1]={false};
																							j13array[0]=IKatan2(((gconst20)*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj14)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj15)*(r10)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj14)*(r10)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj14)*(cj18)*(r11)*(sj15)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))), ((gconst20)*(((((-1.00000000000000)*(cj14)*(r00)*(sj15)*(sj18)))+(((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj15)*(r00)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r01)*(sj14)))+(((cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj14)*(cj18)*(r01)*(sj15)))))));
																							sj13array[0]=IKsin(j13array[0]);
																							cj13array[0]=IKcos(j13array[0]);
																							if( j13array[0] > IKPI )
																							{
																								j13array[0]-=IK2PI;
																							}
																							else if( j13array[0] < -IKPI )
																							{
																								j13array[0]+=IK2PI;
																							}
																							j13valid[0] = true;
																							for(int ij13 = 0; ij13 < 1; ++ij13)
																							{
																								if( !j13valid[ij13] )
																								{
																									continue;
																								}
																								j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j13;
																									solution.basesol[1].foffset = j14;
																									solution.basesol[2].foffset = j15;
																									solution.basesol[3].foffset = j16;
																									solution.basesol[4].foffset = j17;
																									solution.basesol[5].foffset = j18;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}
																			}
																		}

																	}

																}
															}
														}

													} else
													{
														evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
														evalcond[1]=((((r20)*(sj18)))+(((cj18)*(r21))));
														evalcond[2]=((0.0850000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
														if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
														{
															{
																IKReal j15array[1], cj15array[1], sj15array[1];
																bool j15valid[1]={false};
																j15array[0]=IKatan2(((0.149443561208267)+(((-0.317965023847377)*(npz)*(sj17)))+(((-3.97456279809221)*(npy)*(sj17)*(sj18)))+(((-3.97456279809221)*(cj17)*(npz)))+(((0.317965023847377)*(cj17)*(npy)*(sj18)))+(((0.0286168521462639)*(cj17)))+(((-0.317965023847377)*(cj17)*(cj18)*(npx)))+(((-0.357710651828299)*(sj17)))+(((3.97456279809221)*(cj18)*(npx)*(sj17)))), ((-0.868044515103339)+(((-0.357710651828299)*(cj17)))+(((3.97456279809221)*(cj17)*(cj18)*(npx)))+(((0.317965023847377)*(cj18)*(npx)*(sj17)))+(((-0.0286168521462639)*(sj17)))+(((-3.97456279809221)*(cj17)*(npy)*(sj18)))+(((3.97456279809221)*(npz)*(sj17)))+(((-0.317965023847377)*(npy)*(sj17)*(sj18)))+(((-0.317965023847377)*(cj17)*(npz)))));
																sj15array[0]=IKsin(j15array[0]);
																cj15array[0]=IKcos(j15array[0]);
																if( j15array[0] > IKPI )
																{
																	j15array[0]-=IK2PI;
																}
																else if( j15array[0] < -IKPI )
																{
																	j15array[0]+=IK2PI;
																}
																j15valid[0] = true;
																for(int ij15 = 0; ij15 < 1; ++ij15)
																{
																	if( !j15valid[ij15] )
																	{
																		continue;
																	}
																	j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

																	{
																		IKReal dummyeval[1];
																		IKReal gconst21;
																		gconst21=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																		dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																		if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																		{
																			{
																				IKReal dummyeval[1];
																				IKReal x195=(sj18)*(sj18);
																				IKReal x196=(cj18)*(cj18);
																				dummyeval[0]=((((-1.00000000000000)*(x195)*((r00)*(r00))))+(((-2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((-2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((-1.00000000000000)*(x195)*((r10)*(r10))))+(((-1.00000000000000)*(x196)*((r01)*(r01))))+(((-1.00000000000000)*(x196)*((r11)*(r11)))));
																				if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																				{
																					{
																						IKReal dummyeval[1];
																						IKReal x197=(sj18)*(sj18);
																						IKReal x198=(cj18)*(cj18);
																						dummyeval[0]=((((-1.00000000000000)*(r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r02)*(r11)*(sj17)))+(((cj17)*(r01)*(r10)*(x198)))+(((cj17)*(r01)*(r10)*(x197)))+(((cj18)*(r01)*(r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x197)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x198)))+(((r00)*(r12)*(sj17)*(sj18))));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							continue;

																						} else
																						{
																							{
																								IKReal j13array[1], cj13array[1], sj13array[1];
																								bool j13valid[1]={false};
																								IKReal x199=(sj18)*(sj18);
																								IKReal x200=(cj18)*(cj18);
																								IKReal x201=((cj17)*(r00)*(r11)*(x199));
																								IKReal x202=((cj17)*(r00)*(r11)*(x200));
																								IKReal x203=((r02)*(r10)*(sj17)*(sj18));
																								IKReal x204=((cj18)*(r02)*(r11)*(sj17));
																								IKReal x205=((x204)+(x203)+(x202)+(x201));
																								IKReal x206=((cj17)*(r01)*(r10)*(x199));
																								IKReal x207=((cj18)*(r01)*(r12)*(sj17));
																								IKReal x208=((r00)*(r12)*(sj17)*(sj18));
																								IKReal x209=((cj17)*(r01)*(r10)*(x200));
																								IKReal x210=((x207)+(x206)+(x209)+(x208));
																								j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x205)))+(x210))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x205)))+(x210)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((x205)+(((-1.00000000000000)*(x210))))) != 0)?((IKReal)1/(((x205)+(((-1.00000000000000)*(x210)))))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
																								sj13array[0]=IKsin(j13array[0]);
																								cj13array[0]=IKcos(j13array[0]);
																								if( j13array[0] > IKPI )
																								{
																									j13array[0]-=IK2PI;
																								}
																								else if( j13array[0] < -IKPI )
																								{
																									j13array[0]+=IK2PI;
																								}
																								j13valid[0] = true;
																								for(int ij13 = 0; ij13 < 1; ++ij13)
																								{
																									if( !j13valid[ij13] )
																									{
																										continue;
																									}
																									j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																									{
																										IKReal dummyeval[1];
																										IKReal gconst22;
																										gconst22=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																										dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											continue;

																										} else
																										{
																											{
																												IKReal j14array[1], cj14array[1], sj14array[1];
																												bool j14valid[1]={false};
																												j14array[0]=IKatan2(((gconst22)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst22)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																												sj14array[0]=IKsin(j14array[0]);
																												cj14array[0]=IKcos(j14array[0]);
																												if( j14array[0] > IKPI )
																												{
																													j14array[0]-=IK2PI;
																												}
																												else if( j14array[0] < -IKPI )
																												{
																													j14array[0]+=IK2PI;
																												}
																												j14valid[0] = true;
																												for(int ij14 = 0; ij14 < 1; ++ij14)
																												{
																													if( !j14valid[ij14] )
																													{
																														continue;
																													}
																													j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j13;
																														solution.basesol[1].foffset = j14;
																														solution.basesol[2].foffset = j15;
																														solution.basesol[3].foffset = j16;
																														solution.basesol[4].foffset = j17;
																														solution.basesol[5].foffset = j18;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}
																								}
																							}

																						}

																					}

																				} else
																				{
																					{
																						IKReal j13array[1], cj13array[1], sj13array[1];
																						bool j13valid[1]={false};
																						IKReal x211=(sj18)*(sj18);
																						IKReal x212=(cj18)*(cj18);
																						IKReal x213=(r10)*(r10);
																						IKReal x214=((x211)*(x213));
																						IKReal x215=(r00)*(r00);
																						IKReal x216=((x211)*(x215));
																						IKReal x217=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
																						IKReal x218=(r01)*(r01);
																						IKReal x219=((x212)*(x218));
																						IKReal x220=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
																						IKReal x221=(r11)*(r11);
																						IKReal x222=((x212)*(x221));
																						IKReal x223=((x214)+(x216)+(x217)+(x219)+(x220)+(x222));
																						j13array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x223) != 0)?((IKReal)1/(x223)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((((IKabs(x223) != 0)?((IKReal)1/(x223)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
																						sj13array[0]=IKsin(j13array[0]);
																						cj13array[0]=IKcos(j13array[0]);
																						if( j13array[0] > IKPI )
																						{
																							j13array[0]-=IK2PI;
																						}
																						else if( j13array[0] < -IKPI )
																						{
																							j13array[0]+=IK2PI;
																						}
																						j13valid[0] = true;
																						for(int ij13 = 0; ij13 < 1; ++ij13)
																						{
																							if( !j13valid[ij13] )
																							{
																								continue;
																							}
																							j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																							{
																								IKReal dummyeval[1];
																								IKReal gconst22;
																								gconst22=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																								dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									continue;

																								} else
																								{
																									{
																										IKReal j14array[1], cj14array[1], sj14array[1];
																										bool j14valid[1]={false};
																										j14array[0]=IKatan2(((gconst22)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst22)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																										sj14array[0]=IKsin(j14array[0]);
																										cj14array[0]=IKcos(j14array[0]);
																										if( j14array[0] > IKPI )
																										{
																											j14array[0]-=IK2PI;
																										}
																										else if( j14array[0] < -IKPI )
																										{
																											j14array[0]+=IK2PI;
																										}
																										j14valid[0] = true;
																										for(int ij14 = 0; ij14 < 1; ++ij14)
																										{
																											if( !j14valid[ij14] )
																											{
																												continue;
																											}
																											j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																											{
																												vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																												solution.basesol.resize(6);
																												solution.basesol[0].foffset = j13;
																												solution.basesol[1].foffset = j14;
																												solution.basesol[2].foffset = j15;
																												solution.basesol[3].foffset = j16;
																												solution.basesol[4].foffset = j17;
																												solution.basesol[5].foffset = j18;
																												solution.vfree.resize(0);
																											}
																										}
																									}

																								}

																							}
																						}
																					}

																				}

																			}

																		} else
																		{
																			{
																				IKReal j14array[1], cj14array[1], sj14array[1];
																				bool j14valid[1]={false};
																				j14array[0]=IKatan2(((gconst21)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst21)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																				sj14array[0]=IKsin(j14array[0]);
																				cj14array[0]=IKcos(j14array[0]);
																				if( j14array[0] > IKPI )
																				{
																					j14array[0]-=IK2PI;
																				}
																				else if( j14array[0] < -IKPI )
																				{
																					j14array[0]+=IK2PI;
																				}
																				j14valid[0] = true;
																				for(int ij14 = 0; ij14 < 1; ++ij14)
																				{
																					if( !j14valid[ij14] )
																					{
																						continue;
																					}
																					j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																					{
																						IKReal dummyeval[1];
																						IKReal gconst23;
																						IKReal x224=(cj18)*(cj18);
																						IKReal x225=(sj18)*(sj18);
																						gconst23=IKsign(((((-1.00000000000000)*(cj17)*(r00)*(r01)*(x225)))+(((cj17)*(r00)*(r01)*(x224)))+(((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((cj17)*(r10)*(r11)*(x224)))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x225)))+(((r00)*(r02)*(sj17)*(sj18)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18)))));
																						IKReal x226=(cj18)*(cj18);
																						IKReal x227=(sj18)*(sj18);
																						dummyeval[0]=((((-1.00000000000000)*(cj17)*(r00)*(r01)*(x227)))+(((cj17)*(r00)*(r01)*(x226)))+(((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((cj17)*(r10)*(r11)*(x226)))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x227)))+(((r00)*(r02)*(sj17)*(sj18)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18))));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							{
																								IKReal dummyeval[1];
																								IKReal x228=(sj18)*(sj18);
																								IKReal x229=(cj18)*(cj18);
																								dummyeval[0]=((((-2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((-1.00000000000000)*(x228)*((r00)*(r00))))+(((-2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((-1.00000000000000)*(x229)*((r11)*(r11))))+(((-1.00000000000000)*(x229)*((r01)*(r01))))+(((-1.00000000000000)*(x228)*((r10)*(r10)))));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									{
																										IKReal dummyeval[1];
																										IKReal x230=(sj18)*(sj18);
																										IKReal x231=(cj18)*(cj18);
																										dummyeval[0]=((((-1.00000000000000)*(r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r02)*(r11)*(sj17)))+(((cj17)*(r01)*(r10)*(x230)))+(((cj17)*(r01)*(r10)*(x231)))+(((cj18)*(r01)*(r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x231)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x230)))+(((r00)*(r12)*(sj17)*(sj18))));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											continue;

																										} else
																										{
																											{
																												IKReal j13array[1], cj13array[1], sj13array[1];
																												bool j13valid[1]={false};
																												IKReal x232=(sj18)*(sj18);
																												IKReal x233=(cj18)*(cj18);
																												IKReal x234=((cj17)*(r00)*(r11)*(x232));
																												IKReal x235=((cj17)*(r00)*(r11)*(x233));
																												IKReal x236=((r02)*(r10)*(sj17)*(sj18));
																												IKReal x237=((cj18)*(r02)*(r11)*(sj17));
																												IKReal x238=((x236)+(x237)+(x234)+(x235));
																												IKReal x239=((cj17)*(r01)*(r10)*(x232));
																												IKReal x240=((cj18)*(r01)*(r12)*(sj17));
																												IKReal x241=((r00)*(r12)*(sj17)*(sj18));
																												IKReal x242=((cj17)*(r01)*(r10)*(x233));
																												IKReal x243=((x239)+(x242)+(x241)+(x240));
																												j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x238)))+(x243))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x238)))+(x243)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((x238)+(((-1.00000000000000)*(x243))))) != 0)?((IKReal)1/(((x238)+(((-1.00000000000000)*(x243)))))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
																												sj13array[0]=IKsin(j13array[0]);
																												cj13array[0]=IKcos(j13array[0]);
																												if( j13array[0] > IKPI )
																												{
																													j13array[0]-=IK2PI;
																												}
																												else if( j13array[0] < -IKPI )
																												{
																													j13array[0]+=IK2PI;
																												}
																												j13valid[0] = true;
																												for(int ij13 = 0; ij13 < 1; ++ij13)
																												{
																													if( !j13valid[ij13] )
																													{
																														continue;
																													}
																													j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j13;
																														solution.basesol[1].foffset = j14;
																														solution.basesol[2].foffset = j15;
																														solution.basesol[3].foffset = j16;
																														solution.basesol[4].foffset = j17;
																														solution.basesol[5].foffset = j18;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}

																								} else
																								{
																									{
																										IKReal j13array[1], cj13array[1], sj13array[1];
																										bool j13valid[1]={false};
																										IKReal x244=(sj18)*(sj18);
																										IKReal x245=(cj18)*(cj18);
																										IKReal x246=(r10)*(r10);
																										IKReal x247=((x244)*(x246));
																										IKReal x248=(r00)*(r00);
																										IKReal x249=((x244)*(x248));
																										IKReal x250=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
																										IKReal x251=(r01)*(r01);
																										IKReal x252=((x245)*(x251));
																										IKReal x253=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
																										IKReal x254=(r11)*(r11);
																										IKReal x255=((x245)*(x254));
																										IKReal x256=((x255)+(x250)+(x252)+(x253)+(x247)+(x249));
																										j13array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x256) != 0)?((IKReal)1/(x256)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((((IKabs(x256) != 0)?((IKReal)1/(x256)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
																										sj13array[0]=IKsin(j13array[0]);
																										cj13array[0]=IKcos(j13array[0]);
																										if( j13array[0] > IKPI )
																										{
																											j13array[0]-=IK2PI;
																										}
																										else if( j13array[0] < -IKPI )
																										{
																											j13array[0]+=IK2PI;
																										}
																										j13valid[0] = true;
																										for(int ij13 = 0; ij13 < 1; ++ij13)
																										{
																											if( !j13valid[ij13] )
																											{
																												continue;
																											}
																											j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																											{
																												vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																												solution.basesol.resize(6);
																												solution.basesol[0].foffset = j13;
																												solution.basesol[1].foffset = j14;
																												solution.basesol[2].foffset = j15;
																												solution.basesol[3].foffset = j16;
																												solution.basesol[4].foffset = j17;
																												solution.basesol[5].foffset = j18;
																												solution.vfree.resize(0);
																											}
																										}
																									}

																								}

																							}

																						} else
																						{
																							{
																								IKReal j13array[1], cj13array[1], sj13array[1];
																								bool j13valid[1]={false};
																								j13array[0]=IKatan2(((gconst23)*(((((-1.00000000000000)*(cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj14)))+(((r02)*(sj17)))+(((-1.00000000000000)*(cj15)*(r10)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj14)*(r10)*(sj15)*(sj18)))+(((cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(cj14)*(cj18)*(r11)*(sj15)))))), ((gconst23)*(((((-1.00000000000000)*(cj14)*(r00)*(sj15)*(sj18)))+(((-1.00000000000000)*(r12)*(sj17)))+(((cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj15)*(r00)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r01)*(sj14)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj14)*(cj18)*(r01)*(sj15)))))));
																								sj13array[0]=IKsin(j13array[0]);
																								cj13array[0]=IKcos(j13array[0]);
																								if( j13array[0] > IKPI )
																								{
																									j13array[0]-=IK2PI;
																								}
																								else if( j13array[0] < -IKPI )
																								{
																									j13array[0]+=IK2PI;
																								}
																								j13valid[0] = true;
																								for(int ij13 = 0; ij13 < 1; ++ij13)
																								{
																									if( !j13valid[ij13] )
																									{
																										continue;
																									}
																									j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																									{
																										vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																										solution.basesol.resize(6);
																										solution.basesol[0].foffset = j13;
																										solution.basesol[1].foffset = j14;
																										solution.basesol[2].foffset = j15;
																										solution.basesol[3].foffset = j16;
																										solution.basesol[4].foffset = j17;
																										solution.basesol[5].foffset = j18;
																										solution.vfree.resize(0);
																									}
																								}
																							}

																						}

																					}
																				}
																			}

																		}

																	}
																}
															}

														} else
														{
															if( 1 )
															{
																continue;

															} else
															{
															}
														}
													}
												}

											} else
											{
												{
													IKReal j13array[1], cj13array[1], sj13array[1];
													bool j13valid[1]={false};
													IKReal x257=(sj18)*(sj18);
													IKReal x258=(cj18)*(cj18);
													IKReal x259=((cj17)*(r01)*(r10)*(x257));
													IKReal x260=((cj18)*(r01)*(r12)*(sj17));
													IKReal x261=((r00)*(r12)*(sj17)*(sj18));
													IKReal x262=((cj17)*(r01)*(r10)*(x258));
													IKReal x263=((x259)+(x261)+(x260)+(x262));
													IKReal x264=((cj17)*(r00)*(r11)*(x257));
													IKReal x265=((cj17)*(r00)*(r11)*(x258));
													IKReal x266=((r02)*(r10)*(sj17)*(sj18));
													IKReal x267=((cj18)*(r02)*(r11)*(sj17));
													IKReal x268=((x265)+(x264)+(x267)+(x266));
													j13array[0]=IKatan2(((((IKabs(((x268)+(((-1.00000000000000)*(x263))))) != 0)?((IKReal)1/(((x268)+(((-1.00000000000000)*(x263)))))):(IKReal)1.0e30))*(((((cj16)*(r12)*(sj17)))+(((cj16)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj16)*(cj17)*(r11)*(sj18)))))), ((((IKabs(((x263)+(((-1.00000000000000)*(x268))))) != 0)?((IKReal)1/(((x263)+(((-1.00000000000000)*(x268)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj16)*(r02)*(sj17)))+(((cj16)*(cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj16)*(cj17)*(cj18)*(r00)))))));
													sj13array[0]=IKsin(j13array[0]);
													cj13array[0]=IKcos(j13array[0]);
													if( j13array[0] > IKPI )
													{
														j13array[0]-=IK2PI;
													}
													else if( j13array[0] < -IKPI )
													{
														j13array[0]+=IK2PI;
													}
													j13valid[0] = true;
													for(int ij13 = 0; ij13 < 1; ++ij13)
													{
														if( !j13valid[ij13] )
														{
															continue;
														}
														j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

														{
															IKReal dummyeval[1];
															IKReal gconst2;
															gconst2=IKsign(sj16);
															dummyeval[0]=sj16;
															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
															{
																{
																	IKReal evalcond[7];
																	evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
																	evalcond[1]=((((r20)*(sj18)))+(((cj18)*(r21))));
																	evalcond[2]=((-0.0850000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																	evalcond[3]=((1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																	evalcond[4]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																	evalcond[5]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																	evalcond[6]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																	if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
																	{
																		{
																			IKReal j15array[1], cj15array[1], sj15array[1];
																			bool j15valid[1]={false};
																			j15array[0]=IKatan2(((0.149443561208267)+(((3.97456279809221)*(cj17)*(npz)))+(((-3.97456279809221)*(cj18)*(npx)*(sj17)))+(((-0.317965023847377)*(npz)*(sj17)))+(((3.97456279809221)*(npy)*(sj17)*(sj18)))+(((0.357710651828299)*(sj17)))+(((0.317965023847377)*(cj17)*(npy)*(sj18)))+(((0.0286168521462639)*(cj17)))+(((-0.317965023847377)*(cj17)*(cj18)*(npx)))), ((-0.868044515103339)+(((-0.317965023847377)*(cj18)*(npx)*(sj17)))+(((0.317965023847377)*(cj17)*(npz)))+(((-0.357710651828299)*(cj17)))+(((3.97456279809221)*(cj17)*(cj18)*(npx)))+(((0.317965023847377)*(npy)*(sj17)*(sj18)))+(((-3.97456279809221)*(cj17)*(npy)*(sj18)))+(((3.97456279809221)*(npz)*(sj17)))+(((0.0286168521462639)*(sj17)))));
																			sj15array[0]=IKsin(j15array[0]);
																			cj15array[0]=IKcos(j15array[0]);
																			if( j15array[0] > IKPI )
																			{
																				j15array[0]-=IK2PI;
																			}
																			else if( j15array[0] < -IKPI )
																			{
																				j15array[0]+=IK2PI;
																			}
																			j15valid[0] = true;
																			for(int ij15 = 0; ij15 < 1; ++ij15)
																			{
																				if( !j15valid[ij15] )
																				{
																					continue;
																				}
																				j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

																				{
																					IKReal dummyeval[1];
																					IKReal gconst6;
																					gconst6=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																					dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										continue;

																									} else
																									{
																										{
																											IKReal j14array[1], cj14array[1], sj14array[1];
																											bool j14valid[1]={false};
																											IKReal x269=(cj15)*(cj15);
																											IKReal x270=(sj15)*(sj15);
																											IKReal x271=((x269)+(x270));
																											j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x271) != 0)?((IKReal)1/(x271)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x271) != 0)?((IKReal)1/(x271)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																											sj14array[0]=IKsin(j14array[0]);
																											cj14array[0]=IKcos(j14array[0]);
																											if( j14array[0] > IKPI )
																											{
																												j14array[0]-=IK2PI;
																											}
																											else if( j14array[0] < -IKPI )
																											{
																												j14array[0]+=IK2PI;
																											}
																											j14valid[0] = true;
																											for(int ij14 = 0; ij14 < 1; ++ij14)
																											{
																												if( !j14valid[ij14] )
																												{
																													continue;
																												}
																												j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j13;
																													solution.basesol[1].foffset = j14;
																													solution.basesol[2].foffset = j15;
																													solution.basesol[3].foffset = j16;
																													solution.basesol[4].foffset = j17;
																													solution.basesol[5].foffset = j18;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j14array[1], cj14array[1], sj14array[1];
																									bool j14valid[1]={false};
																									IKReal x272=(cj15)*(cj15);
																									IKReal x273=(sj15)*(sj15);
																									IKReal x274=((x272)+(x273));
																									j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x274) != 0)?((IKReal)1/(x274)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x274) != 0)?((IKReal)1/(x274)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																									sj14array[0]=IKsin(j14array[0]);
																									cj14array[0]=IKcos(j14array[0]);
																									if( j14array[0] > IKPI )
																									{
																										j14array[0]-=IK2PI;
																									}
																									else if( j14array[0] < -IKPI )
																									{
																										j14array[0]+=IK2PI;
																									}
																									j14valid[0] = true;
																									for(int ij14 = 0; ij14 < 1; ++ij14)
																									{
																										if( !j14valid[ij14] )
																										{
																											continue;
																										}
																										j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j13;
																											solution.basesol[1].foffset = j14;
																											solution.basesol[2].foffset = j15;
																											solution.basesol[3].foffset = j16;
																											solution.basesol[4].foffset = j17;
																											solution.basesol[5].foffset = j18;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j14array[1], cj14array[1], sj14array[1];
																							bool j14valid[1]={false};
																							j14array[0]=IKatan2(((gconst6)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst6)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																							sj14array[0]=IKsin(j14array[0]);
																							cj14array[0]=IKcos(j14array[0]);
																							if( j14array[0] > IKPI )
																							{
																								j14array[0]-=IK2PI;
																							}
																							else if( j14array[0] < -IKPI )
																							{
																								j14array[0]+=IK2PI;
																							}
																							j14valid[0] = true;
																							for(int ij14 = 0; ij14 < 1; ++ij14)
																							{
																								if( !j14valid[ij14] )
																								{
																									continue;
																								}
																								j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j13;
																									solution.basesol[1].foffset = j14;
																									solution.basesol[2].foffset = j15;
																									solution.basesol[3].foffset = j16;
																									solution.basesol[4].foffset = j17;
																									solution.basesol[5].foffset = j18;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}
																			}
																		}

																	} else
																	{
																		evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
																		evalcond[1]=((((r20)*(sj18)))+(((cj18)*(r21))));
																		evalcond[2]=((0.0850000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																		evalcond[3]=((-1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																		evalcond[4]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																		evalcond[5]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																		evalcond[6]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																		if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
																		{
																			{
																				IKReal j15array[1], cj15array[1], sj15array[1];
																				bool j15valid[1]={false};
																				j15array[0]=IKatan2(((0.149443561208267)+(((-0.317965023847377)*(npz)*(sj17)))+(((-3.97456279809221)*(npy)*(sj17)*(sj18)))+(((-3.97456279809221)*(cj17)*(npz)))+(((0.317965023847377)*(cj17)*(npy)*(sj18)))+(((0.0286168521462639)*(cj17)))+(((-0.317965023847377)*(cj17)*(cj18)*(npx)))+(((-0.357710651828299)*(sj17)))+(((3.97456279809221)*(cj18)*(npx)*(sj17)))), ((-0.868044515103339)+(((-0.357710651828299)*(cj17)))+(((3.97456279809221)*(cj17)*(cj18)*(npx)))+(((0.317965023847377)*(cj18)*(npx)*(sj17)))+(((-0.0286168521462639)*(sj17)))+(((-3.97456279809221)*(cj17)*(npy)*(sj18)))+(((3.97456279809221)*(npz)*(sj17)))+(((-0.317965023847377)*(npy)*(sj17)*(sj18)))+(((-0.317965023847377)*(cj17)*(npz)))));
																				sj15array[0]=IKsin(j15array[0]);
																				cj15array[0]=IKcos(j15array[0]);
																				if( j15array[0] > IKPI )
																				{
																					j15array[0]-=IK2PI;
																				}
																				else if( j15array[0] < -IKPI )
																				{
																					j15array[0]+=IK2PI;
																				}
																				j15valid[0] = true;
																				for(int ij15 = 0; ij15 < 1; ++ij15)
																				{
																					if( !j15valid[ij15] )
																					{
																						continue;
																					}
																					j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

																					{
																						IKReal dummyeval[1];
																						IKReal gconst7;
																						gconst7=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																						dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							continue;

																						} else
																						{
																							{
																								IKReal j14array[1], cj14array[1], sj14array[1];
																								bool j14valid[1]={false};
																								j14array[0]=IKatan2(((gconst7)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst7)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																								sj14array[0]=IKsin(j14array[0]);
																								cj14array[0]=IKcos(j14array[0]);
																								if( j14array[0] > IKPI )
																								{
																									j14array[0]-=IK2PI;
																								}
																								else if( j14array[0] < -IKPI )
																								{
																									j14array[0]+=IK2PI;
																								}
																								j14valid[0] = true;
																								for(int ij14 = 0; ij14 < 1; ++ij14)
																								{
																									if( !j14valid[ij14] )
																									{
																										continue;
																									}
																									j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																									{
																										vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																										solution.basesol.resize(6);
																										solution.basesol[0].foffset = j13;
																										solution.basesol[1].foffset = j14;
																										solution.basesol[2].foffset = j15;
																										solution.basesol[3].foffset = j16;
																										solution.basesol[4].foffset = j17;
																										solution.basesol[5].foffset = j18;
																										solution.vfree.resize(0);
																									}
																								}
																							}

																						}

																					}
																				}
																			}

																		} else
																		{
																			if( 1 )
																			{
																				continue;

																			} else
																			{
																			}
																		}
																	}
																}

															} else
															{
																{
																	IKReal j15array[1], cj15array[1], sj15array[1];
																	bool j15valid[1]={false};
																	j15array[0]=IKatan2(((gconst2)*(((((212.500000000000)*(cj16)))+(((-200.000000000000)*(cj17)*(cj18)*(npx)*(sj16)))+(((200.000000000000)*(cj17)*(npy)*(sj16)*(sj18)))+(((-2500.00000000000)*(npx)*(sj18)))+(((18.0000000000000)*(cj17)*(sj16)))+(((-200.000000000000)*(npz)*(sj16)*(sj17)))+(((-2500.00000000000)*(cj18)*(npy)))+(((94.0000000000000)*(sj16)))))), ((gconst2)*(((((2500.00000000000)*(cj17)*(cj18)*(npx)*(sj16)))+(((-200.000000000000)*(cj18)*(npy)))+(((-2500.00000000000)*(cj17)*(npy)*(sj16)*(sj18)))+(((17.0000000000000)*(cj16)))+(((-225.000000000000)*(cj17)*(sj16)))+(((2500.00000000000)*(npz)*(sj16)*(sj17)))+(((-200.000000000000)*(npx)*(sj18)))+(((-546.000000000000)*(sj16)))))));
																	sj15array[0]=IKsin(j15array[0]);
																	cj15array[0]=IKcos(j15array[0]);
																	if( j15array[0] > IKPI )
																	{
																		j15array[0]-=IK2PI;
																	}
																	else if( j15array[0] < -IKPI )
																	{
																		j15array[0]+=IK2PI;
																	}
																	j15valid[0] = true;
																	for(int ij15 = 0; ij15 < 1; ++ij15)
																	{
																		if( !j15valid[ij15] )
																		{
																			continue;
																		}
																		j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

																		{
																			IKReal dummyeval[1];
																			IKReal gconst3;
																			gconst3=IKsign(((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15))))));
																			dummyeval[0]=((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15)))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				{
																					IKReal evalcond[9];
																					evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
																					evalcond[1]=((((r20)*(sj18)))+(((cj18)*(r21))));
																					evalcond[2]=((-0.0850000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																					evalcond[3]=((1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																					evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((-0.0200000000000000)*(sj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																					evalcond[5]=((0.0200000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((-0.0200000000000000)*(cj15)))+(((-0.250000000000000)*(sj15)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																					evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																					evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																					evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																					if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							IKReal gconst4;
																							gconst4=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																							dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												continue;

																											} else
																											{
																												{
																													IKReal j14array[1], cj14array[1], sj14array[1];
																													bool j14valid[1]={false};
																													IKReal x275=(cj15)*(cj15);
																													IKReal x276=(sj15)*(sj15);
																													IKReal x277=((x276)+(x275));
																													j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x277) != 0)?((IKReal)1/(x277)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x277) != 0)?((IKReal)1/(x277)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																													sj14array[0]=IKsin(j14array[0]);
																													cj14array[0]=IKcos(j14array[0]);
																													if( j14array[0] > IKPI )
																													{
																														j14array[0]-=IK2PI;
																													}
																													else if( j14array[0] < -IKPI )
																													{
																														j14array[0]+=IK2PI;
																													}
																													j14valid[0] = true;
																													for(int ij14 = 0; ij14 < 1; ++ij14)
																													{
																														if( !j14valid[ij14] )
																														{
																															continue;
																														}
																														j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j13;
																															solution.basesol[1].foffset = j14;
																															solution.basesol[2].foffset = j15;
																															solution.basesol[3].foffset = j16;
																															solution.basesol[4].foffset = j17;
																															solution.basesol[5].foffset = j18;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j14array[1], cj14array[1], sj14array[1];
																											bool j14valid[1]={false};
																											IKReal x278=(cj15)*(cj15);
																											IKReal x279=(sj15)*(sj15);
																											IKReal x280=((x278)+(x279));
																											j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x280) != 0)?((IKReal)1/(x280)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x280) != 0)?((IKReal)1/(x280)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																											sj14array[0]=IKsin(j14array[0]);
																											cj14array[0]=IKcos(j14array[0]);
																											if( j14array[0] > IKPI )
																											{
																												j14array[0]-=IK2PI;
																											}
																											else if( j14array[0] < -IKPI )
																											{
																												j14array[0]+=IK2PI;
																											}
																											j14valid[0] = true;
																											for(int ij14 = 0; ij14 < 1; ++ij14)
																											{
																												if( !j14valid[ij14] )
																												{
																													continue;
																												}
																												j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j13;
																													solution.basesol[1].foffset = j14;
																													solution.basesol[2].foffset = j15;
																													solution.basesol[3].foffset = j16;
																													solution.basesol[4].foffset = j17;
																													solution.basesol[5].foffset = j18;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j14array[1], cj14array[1], sj14array[1];
																									bool j14valid[1]={false};
																									j14array[0]=IKatan2(((gconst4)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst4)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																									sj14array[0]=IKsin(j14array[0]);
																									cj14array[0]=IKcos(j14array[0]);
																									if( j14array[0] > IKPI )
																									{
																										j14array[0]-=IK2PI;
																									}
																									else if( j14array[0] < -IKPI )
																									{
																										j14array[0]+=IK2PI;
																									}
																									j14valid[0] = true;
																									for(int ij14 = 0; ij14 < 1; ++ij14)
																									{
																										if( !j14valid[ij14] )
																										{
																											continue;
																										}
																										j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j13;
																											solution.basesol[1].foffset = j14;
																											solution.basesol[2].foffset = j15;
																											solution.basesol[3].foffset = j16;
																											solution.basesol[4].foffset = j17;
																											solution.basesol[5].foffset = j18;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
																						evalcond[1]=((((r20)*(sj18)))+(((cj18)*(r21))));
																						evalcond[2]=((0.0850000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																						evalcond[3]=((-1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																						evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((-0.0200000000000000)*(sj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																						evalcond[5]=((-0.0200000000000000)+(((npy)*(sj17)*(sj18)))+(((0.250000000000000)*(sj15)))+(((0.0200000000000000)*(cj15)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																						evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																						evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																						evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																						if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																						{
																							{
																								IKReal dummyeval[1];
																								IKReal gconst5;
																								gconst5=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																								dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									continue;

																								} else
																								{
																									{
																										IKReal j14array[1], cj14array[1], sj14array[1];
																										bool j14valid[1]={false};
																										j14array[0]=IKatan2(((gconst5)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst5)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																										sj14array[0]=IKsin(j14array[0]);
																										cj14array[0]=IKcos(j14array[0]);
																										if( j14array[0] > IKPI )
																										{
																											j14array[0]-=IK2PI;
																										}
																										else if( j14array[0] < -IKPI )
																										{
																											j14array[0]+=IK2PI;
																										}
																										j14valid[0] = true;
																										for(int ij14 = 0; ij14 < 1; ++ij14)
																										{
																											if( !j14valid[ij14] )
																											{
																												continue;
																											}
																											j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																											{
																												vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																												solution.basesol.resize(6);
																												solution.basesol[0].foffset = j13;
																												solution.basesol[1].foffset = j14;
																												solution.basesol[2].foffset = j15;
																												solution.basesol[3].foffset = j16;
																												solution.basesol[4].foffset = j17;
																												solution.basesol[5].foffset = j18;
																												solution.vfree.resize(0);
																											}
																										}
																									}

																								}

																							}

																						} else
																						{
																							if( 1 )
																							{
																								continue;

																							} else
																							{
																							}
																						}
																					}
																				}

																			} else
																			{
																				{
																					IKReal j14array[1], cj14array[1], sj14array[1];
																					bool j14valid[1]={false};
																					j14array[0]=IKatan2(((gconst3)*(((((r22)*(sj15)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj16)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((cj17)*(cj18)*(r20)*(sj15)*(sj16)))))), ((gconst3)*(((((cj15)*(cj17)*(r21)*(sj16)*(sj18)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)*(sj16)))))));
																					sj14array[0]=IKsin(j14array[0]);
																					cj14array[0]=IKcos(j14array[0]);
																					if( j14array[0] > IKPI )
																					{
																						j14array[0]-=IK2PI;
																					}
																					else if( j14array[0] < -IKPI )
																					{
																						j14array[0]+=IK2PI;
																					}
																					j14valid[0] = true;
																					for(int ij14 = 0; ij14 < 1; ++ij14)
																					{
																						if( !j14valid[ij14] )
																						{
																							continue;
																						}
																						j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																						{
																							vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																							solution.basesol.resize(6);
																							solution.basesol[0].foffset = j13;
																							solution.basesol[1].foffset = j14;
																							solution.basesol[2].foffset = j15;
																							solution.basesol[3].foffset = j16;
																							solution.basesol[4].foffset = j17;
																							solution.basesol[5].foffset = j18;
																							solution.vfree.resize(0);
																						}
																					}
																				}

																			}

																		}
																	}
																}

															}

														}
													}
												}

											}

										}

									} else
									{
										{
											IKReal j13array[1], cj13array[1], sj13array[1];
											bool j13valid[1]={false};
											j13array[0]=IKatan2(((gconst0)*(((((cj16)*(r11)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj16)))+(((cj16)*(cj17)*(r12)))+(((-1.00000000000000)*(cj16)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(r10)*(sj16)*(sj18)))))), ((gconst0)*(((((-1.00000000000000)*(cj16)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj18)*(r01)*(sj16)))+(((-1.00000000000000)*(r00)*(sj16)*(sj18)))+(((cj16)*(r01)*(sj17)*(sj18)))+(((cj16)*(cj17)*(r02)))))));
											sj13array[0]=IKsin(j13array[0]);
											cj13array[0]=IKcos(j13array[0]);
											if( j13array[0] > IKPI )
											{
												j13array[0]-=IK2PI;
											}
											else if( j13array[0] < -IKPI )
											{
												j13array[0]+=IK2PI;
											}
											j13valid[0] = true;
											for(int ij13 = 0; ij13 < 1; ++ij13)
											{
												if( !j13valid[ij13] )
												{
													continue;
												}
												j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

												{
													IKReal dummyeval[1];
													IKReal gconst2;
													gconst2=IKsign(sj16);
													dummyeval[0]=sj16;
													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
													{
														{
															IKReal evalcond[7];
															evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
															evalcond[1]=((((r20)*(sj18)))+(((cj18)*(r21))));
															evalcond[2]=((-0.0850000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
															evalcond[3]=((1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
															evalcond[4]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
															evalcond[5]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
															evalcond[6]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
															if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
															{
																{
																	IKReal j15array[1], cj15array[1], sj15array[1];
																	bool j15valid[1]={false};
																	j15array[0]=IKatan2(((0.149443561208267)+(((3.97456279809221)*(cj17)*(npz)))+(((-3.97456279809221)*(cj18)*(npx)*(sj17)))+(((-0.317965023847377)*(npz)*(sj17)))+(((3.97456279809221)*(npy)*(sj17)*(sj18)))+(((0.357710651828299)*(sj17)))+(((0.317965023847377)*(cj17)*(npy)*(sj18)))+(((0.0286168521462639)*(cj17)))+(((-0.317965023847377)*(cj17)*(cj18)*(npx)))), ((-0.868044515103339)+(((-0.317965023847377)*(cj18)*(npx)*(sj17)))+(((0.317965023847377)*(cj17)*(npz)))+(((-0.357710651828299)*(cj17)))+(((3.97456279809221)*(cj17)*(cj18)*(npx)))+(((0.317965023847377)*(npy)*(sj17)*(sj18)))+(((-3.97456279809221)*(cj17)*(npy)*(sj18)))+(((3.97456279809221)*(npz)*(sj17)))+(((0.0286168521462639)*(sj17)))));
																	sj15array[0]=IKsin(j15array[0]);
																	cj15array[0]=IKcos(j15array[0]);
																	if( j15array[0] > IKPI )
																	{
																		j15array[0]-=IK2PI;
																	}
																	else if( j15array[0] < -IKPI )
																	{
																		j15array[0]+=IK2PI;
																	}
																	j15valid[0] = true;
																	for(int ij15 = 0; ij15 < 1; ++ij15)
																	{
																		if( !j15valid[ij15] )
																		{
																			continue;
																		}
																		j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

																		{
																			IKReal dummyeval[1];
																			IKReal gconst6;
																			gconst6=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																			dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				{
																					IKReal dummyeval[1];
																					dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								continue;

																							} else
																							{
																								{
																									IKReal j14array[1], cj14array[1], sj14array[1];
																									bool j14valid[1]={false};
																									IKReal x281=(cj15)*(cj15);
																									IKReal x282=(sj15)*(sj15);
																									IKReal x283=((x282)+(x281));
																									j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x283) != 0)?((IKReal)1/(x283)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x283) != 0)?((IKReal)1/(x283)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																									sj14array[0]=IKsin(j14array[0]);
																									cj14array[0]=IKcos(j14array[0]);
																									if( j14array[0] > IKPI )
																									{
																										j14array[0]-=IK2PI;
																									}
																									else if( j14array[0] < -IKPI )
																									{
																										j14array[0]+=IK2PI;
																									}
																									j14valid[0] = true;
																									for(int ij14 = 0; ij14 < 1; ++ij14)
																									{
																										if( !j14valid[ij14] )
																										{
																											continue;
																										}
																										j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j13;
																											solution.basesol[1].foffset = j14;
																											solution.basesol[2].foffset = j15;
																											solution.basesol[3].foffset = j16;
																											solution.basesol[4].foffset = j17;
																											solution.basesol[5].foffset = j18;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j14array[1], cj14array[1], sj14array[1];
																							bool j14valid[1]={false};
																							IKReal x284=(cj15)*(cj15);
																							IKReal x285=(sj15)*(sj15);
																							IKReal x286=((x285)+(x284));
																							j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x286) != 0)?((IKReal)1/(x286)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x286) != 0)?((IKReal)1/(x286)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																							sj14array[0]=IKsin(j14array[0]);
																							cj14array[0]=IKcos(j14array[0]);
																							if( j14array[0] > IKPI )
																							{
																								j14array[0]-=IK2PI;
																							}
																							else if( j14array[0] < -IKPI )
																							{
																								j14array[0]+=IK2PI;
																							}
																							j14valid[0] = true;
																							for(int ij14 = 0; ij14 < 1; ++ij14)
																							{
																								if( !j14valid[ij14] )
																								{
																									continue;
																								}
																								j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j13;
																									solution.basesol[1].foffset = j14;
																									solution.basesol[2].foffset = j15;
																									solution.basesol[3].foffset = j16;
																									solution.basesol[4].foffset = j17;
																									solution.basesol[5].foffset = j18;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}

																			} else
																			{
																				{
																					IKReal j14array[1], cj14array[1], sj14array[1];
																					bool j14valid[1]={false};
																					j14array[0]=IKatan2(((gconst6)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst6)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																					sj14array[0]=IKsin(j14array[0]);
																					cj14array[0]=IKcos(j14array[0]);
																					if( j14array[0] > IKPI )
																					{
																						j14array[0]-=IK2PI;
																					}
																					else if( j14array[0] < -IKPI )
																					{
																						j14array[0]+=IK2PI;
																					}
																					j14valid[0] = true;
																					for(int ij14 = 0; ij14 < 1; ++ij14)
																					{
																						if( !j14valid[ij14] )
																						{
																							continue;
																						}
																						j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																						{
																							vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																							solution.basesol.resize(6);
																							solution.basesol[0].foffset = j13;
																							solution.basesol[1].foffset = j14;
																							solution.basesol[2].foffset = j15;
																							solution.basesol[3].foffset = j16;
																							solution.basesol[4].foffset = j17;
																							solution.basesol[5].foffset = j18;
																							solution.vfree.resize(0);
																						}
																					}
																				}

																			}

																		}
																	}
																}

															} else
															{
																evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
																evalcond[1]=((((r20)*(sj18)))+(((cj18)*(r21))));
																evalcond[2]=((0.0850000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																evalcond[3]=((-1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																evalcond[4]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																evalcond[5]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																evalcond[6]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
																{
																	{
																		IKReal j15array[1], cj15array[1], sj15array[1];
																		bool j15valid[1]={false};
																		j15array[0]=IKatan2(((0.149443561208267)+(((-0.317965023847377)*(npz)*(sj17)))+(((-3.97456279809221)*(npy)*(sj17)*(sj18)))+(((-3.97456279809221)*(cj17)*(npz)))+(((0.317965023847377)*(cj17)*(npy)*(sj18)))+(((0.0286168521462639)*(cj17)))+(((-0.317965023847377)*(cj17)*(cj18)*(npx)))+(((-0.357710651828299)*(sj17)))+(((3.97456279809221)*(cj18)*(npx)*(sj17)))), ((-0.868044515103339)+(((-0.357710651828299)*(cj17)))+(((3.97456279809221)*(cj17)*(cj18)*(npx)))+(((0.317965023847377)*(cj18)*(npx)*(sj17)))+(((-0.0286168521462639)*(sj17)))+(((-3.97456279809221)*(cj17)*(npy)*(sj18)))+(((3.97456279809221)*(npz)*(sj17)))+(((-0.317965023847377)*(npy)*(sj17)*(sj18)))+(((-0.317965023847377)*(cj17)*(npz)))));
																		sj15array[0]=IKsin(j15array[0]);
																		cj15array[0]=IKcos(j15array[0]);
																		if( j15array[0] > IKPI )
																		{
																			j15array[0]-=IK2PI;
																		}
																		else if( j15array[0] < -IKPI )
																		{
																			j15array[0]+=IK2PI;
																		}
																		j15valid[0] = true;
																		for(int ij15 = 0; ij15 < 1; ++ij15)
																		{
																			if( !j15valid[ij15] )
																			{
																				continue;
																			}
																			j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

																			{
																				IKReal dummyeval[1];
																				IKReal gconst7;
																				gconst7=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																				dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																				if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																				{
																					continue;

																				} else
																				{
																					{
																						IKReal j14array[1], cj14array[1], sj14array[1];
																						bool j14valid[1]={false};
																						j14array[0]=IKatan2(((gconst7)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst7)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																						sj14array[0]=IKsin(j14array[0]);
																						cj14array[0]=IKcos(j14array[0]);
																						if( j14array[0] > IKPI )
																						{
																							j14array[0]-=IK2PI;
																						}
																						else if( j14array[0] < -IKPI )
																						{
																							j14array[0]+=IK2PI;
																						}
																						j14valid[0] = true;
																						for(int ij14 = 0; ij14 < 1; ++ij14)
																						{
																							if( !j14valid[ij14] )
																							{
																								continue;
																							}
																							j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																							{
																								vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																								solution.basesol.resize(6);
																								solution.basesol[0].foffset = j13;
																								solution.basesol[1].foffset = j14;
																								solution.basesol[2].foffset = j15;
																								solution.basesol[3].foffset = j16;
																								solution.basesol[4].foffset = j17;
																								solution.basesol[5].foffset = j18;
																								solution.vfree.resize(0);
																							}
																						}
																					}

																				}

																			}
																		}
																	}

																} else
																{
																	if( 1 )
																	{
																		continue;

																	} else
																	{
																	}
																}
															}
														}

													} else
													{
														{
															IKReal j15array[1], cj15array[1], sj15array[1];
															bool j15valid[1]={false};
															j15array[0]=IKatan2(((gconst2)*(((((212.500000000000)*(cj16)))+(((-200.000000000000)*(cj17)*(cj18)*(npx)*(sj16)))+(((200.000000000000)*(cj17)*(npy)*(sj16)*(sj18)))+(((-2500.00000000000)*(npx)*(sj18)))+(((18.0000000000000)*(cj17)*(sj16)))+(((-200.000000000000)*(npz)*(sj16)*(sj17)))+(((-2500.00000000000)*(cj18)*(npy)))+(((94.0000000000000)*(sj16)))))), ((gconst2)*(((((2500.00000000000)*(cj17)*(cj18)*(npx)*(sj16)))+(((-200.000000000000)*(cj18)*(npy)))+(((-2500.00000000000)*(cj17)*(npy)*(sj16)*(sj18)))+(((17.0000000000000)*(cj16)))+(((-225.000000000000)*(cj17)*(sj16)))+(((2500.00000000000)*(npz)*(sj16)*(sj17)))+(((-200.000000000000)*(npx)*(sj18)))+(((-546.000000000000)*(sj16)))))));
															sj15array[0]=IKsin(j15array[0]);
															cj15array[0]=IKcos(j15array[0]);
															if( j15array[0] > IKPI )
															{
																j15array[0]-=IK2PI;
															}
															else if( j15array[0] < -IKPI )
															{
																j15array[0]+=IK2PI;
															}
															j15valid[0] = true;
															for(int ij15 = 0; ij15 < 1; ++ij15)
															{
																if( !j15valid[ij15] )
																{
																	continue;
																}
																j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

																{
																	IKReal dummyeval[1];
																	IKReal gconst3;
																	gconst3=IKsign(((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15))))));
																	dummyeval[0]=((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15)))));
																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																	{
																		{
																			IKReal evalcond[9];
																			evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
																			evalcond[1]=((((r20)*(sj18)))+(((cj18)*(r21))));
																			evalcond[2]=((-0.0850000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																			evalcond[3]=((1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																			evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((-0.0200000000000000)*(sj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																			evalcond[5]=((0.0200000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((-0.0200000000000000)*(cj15)))+(((-0.250000000000000)*(sj15)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																			evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																			evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																			evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																			if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																			{
																				{
																					IKReal dummyeval[1];
																					IKReal gconst4;
																					gconst4=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																					dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										continue;

																									} else
																									{
																										{
																											IKReal j14array[1], cj14array[1], sj14array[1];
																											bool j14valid[1]={false};
																											IKReal x287=(cj15)*(cj15);
																											IKReal x288=(sj15)*(sj15);
																											IKReal x289=((x288)+(x287));
																											j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x289) != 0)?((IKReal)1/(x289)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x289) != 0)?((IKReal)1/(x289)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																											sj14array[0]=IKsin(j14array[0]);
																											cj14array[0]=IKcos(j14array[0]);
																											if( j14array[0] > IKPI )
																											{
																												j14array[0]-=IK2PI;
																											}
																											else if( j14array[0] < -IKPI )
																											{
																												j14array[0]+=IK2PI;
																											}
																											j14valid[0] = true;
																											for(int ij14 = 0; ij14 < 1; ++ij14)
																											{
																												if( !j14valid[ij14] )
																												{
																													continue;
																												}
																												j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j13;
																													solution.basesol[1].foffset = j14;
																													solution.basesol[2].foffset = j15;
																													solution.basesol[3].foffset = j16;
																													solution.basesol[4].foffset = j17;
																													solution.basesol[5].foffset = j18;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j14array[1], cj14array[1], sj14array[1];
																									bool j14valid[1]={false};
																									IKReal x290=(cj15)*(cj15);
																									IKReal x291=(sj15)*(sj15);
																									IKReal x292=((x290)+(x291));
																									j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x292) != 0)?((IKReal)1/(x292)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x292) != 0)?((IKReal)1/(x292)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																									sj14array[0]=IKsin(j14array[0]);
																									cj14array[0]=IKcos(j14array[0]);
																									if( j14array[0] > IKPI )
																									{
																										j14array[0]-=IK2PI;
																									}
																									else if( j14array[0] < -IKPI )
																									{
																										j14array[0]+=IK2PI;
																									}
																									j14valid[0] = true;
																									for(int ij14 = 0; ij14 < 1; ++ij14)
																									{
																										if( !j14valid[ij14] )
																										{
																											continue;
																										}
																										j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j13;
																											solution.basesol[1].foffset = j14;
																											solution.basesol[2].foffset = j15;
																											solution.basesol[3].foffset = j16;
																											solution.basesol[4].foffset = j17;
																											solution.basesol[5].foffset = j18;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j14array[1], cj14array[1], sj14array[1];
																							bool j14valid[1]={false};
																							j14array[0]=IKatan2(((gconst4)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst4)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																							sj14array[0]=IKsin(j14array[0]);
																							cj14array[0]=IKcos(j14array[0]);
																							if( j14array[0] > IKPI )
																							{
																								j14array[0]-=IK2PI;
																							}
																							else if( j14array[0] < -IKPI )
																							{
																								j14array[0]+=IK2PI;
																							}
																							j14valid[0] = true;
																							for(int ij14 = 0; ij14 < 1; ++ij14)
																							{
																								if( !j14valid[ij14] )
																								{
																									continue;
																								}
																								j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j13;
																									solution.basesol[1].foffset = j14;
																									solution.basesol[2].foffset = j15;
																									solution.basesol[3].foffset = j16;
																									solution.basesol[4].foffset = j17;
																									solution.basesol[5].foffset = j18;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}

																			} else
																			{
																				evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
																				evalcond[1]=((((r20)*(sj18)))+(((cj18)*(r21))));
																				evalcond[2]=((0.0850000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																				evalcond[3]=((-1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																				evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((-0.0200000000000000)*(sj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																				evalcond[5]=((-0.0200000000000000)+(((npy)*(sj17)*(sj18)))+(((0.250000000000000)*(sj15)))+(((0.0200000000000000)*(cj15)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																				evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																				evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																				evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																				if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																				{
																					{
																						IKReal dummyeval[1];
																						IKReal gconst5;
																						gconst5=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																						dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							continue;

																						} else
																						{
																							{
																								IKReal j14array[1], cj14array[1], sj14array[1];
																								bool j14valid[1]={false};
																								j14array[0]=IKatan2(((gconst5)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst5)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																								sj14array[0]=IKsin(j14array[0]);
																								cj14array[0]=IKcos(j14array[0]);
																								if( j14array[0] > IKPI )
																								{
																									j14array[0]-=IK2PI;
																								}
																								else if( j14array[0] < -IKPI )
																								{
																									j14array[0]+=IK2PI;
																								}
																								j14valid[0] = true;
																								for(int ij14 = 0; ij14 < 1; ++ij14)
																								{
																									if( !j14valid[ij14] )
																									{
																										continue;
																									}
																									j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																									{
																										vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																										solution.basesol.resize(6);
																										solution.basesol[0].foffset = j13;
																										solution.basesol[1].foffset = j14;
																										solution.basesol[2].foffset = j15;
																										solution.basesol[3].foffset = j16;
																										solution.basesol[4].foffset = j17;
																										solution.basesol[5].foffset = j18;
																										solution.vfree.resize(0);
																									}
																								}
																							}

																						}

																					}

																				} else
																				{
																					if( 1 )
																					{
																						continue;

																					} else
																					{
																					}
																				}
																			}
																		}

																	} else
																	{
																		{
																			IKReal j14array[1], cj14array[1], sj14array[1];
																			bool j14valid[1]={false};
																			j14array[0]=IKatan2(((gconst3)*(((((r22)*(sj15)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj16)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((cj17)*(cj18)*(r20)*(sj15)*(sj16)))))), ((gconst3)*(((((cj15)*(cj17)*(r21)*(sj16)*(sj18)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)*(sj16)))))));
																			sj14array[0]=IKsin(j14array[0]);
																			cj14array[0]=IKcos(j14array[0]);
																			if( j14array[0] > IKPI )
																			{
																				j14array[0]-=IK2PI;
																			}
																			else if( j14array[0] < -IKPI )
																			{
																				j14array[0]+=IK2PI;
																			}
																			j14valid[0] = true;
																			for(int ij14 = 0; ij14 < 1; ++ij14)
																			{
																				if( !j14valid[ij14] )
																				{
																					continue;
																				}
																				j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																				{
																					vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																					solution.basesol.resize(6);
																					solution.basesol[0].foffset = j13;
																					solution.basesol[1].foffset = j14;
																					solution.basesol[2].foffset = j15;
																					solution.basesol[3].foffset = j16;
																					solution.basesol[4].foffset = j17;
																					solution.basesol[5].foffset = j18;
																					solution.vfree.resize(0);
																				}
																			}
																		}

																	}

																}
															}
														}

													}

												}
											}
										}

									}

								}

							} else
							{
								{
									IKReal j15array[1], cj15array[1], sj15array[1];
									bool j15valid[1]={false};
									j15array[0]=IKatan2(((gconst1)*(((((212.500000000000)*(cj16)))+(((-200.000000000000)*(cj17)*(cj18)*(npx)*(sj16)))+(((200.000000000000)*(cj17)*(npy)*(sj16)*(sj18)))+(((-2500.00000000000)*(npx)*(sj18)))+(((18.0000000000000)*(cj17)*(sj16)))+(((-200.000000000000)*(npz)*(sj16)*(sj17)))+(((-2500.00000000000)*(cj18)*(npy)))+(((94.0000000000000)*(sj16)))))), ((gconst1)*(((((2500.00000000000)*(cj17)*(cj18)*(npx)*(sj16)))+(((-200.000000000000)*(cj18)*(npy)))+(((-2500.00000000000)*(cj17)*(npy)*(sj16)*(sj18)))+(((17.0000000000000)*(cj16)))+(((-225.000000000000)*(cj17)*(sj16)))+(((2500.00000000000)*(npz)*(sj16)*(sj17)))+(((-200.000000000000)*(npx)*(sj18)))+(((-546.000000000000)*(sj16)))))));
									sj15array[0]=IKsin(j15array[0]);
									cj15array[0]=IKcos(j15array[0]);
									if( j15array[0] > IKPI )
									{
										j15array[0]-=IK2PI;
									}
									else if( j15array[0] < -IKPI )
									{
										j15array[0]+=IK2PI;
									}
									j15valid[0] = true;
									for(int ij15 = 0; ij15 < 1; ++ij15)
									{
										if( !j15valid[ij15] )
										{
											continue;
										}
										j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

										{
											IKReal dummyeval[1];
											IKReal gconst9;
											gconst9=IKsign(((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15))))));
											dummyeval[0]=((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15)))));
											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
											{
												{
													IKReal dummyeval[1];
													IKReal gconst8;
													IKReal x293=(cj18)*(cj18);
													IKReal x294=(sj18)*(sj18);
													gconst8=IKsign(((((r01)*(r10)*(sj17)*(x293)))+(((r01)*(r10)*(sj17)*(x294)))+(((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x293)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x294)))+(((cj17)*(cj18)*(r02)*(r11)))));
													IKReal x295=(cj18)*(cj18);
													IKReal x296=(sj18)*(sj18);
													dummyeval[0]=((((r01)*(r10)*(sj17)*(x296)))+(((r01)*(r10)*(sj17)*(x295)))+(((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x296)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x295)))+(((cj17)*(cj18)*(r02)*(r11))));
													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
													{
														{
															IKReal dummyeval[1];
															IKReal x297=(sj18)*(sj18);
															IKReal x298=(cj18)*(cj18);
															dummyeval[0]=((((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj17)*(r00)*(r11)*(x297)))+(((cj17)*(r00)*(r11)*(x298)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x298)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x297))));
															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
															{
																{
																	IKReal evalcond[5];
																	evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
																	evalcond[1]=((((r20)*(sj18)))+(((cj18)*(r21))));
																	evalcond[2]=((-0.0850000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																	evalcond[3]=((0.220000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((-0.0200000000000000)*(sj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																	evalcond[4]=((0.0200000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((-0.0200000000000000)*(cj15)))+(((-0.250000000000000)*(sj15)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																	if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
																	{
																		{
																			IKReal dummyeval[1];
																			dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				{
																					IKReal dummyeval[1];
																					IKReal x299=(sj18)*(sj18);
																					IKReal x300=(cj18)*(cj18);
																					dummyeval[0]=((((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((x300)*((r01)*(r01))))+(((x300)*((r11)*(r11))))+(((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((x299)*((r00)*(r00))))+(((x299)*((r10)*(r10)))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							IKReal x301=(sj18)*(sj18);
																							IKReal x302=(cj18)*(cj18);
																							dummyeval[0]=((((cj17)*(r00)*(r11)*(x302)))+(((cj17)*(r00)*(r11)*(x301)))+(((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x301)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x302)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								continue;

																							} else
																							{
																								{
																									IKReal j13array[1], cj13array[1], sj13array[1];
																									bool j13valid[1]={false};
																									IKReal x303=(sj18)*(sj18);
																									IKReal x304=(cj18)*(cj18);
																									IKReal x305=((cj17)*(r01)*(r10)*(x303));
																									IKReal x306=((cj18)*(r01)*(r12)*(sj17));
																									IKReal x307=((r00)*(r12)*(sj17)*(sj18));
																									IKReal x308=((cj17)*(r01)*(r10)*(x304));
																									IKReal x309=((x308)+(x306)+(x307)+(x305));
																									IKReal x310=((cj17)*(r00)*(r11)*(x303));
																									IKReal x311=((cj17)*(r00)*(r11)*(x304));
																									IKReal x312=((r02)*(r10)*(sj17)*(sj18));
																									IKReal x313=((cj18)*(r02)*(r11)*(sj17));
																									IKReal x314=((x311)+(x310)+(x313)+(x312));
																									j13array[0]=IKatan2(((((IKabs(((x314)+(((-1.00000000000000)*(x309))))) != 0)?((IKReal)1/(((x314)+(((-1.00000000000000)*(x309)))))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((x309)+(((-1.00000000000000)*(x314))))) != 0)?((IKReal)1/(((x309)+(((-1.00000000000000)*(x314)))))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
																									sj13array[0]=IKsin(j13array[0]);
																									cj13array[0]=IKcos(j13array[0]);
																									if( j13array[0] > IKPI )
																									{
																										j13array[0]-=IK2PI;
																									}
																									else if( j13array[0] < -IKPI )
																									{
																										j13array[0]+=IK2PI;
																									}
																									j13valid[0] = true;
																									for(int ij13 = 0; ij13 < 1; ++ij13)
																									{
																										if( !j13valid[ij13] )
																										{
																											continue;
																										}
																										j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																										{
																											IKReal dummyeval[1];
																											IKReal gconst14;
																											gconst14=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																											dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												{
																													IKReal dummyeval[1];
																													dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														{
																															IKReal dummyeval[1];
																															dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																															{
																																continue;

																															} else
																															{
																																{
																																	IKReal j14array[1], cj14array[1], sj14array[1];
																																	bool j14valid[1]={false};
																																	IKReal x315=(cj15)*(cj15);
																																	IKReal x316=(sj15)*(sj15);
																																	IKReal x317=((x315)+(x316));
																																	j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x317) != 0)?((IKReal)1/(x317)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x317) != 0)?((IKReal)1/(x317)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																																	sj14array[0]=IKsin(j14array[0]);
																																	cj14array[0]=IKcos(j14array[0]);
																																	if( j14array[0] > IKPI )
																																	{
																																		j14array[0]-=IK2PI;
																																	}
																																	else if( j14array[0] < -IKPI )
																																	{
																																		j14array[0]+=IK2PI;
																																	}
																																	j14valid[0] = true;
																																	for(int ij14 = 0; ij14 < 1; ++ij14)
																																	{
																																		if( !j14valid[ij14] )
																																		{
																																			continue;
																																		}
																																		j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																		{
																																			vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																			solution.basesol.resize(6);
																																			solution.basesol[0].foffset = j13;
																																			solution.basesol[1].foffset = j14;
																																			solution.basesol[2].foffset = j15;
																																			solution.basesol[3].foffset = j16;
																																			solution.basesol[4].foffset = j17;
																																			solution.basesol[5].foffset = j18;
																																			solution.vfree.resize(0);
																																		}
																																	}
																																}

																															}

																														}

																													} else
																													{
																														{
																															IKReal j14array[1], cj14array[1], sj14array[1];
																															bool j14valid[1]={false};
																															IKReal x318=(cj15)*(cj15);
																															IKReal x319=(sj15)*(sj15);
																															IKReal x320=((x319)+(x318));
																															j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x320) != 0)?((IKReal)1/(x320)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x320) != 0)?((IKReal)1/(x320)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																															sj14array[0]=IKsin(j14array[0]);
																															cj14array[0]=IKcos(j14array[0]);
																															if( j14array[0] > IKPI )
																															{
																																j14array[0]-=IK2PI;
																															}
																															else if( j14array[0] < -IKPI )
																															{
																																j14array[0]+=IK2PI;
																															}
																															j14valid[0] = true;
																															for(int ij14 = 0; ij14 < 1; ++ij14)
																															{
																																if( !j14valid[ij14] )
																																{
																																	continue;
																																}
																																j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j13;
																																	solution.basesol[1].foffset = j14;
																																	solution.basesol[2].foffset = j15;
																																	solution.basesol[3].foffset = j16;
																																	solution.basesol[4].foffset = j17;
																																	solution.basesol[5].foffset = j18;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}

																											} else
																											{
																												{
																													IKReal j14array[1], cj14array[1], sj14array[1];
																													bool j14valid[1]={false};
																													j14array[0]=IKatan2(((gconst14)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst14)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																													sj14array[0]=IKsin(j14array[0]);
																													cj14array[0]=IKcos(j14array[0]);
																													if( j14array[0] > IKPI )
																													{
																														j14array[0]-=IK2PI;
																													}
																													else if( j14array[0] < -IKPI )
																													{
																														j14array[0]+=IK2PI;
																													}
																													j14valid[0] = true;
																													for(int ij14 = 0; ij14 < 1; ++ij14)
																													{
																														if( !j14valid[ij14] )
																														{
																															continue;
																														}
																														j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j13;
																															solution.basesol[1].foffset = j14;
																															solution.basesol[2].foffset = j15;
																															solution.basesol[3].foffset = j16;
																															solution.basesol[4].foffset = j17;
																															solution.basesol[5].foffset = j18;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j13array[1], cj13array[1], sj13array[1];
																							bool j13valid[1]={false};
																							IKReal x321=(sj18)*(sj18);
																							IKReal x322=(cj18)*(cj18);
																							IKReal x323=(r10)*(r10);
																							IKReal x324=((x321)*(x323));
																							IKReal x325=(r00)*(r00);
																							IKReal x326=((x321)*(x325));
																							IKReal x327=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
																							IKReal x328=(r01)*(r01);
																							IKReal x329=((x322)*(x328));
																							IKReal x330=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
																							IKReal x331=(r11)*(r11);
																							IKReal x332=((x322)*(x331));
																							IKReal x333=((x332)+(x330)+(x324)+(x326)+(x327)+(x329));
																							j13array[0]=IKatan2(((((IKabs(x333) != 0)?((IKReal)1/(x333)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((-1.00000000000000)*(((IKabs(x333) != 0)?((IKReal)1/(x333)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
																							sj13array[0]=IKsin(j13array[0]);
																							cj13array[0]=IKcos(j13array[0]);
																							if( j13array[0] > IKPI )
																							{
																								j13array[0]-=IK2PI;
																							}
																							else if( j13array[0] < -IKPI )
																							{
																								j13array[0]+=IK2PI;
																							}
																							j13valid[0] = true;
																							for(int ij13 = 0; ij13 < 1; ++ij13)
																							{
																								if( !j13valid[ij13] )
																								{
																									continue;
																								}
																								j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																								{
																									IKReal dummyeval[1];
																									IKReal gconst14;
																									gconst14=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																									dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												{
																													IKReal dummyeval[1];
																													dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														continue;

																													} else
																													{
																														{
																															IKReal j14array[1], cj14array[1], sj14array[1];
																															bool j14valid[1]={false};
																															IKReal x334=(cj15)*(cj15);
																															IKReal x335=(sj15)*(sj15);
																															IKReal x336=((x335)+(x334));
																															j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x336) != 0)?((IKReal)1/(x336)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x336) != 0)?((IKReal)1/(x336)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																															sj14array[0]=IKsin(j14array[0]);
																															cj14array[0]=IKcos(j14array[0]);
																															if( j14array[0] > IKPI )
																															{
																																j14array[0]-=IK2PI;
																															}
																															else if( j14array[0] < -IKPI )
																															{
																																j14array[0]+=IK2PI;
																															}
																															j14valid[0] = true;
																															for(int ij14 = 0; ij14 < 1; ++ij14)
																															{
																																if( !j14valid[ij14] )
																																{
																																	continue;
																																}
																																j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j13;
																																	solution.basesol[1].foffset = j14;
																																	solution.basesol[2].foffset = j15;
																																	solution.basesol[3].foffset = j16;
																																	solution.basesol[4].foffset = j17;
																																	solution.basesol[5].foffset = j18;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}

																											} else
																											{
																												{
																													IKReal j14array[1], cj14array[1], sj14array[1];
																													bool j14valid[1]={false};
																													IKReal x337=(cj15)*(cj15);
																													IKReal x338=(sj15)*(sj15);
																													IKReal x339=((x338)+(x337));
																													j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x339) != 0)?((IKReal)1/(x339)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x339) != 0)?((IKReal)1/(x339)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																													sj14array[0]=IKsin(j14array[0]);
																													cj14array[0]=IKcos(j14array[0]);
																													if( j14array[0] > IKPI )
																													{
																														j14array[0]-=IK2PI;
																													}
																													else if( j14array[0] < -IKPI )
																													{
																														j14array[0]+=IK2PI;
																													}
																													j14valid[0] = true;
																													for(int ij14 = 0; ij14 < 1; ++ij14)
																													{
																														if( !j14valid[ij14] )
																														{
																															continue;
																														}
																														j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j13;
																															solution.basesol[1].foffset = j14;
																															solution.basesol[2].foffset = j15;
																															solution.basesol[3].foffset = j16;
																															solution.basesol[4].foffset = j17;
																															solution.basesol[5].foffset = j18;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j14array[1], cj14array[1], sj14array[1];
																											bool j14valid[1]={false};
																											j14array[0]=IKatan2(((gconst14)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst14)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																											sj14array[0]=IKsin(j14array[0]);
																											cj14array[0]=IKcos(j14array[0]);
																											if( j14array[0] > IKPI )
																											{
																												j14array[0]-=IK2PI;
																											}
																											else if( j14array[0] < -IKPI )
																											{
																												j14array[0]+=IK2PI;
																											}
																											j14valid[0] = true;
																											for(int ij14 = 0; ij14 < 1; ++ij14)
																											{
																												if( !j14valid[ij14] )
																												{
																													continue;
																												}
																												j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j13;
																													solution.basesol[1].foffset = j14;
																													solution.basesol[2].foffset = j15;
																													solution.basesol[3].foffset = j16;
																													solution.basesol[4].foffset = j17;
																													solution.basesol[5].foffset = j18;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}
																							}
																						}

																					}

																				}

																			} else
																			{
																				{
																					IKReal j14array[1], cj14array[1], sj14array[1];
																					bool j14valid[1]={false};
																					IKReal x340=(cj15)*(cj15);
																					IKReal x341=(sj15)*(sj15);
																					IKReal x342=((x340)+(x341));
																					j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x342) != 0)?((IKReal)1/(x342)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x342) != 0)?((IKReal)1/(x342)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																					sj14array[0]=IKsin(j14array[0]);
																					cj14array[0]=IKcos(j14array[0]);
																					if( j14array[0] > IKPI )
																					{
																						j14array[0]-=IK2PI;
																					}
																					else if( j14array[0] < -IKPI )
																					{
																						j14array[0]+=IK2PI;
																					}
																					j14valid[0] = true;
																					for(int ij14 = 0; ij14 < 1; ++ij14)
																					{
																						if( !j14valid[ij14] )
																						{
																							continue;
																						}
																						j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																						{
																							IKReal dummyeval[1];
																							IKReal gconst15;
																							IKReal x343=(cj18)*(cj18);
																							IKReal x344=(sj18)*(sj18);
																							gconst15=IKsign(((((-1.00000000000000)*(cj17)*(r10)*(r11)*(x344)))+(((cj17)*(r10)*(r11)*(x343)))+(((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x344)))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((r00)*(r02)*(sj17)*(sj18)))+(((cj17)*(r00)*(r01)*(x343)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18)))));
																							IKReal x345=(cj18)*(cj18);
																							IKReal x346=(sj18)*(sj18);
																							dummyeval[0]=((((-1.00000000000000)*(cj17)*(r10)*(r11)*(x346)))+(((cj17)*(r10)*(r11)*(x345)))+(((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x346)))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((r00)*(r02)*(sj17)*(sj18)))+(((cj17)*(r00)*(r01)*(x345)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									IKReal x347=(sj18)*(sj18);
																									IKReal x348=(cj18)*(cj18);
																									dummyeval[0]=((((x348)*((r01)*(r01))))+(((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((x348)*((r11)*(r11))))+(((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((x347)*((r10)*(r10))))+(((x347)*((r00)*(r00)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											IKReal x349=(sj18)*(sj18);
																											IKReal x350=(cj18)*(cj18);
																											dummyeval[0]=((((-1.00000000000000)*(cj17)*(r01)*(r10)*(x349)))+(((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj17)*(r00)*(r11)*(x349)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x350)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18)))+(((cj17)*(r00)*(r11)*(x350))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												continue;

																											} else
																											{
																												{
																													IKReal j13array[1], cj13array[1], sj13array[1];
																													bool j13valid[1]={false};
																													IKReal x351=(sj18)*(sj18);
																													IKReal x352=(cj18)*(cj18);
																													IKReal x353=((cj17)*(r01)*(r10)*(x351));
																													IKReal x354=((cj18)*(r01)*(r12)*(sj17));
																													IKReal x355=((r00)*(r12)*(sj17)*(sj18));
																													IKReal x356=((cj17)*(r01)*(r10)*(x352));
																													IKReal x357=((x353)+(x355)+(x354)+(x356));
																													IKReal x358=((cj17)*(r00)*(r11)*(x351));
																													IKReal x359=((cj17)*(r00)*(r11)*(x352));
																													IKReal x360=((r02)*(r10)*(sj17)*(sj18));
																													IKReal x361=((cj18)*(r02)*(r11)*(sj17));
																													IKReal x362=((x359)+(x358)+(x360)+(x361));
																													j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x357)))+(x362))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x357)))+(x362)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((((-1.00000000000000)*(x362)))+(x357))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x362)))+(x357)))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
																													sj13array[0]=IKsin(j13array[0]);
																													cj13array[0]=IKcos(j13array[0]);
																													if( j13array[0] > IKPI )
																													{
																														j13array[0]-=IK2PI;
																													}
																													else if( j13array[0] < -IKPI )
																													{
																														j13array[0]+=IK2PI;
																													}
																													j13valid[0] = true;
																													for(int ij13 = 0; ij13 < 1; ++ij13)
																													{
																														if( !j13valid[ij13] )
																														{
																															continue;
																														}
																														j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j13;
																															solution.basesol[1].foffset = j14;
																															solution.basesol[2].foffset = j15;
																															solution.basesol[3].foffset = j16;
																															solution.basesol[4].foffset = j17;
																															solution.basesol[5].foffset = j18;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j13array[1], cj13array[1], sj13array[1];
																											bool j13valid[1]={false};
																											IKReal x363=(sj18)*(sj18);
																											IKReal x364=(cj18)*(cj18);
																											IKReal x365=(r10)*(r10);
																											IKReal x366=((x363)*(x365));
																											IKReal x367=(r00)*(r00);
																											IKReal x368=((x363)*(x367));
																											IKReal x369=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
																											IKReal x370=(r01)*(r01);
																											IKReal x371=((x364)*(x370));
																											IKReal x372=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
																											IKReal x373=(r11)*(r11);
																											IKReal x374=((x364)*(x373));
																											IKReal x375=((x374)+(x372)+(x371)+(x368)+(x369)+(x366));
																											j13array[0]=IKatan2(((((IKabs(x375) != 0)?((IKReal)1/(x375)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((-1.00000000000000)*(((IKabs(x375) != 0)?((IKReal)1/(x375)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
																											sj13array[0]=IKsin(j13array[0]);
																											cj13array[0]=IKcos(j13array[0]);
																											if( j13array[0] > IKPI )
																											{
																												j13array[0]-=IK2PI;
																											}
																											else if( j13array[0] < -IKPI )
																											{
																												j13array[0]+=IK2PI;
																											}
																											j13valid[0] = true;
																											for(int ij13 = 0; ij13 < 1; ++ij13)
																											{
																												if( !j13valid[ij13] )
																												{
																													continue;
																												}
																												j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j13;
																													solution.basesol[1].foffset = j14;
																													solution.basesol[2].foffset = j15;
																													solution.basesol[3].foffset = j16;
																													solution.basesol[4].foffset = j17;
																													solution.basesol[5].foffset = j18;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j13array[1], cj13array[1], sj13array[1];
																									bool j13valid[1]={false};
																									j13array[0]=IKatan2(((gconst15)*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj14)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj15)*(r10)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj14)*(r10)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj14)*(cj18)*(r11)*(sj15)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))), ((gconst15)*(((((-1.00000000000000)*(cj14)*(r00)*(sj15)*(sj18)))+(((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj15)*(r00)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r01)*(sj14)))+(((cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj14)*(cj18)*(r01)*(sj15)))))));
																									sj13array[0]=IKsin(j13array[0]);
																									cj13array[0]=IKcos(j13array[0]);
																									if( j13array[0] > IKPI )
																									{
																										j13array[0]-=IK2PI;
																									}
																									else if( j13array[0] < -IKPI )
																									{
																										j13array[0]+=IK2PI;
																									}
																									j13valid[0] = true;
																									for(int ij13 = 0; ij13 < 1; ++ij13)
																									{
																										if( !j13valid[ij13] )
																										{
																											continue;
																										}
																										j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j13;
																											solution.basesol[1].foffset = j14;
																											solution.basesol[2].foffset = j15;
																											solution.basesol[3].foffset = j16;
																											solution.basesol[4].foffset = j17;
																											solution.basesol[5].foffset = j18;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}
																					}
																				}

																			}

																		}

																	} else
																	{
																		evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
																		evalcond[1]=((((r20)*(sj18)))+(((cj18)*(r21))));
																		evalcond[2]=((0.0850000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																		evalcond[3]=((0.220000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((-0.0200000000000000)*(sj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																		evalcond[4]=((-0.0200000000000000)+(((npy)*(sj17)*(sj18)))+(((0.250000000000000)*(sj15)))+(((0.0200000000000000)*(cj15)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																		if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
																		{
																			{
																				IKReal dummyeval[1];
																				IKReal gconst16;
																				gconst16=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																				dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																				if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																				{
																					{
																						IKReal dummyeval[1];
																						IKReal x376=(sj18)*(sj18);
																						IKReal x377=(cj18)*(cj18);
																						dummyeval[0]=((((-2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((-1.00000000000000)*(x377)*((r01)*(r01))))+(((-2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((-1.00000000000000)*(x376)*((r10)*(r10))))+(((-1.00000000000000)*(x376)*((r00)*(r00))))+(((-1.00000000000000)*(x377)*((r11)*(r11)))));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							{
																								IKReal dummyeval[1];
																								IKReal x378=(sj18)*(sj18);
																								IKReal x379=(cj18)*(cj18);
																								dummyeval[0]=((((-1.00000000000000)*(cj17)*(r00)*(r11)*(x378)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x379)))+(((-1.00000000000000)*(r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r02)*(r11)*(sj17)))+(((cj17)*(r01)*(r10)*(x379)))+(((cj17)*(r01)*(r10)*(x378)))+(((cj18)*(r01)*(r12)*(sj17)))+(((r00)*(r12)*(sj17)*(sj18))));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									continue;

																								} else
																								{
																									{
																										IKReal j13array[1], cj13array[1], sj13array[1];
																										bool j13valid[1]={false};
																										IKReal x380=(sj18)*(sj18);
																										IKReal x381=(cj18)*(cj18);
																										IKReal x382=((cj17)*(r00)*(r11)*(x380));
																										IKReal x383=((cj17)*(r00)*(r11)*(x381));
																										IKReal x384=((r02)*(r10)*(sj17)*(sj18));
																										IKReal x385=((cj18)*(r02)*(r11)*(sj17));
																										IKReal x386=((x384)+(x385)+(x382)+(x383));
																										IKReal x387=((cj17)*(r01)*(r10)*(x380));
																										IKReal x388=((cj18)*(r01)*(r12)*(sj17));
																										IKReal x389=((r00)*(r12)*(sj17)*(sj18));
																										IKReal x390=((cj17)*(r01)*(r10)*(x381));
																										IKReal x391=((x387)+(x388)+(x389)+(x390));
																										j13array[0]=IKatan2(((((IKabs(((x391)+(((-1.00000000000000)*(x386))))) != 0)?((IKReal)1/(((x391)+(((-1.00000000000000)*(x386)))))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((((-1.00000000000000)*(x391)))+(x386))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x391)))+(x386)))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
																										sj13array[0]=IKsin(j13array[0]);
																										cj13array[0]=IKcos(j13array[0]);
																										if( j13array[0] > IKPI )
																										{
																											j13array[0]-=IK2PI;
																										}
																										else if( j13array[0] < -IKPI )
																										{
																											j13array[0]+=IK2PI;
																										}
																										j13valid[0] = true;
																										for(int ij13 = 0; ij13 < 1; ++ij13)
																										{
																											if( !j13valid[ij13] )
																											{
																												continue;
																											}
																											j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																											{
																												IKReal dummyeval[1];
																												IKReal gconst17;
																												gconst17=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																												dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																												if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																												{
																													continue;

																												} else
																												{
																													{
																														IKReal j14array[1], cj14array[1], sj14array[1];
																														bool j14valid[1]={false};
																														j14array[0]=IKatan2(((gconst17)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst17)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																														sj14array[0]=IKsin(j14array[0]);
																														cj14array[0]=IKcos(j14array[0]);
																														if( j14array[0] > IKPI )
																														{
																															j14array[0]-=IK2PI;
																														}
																														else if( j14array[0] < -IKPI )
																														{
																															j14array[0]+=IK2PI;
																														}
																														j14valid[0] = true;
																														for(int ij14 = 0; ij14 < 1; ++ij14)
																														{
																															if( !j14valid[ij14] )
																															{
																																continue;
																															}
																															j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																															{
																																vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																solution.basesol.resize(6);
																																solution.basesol[0].foffset = j13;
																																solution.basesol[1].foffset = j14;
																																solution.basesol[2].foffset = j15;
																																solution.basesol[3].foffset = j16;
																																solution.basesol[4].foffset = j17;
																																solution.basesol[5].foffset = j18;
																																solution.vfree.resize(0);
																															}
																														}
																													}

																												}

																											}
																										}
																									}

																								}

																							}

																						} else
																						{
																							{
																								IKReal j13array[1], cj13array[1], sj13array[1];
																								bool j13valid[1]={false};
																								IKReal x392=(sj18)*(sj18);
																								IKReal x393=(cj18)*(cj18);
																								IKReal x394=(r10)*(r10);
																								IKReal x395=((x392)*(x394));
																								IKReal x396=(r00)*(r00);
																								IKReal x397=((x392)*(x396));
																								IKReal x398=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
																								IKReal x399=(r01)*(r01);
																								IKReal x400=((x393)*(x399));
																								IKReal x401=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
																								IKReal x402=(r11)*(r11);
																								IKReal x403=((x393)*(x402));
																								IKReal x404=((x395)+(x397)+(x398)+(x401)+(x400)+(x403));
																								j13array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x404) != 0)?((IKReal)1/(x404)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((((IKabs(x404) != 0)?((IKReal)1/(x404)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
																								sj13array[0]=IKsin(j13array[0]);
																								cj13array[0]=IKcos(j13array[0]);
																								if( j13array[0] > IKPI )
																								{
																									j13array[0]-=IK2PI;
																								}
																								else if( j13array[0] < -IKPI )
																								{
																									j13array[0]+=IK2PI;
																								}
																								j13valid[0] = true;
																								for(int ij13 = 0; ij13 < 1; ++ij13)
																								{
																									if( !j13valid[ij13] )
																									{
																										continue;
																									}
																									j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																									{
																										IKReal dummyeval[1];
																										IKReal gconst17;
																										gconst17=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																										dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											continue;

																										} else
																										{
																											{
																												IKReal j14array[1], cj14array[1], sj14array[1];
																												bool j14valid[1]={false};
																												j14array[0]=IKatan2(((gconst17)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst17)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																												sj14array[0]=IKsin(j14array[0]);
																												cj14array[0]=IKcos(j14array[0]);
																												if( j14array[0] > IKPI )
																												{
																													j14array[0]-=IK2PI;
																												}
																												else if( j14array[0] < -IKPI )
																												{
																													j14array[0]+=IK2PI;
																												}
																												j14valid[0] = true;
																												for(int ij14 = 0; ij14 < 1; ++ij14)
																												{
																													if( !j14valid[ij14] )
																													{
																														continue;
																													}
																													j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j13;
																														solution.basesol[1].foffset = j14;
																														solution.basesol[2].foffset = j15;
																														solution.basesol[3].foffset = j16;
																														solution.basesol[4].foffset = j17;
																														solution.basesol[5].foffset = j18;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}
																								}
																							}

																						}

																					}

																				} else
																				{
																					{
																						IKReal j14array[1], cj14array[1], sj14array[1];
																						bool j14valid[1]={false};
																						j14array[0]=IKatan2(((gconst16)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst16)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																						sj14array[0]=IKsin(j14array[0]);
																						cj14array[0]=IKcos(j14array[0]);
																						if( j14array[0] > IKPI )
																						{
																							j14array[0]-=IK2PI;
																						}
																						else if( j14array[0] < -IKPI )
																						{
																							j14array[0]+=IK2PI;
																						}
																						j14valid[0] = true;
																						for(int ij14 = 0; ij14 < 1; ++ij14)
																						{
																							if( !j14valid[ij14] )
																							{
																								continue;
																							}
																							j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																							{
																								IKReal dummyeval[1];
																								IKReal gconst18;
																								IKReal x405=(cj18)*(cj18);
																								IKReal x406=(sj18)*(sj18);
																								gconst18=IKsign(((((cj17)*(r00)*(r01)*(x405)))+(((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x406)))+(((r00)*(r02)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x406)))+(((cj17)*(r10)*(r11)*(x405)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18)))));
																								IKReal x407=(cj18)*(cj18);
																								IKReal x408=(sj18)*(sj18);
																								dummyeval[0]=((((cj17)*(r00)*(r01)*(x407)))+(((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x408)))+(((r00)*(r02)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x408)))+(((cj17)*(r10)*(r11)*(x407)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18))));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									{
																										IKReal dummyeval[1];
																										IKReal x409=(sj18)*(sj18);
																										IKReal x410=(cj18)*(cj18);
																										dummyeval[0]=((((-2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((-1.00000000000000)*(x409)*((r10)*(r10))))+(((-2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((-1.00000000000000)*(x409)*((r00)*(r00))))+(((-1.00000000000000)*(x410)*((r01)*(r01))))+(((-1.00000000000000)*(x410)*((r11)*(r11)))));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											{
																												IKReal dummyeval[1];
																												IKReal x411=(sj18)*(sj18);
																												IKReal x412=(cj18)*(cj18);
																												dummyeval[0]=((((-1.00000000000000)*(cj17)*(r00)*(r11)*(x411)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x412)))+(((-1.00000000000000)*(r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r02)*(r11)*(sj17)))+(((cj17)*(r01)*(r10)*(x412)))+(((cj17)*(r01)*(r10)*(x411)))+(((cj18)*(r01)*(r12)*(sj17)))+(((r00)*(r12)*(sj17)*(sj18))));
																												if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																												{
																													continue;

																												} else
																												{
																													{
																														IKReal j13array[1], cj13array[1], sj13array[1];
																														bool j13valid[1]={false};
																														IKReal x413=(sj18)*(sj18);
																														IKReal x414=(cj18)*(cj18);
																														IKReal x415=((cj17)*(r00)*(r11)*(x413));
																														IKReal x416=((cj17)*(r00)*(r11)*(x414));
																														IKReal x417=((r02)*(r10)*(sj17)*(sj18));
																														IKReal x418=((cj18)*(r02)*(r11)*(sj17));
																														IKReal x419=((x416)+(x417)+(x415)+(x418));
																														IKReal x420=((cj17)*(r01)*(r10)*(x413));
																														IKReal x421=((cj18)*(r01)*(r12)*(sj17));
																														IKReal x422=((r00)*(r12)*(sj17)*(sj18));
																														IKReal x423=((cj17)*(r01)*(r10)*(x414));
																														IKReal x424=((x423)+(x422)+(x421)+(x420));
																														j13array[0]=IKatan2(((((IKabs(((x424)+(((-1.00000000000000)*(x419))))) != 0)?((IKReal)1/(((x424)+(((-1.00000000000000)*(x419)))))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((((-1.00000000000000)*(x424)))+(x419))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x424)))+(x419)))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
																														sj13array[0]=IKsin(j13array[0]);
																														cj13array[0]=IKcos(j13array[0]);
																														if( j13array[0] > IKPI )
																														{
																															j13array[0]-=IK2PI;
																														}
																														else if( j13array[0] < -IKPI )
																														{
																															j13array[0]+=IK2PI;
																														}
																														j13valid[0] = true;
																														for(int ij13 = 0; ij13 < 1; ++ij13)
																														{
																															if( !j13valid[ij13] )
																															{
																																continue;
																															}
																															j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																															{
																																vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																solution.basesol.resize(6);
																																solution.basesol[0].foffset = j13;
																																solution.basesol[1].foffset = j14;
																																solution.basesol[2].foffset = j15;
																																solution.basesol[3].foffset = j16;
																																solution.basesol[4].foffset = j17;
																																solution.basesol[5].foffset = j18;
																																solution.vfree.resize(0);
																															}
																														}
																													}

																												}

																											}

																										} else
																										{
																											{
																												IKReal j13array[1], cj13array[1], sj13array[1];
																												bool j13valid[1]={false};
																												IKReal x425=(sj18)*(sj18);
																												IKReal x426=(cj18)*(cj18);
																												IKReal x427=(r10)*(r10);
																												IKReal x428=((x425)*(x427));
																												IKReal x429=(r00)*(r00);
																												IKReal x430=((x425)*(x429));
																												IKReal x431=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
																												IKReal x432=(r01)*(r01);
																												IKReal x433=((x426)*(x432));
																												IKReal x434=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
																												IKReal x435=(r11)*(r11);
																												IKReal x436=((x426)*(x435));
																												IKReal x437=((x428)+(x430)+(x431)+(x433)+(x434)+(x436));
																												j13array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x437) != 0)?((IKReal)1/(x437)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((((IKabs(x437) != 0)?((IKReal)1/(x437)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
																												sj13array[0]=IKsin(j13array[0]);
																												cj13array[0]=IKcos(j13array[0]);
																												if( j13array[0] > IKPI )
																												{
																													j13array[0]-=IK2PI;
																												}
																												else if( j13array[0] < -IKPI )
																												{
																													j13array[0]+=IK2PI;
																												}
																												j13valid[0] = true;
																												for(int ij13 = 0; ij13 < 1; ++ij13)
																												{
																													if( !j13valid[ij13] )
																													{
																														continue;
																													}
																													j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j13;
																														solution.basesol[1].foffset = j14;
																														solution.basesol[2].foffset = j15;
																														solution.basesol[3].foffset = j16;
																														solution.basesol[4].foffset = j17;
																														solution.basesol[5].foffset = j18;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}

																								} else
																								{
																									{
																										IKReal j13array[1], cj13array[1], sj13array[1];
																										bool j13valid[1]={false};
																										j13array[0]=IKatan2(((gconst18)*(((((-1.00000000000000)*(cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj14)))+(((r02)*(sj17)))+(((-1.00000000000000)*(cj15)*(r10)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj14)*(r10)*(sj15)*(sj18)))+(((cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(cj14)*(cj18)*(r11)*(sj15)))))), ((gconst18)*(((((-1.00000000000000)*(cj14)*(r00)*(sj15)*(sj18)))+(((-1.00000000000000)*(r12)*(sj17)))+(((cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj15)*(r00)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r01)*(sj14)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj14)*(cj18)*(r01)*(sj15)))))));
																										sj13array[0]=IKsin(j13array[0]);
																										cj13array[0]=IKcos(j13array[0]);
																										if( j13array[0] > IKPI )
																										{
																											j13array[0]-=IK2PI;
																										}
																										else if( j13array[0] < -IKPI )
																										{
																											j13array[0]+=IK2PI;
																										}
																										j13valid[0] = true;
																										for(int ij13 = 0; ij13 < 1; ++ij13)
																										{
																											if( !j13valid[ij13] )
																											{
																												continue;
																											}
																											j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																											{
																												vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																												solution.basesol.resize(6);
																												solution.basesol[0].foffset = j13;
																												solution.basesol[1].foffset = j14;
																												solution.basesol[2].foffset = j15;
																												solution.basesol[3].foffset = j16;
																												solution.basesol[4].foffset = j17;
																												solution.basesol[5].foffset = j18;
																												solution.vfree.resize(0);
																											}
																										}
																									}

																								}

																							}
																						}
																					}

																				}

																			}

																		} else
																		{
																			if( 1 )
																			{
																				continue;

																			} else
																			{
																			}
																		}
																	}
																}

															} else
															{
																{
																	IKReal j13array[1], cj13array[1], sj13array[1];
																	bool j13valid[1]={false};
																	IKReal x438=(sj18)*(sj18);
																	IKReal x439=(cj18)*(cj18);
																	IKReal x440=((cj17)*(r01)*(r10)*(x438));
																	IKReal x441=((cj18)*(r01)*(r12)*(sj17));
																	IKReal x442=((r00)*(r12)*(sj17)*(sj18));
																	IKReal x443=((cj17)*(r01)*(r10)*(x439));
																	IKReal x444=((x441)+(x440)+(x443)+(x442));
																	IKReal x445=((cj17)*(r00)*(r11)*(x438));
																	IKReal x446=((cj17)*(r00)*(r11)*(x439));
																	IKReal x447=((r02)*(r10)*(sj17)*(sj18));
																	IKReal x448=((cj18)*(r02)*(r11)*(sj17));
																	IKReal x449=((x448)+(x445)+(x447)+(x446));
																	j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x444)))+(x449))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x444)))+(x449)))):(IKReal)1.0e30))*(((((cj16)*(r12)*(sj17)))+(((cj16)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj16)*(cj17)*(r11)*(sj18)))))), ((((IKabs(((((-1.00000000000000)*(x449)))+(x444))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x449)))+(x444)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj16)*(r02)*(sj17)))+(((cj16)*(cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj16)*(cj17)*(cj18)*(r00)))))));
																	sj13array[0]=IKsin(j13array[0]);
																	cj13array[0]=IKcos(j13array[0]);
																	if( j13array[0] > IKPI )
																	{
																		j13array[0]-=IK2PI;
																	}
																	else if( j13array[0] < -IKPI )
																	{
																		j13array[0]+=IK2PI;
																	}
																	j13valid[0] = true;
																	for(int ij13 = 0; ij13 < 1; ++ij13)
																	{
																		if( !j13valid[ij13] )
																		{
																			continue;
																		}
																		j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																		{
																			IKReal dummyeval[1];
																			IKReal gconst10;
																			gconst10=IKsign(((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15))))));
																			dummyeval[0]=((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15)))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				{
																					IKReal evalcond[9];
																					evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
																					evalcond[1]=((((r20)*(sj18)))+(((cj18)*(r21))));
																					evalcond[2]=((-0.0850000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																					evalcond[3]=((1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																					evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((-0.0200000000000000)*(sj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																					evalcond[5]=((0.0200000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((-0.0200000000000000)*(cj15)))+(((-0.250000000000000)*(sj15)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																					evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																					evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																					evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																					if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							IKReal gconst11;
																							gconst11=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																							dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												continue;

																											} else
																											{
																												{
																													IKReal j14array[1], cj14array[1], sj14array[1];
																													bool j14valid[1]={false};
																													IKReal x450=(cj15)*(cj15);
																													IKReal x451=(sj15)*(sj15);
																													IKReal x452=((x450)+(x451));
																													j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x452) != 0)?((IKReal)1/(x452)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x452) != 0)?((IKReal)1/(x452)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																													sj14array[0]=IKsin(j14array[0]);
																													cj14array[0]=IKcos(j14array[0]);
																													if( j14array[0] > IKPI )
																													{
																														j14array[0]-=IK2PI;
																													}
																													else if( j14array[0] < -IKPI )
																													{
																														j14array[0]+=IK2PI;
																													}
																													j14valid[0] = true;
																													for(int ij14 = 0; ij14 < 1; ++ij14)
																													{
																														if( !j14valid[ij14] )
																														{
																															continue;
																														}
																														j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j13;
																															solution.basesol[1].foffset = j14;
																															solution.basesol[2].foffset = j15;
																															solution.basesol[3].foffset = j16;
																															solution.basesol[4].foffset = j17;
																															solution.basesol[5].foffset = j18;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j14array[1], cj14array[1], sj14array[1];
																											bool j14valid[1]={false};
																											IKReal x453=(cj15)*(cj15);
																											IKReal x454=(sj15)*(sj15);
																											IKReal x455=((x454)+(x453));
																											j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x455) != 0)?((IKReal)1/(x455)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x455) != 0)?((IKReal)1/(x455)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																											sj14array[0]=IKsin(j14array[0]);
																											cj14array[0]=IKcos(j14array[0]);
																											if( j14array[0] > IKPI )
																											{
																												j14array[0]-=IK2PI;
																											}
																											else if( j14array[0] < -IKPI )
																											{
																												j14array[0]+=IK2PI;
																											}
																											j14valid[0] = true;
																											for(int ij14 = 0; ij14 < 1; ++ij14)
																											{
																												if( !j14valid[ij14] )
																												{
																													continue;
																												}
																												j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j13;
																													solution.basesol[1].foffset = j14;
																													solution.basesol[2].foffset = j15;
																													solution.basesol[3].foffset = j16;
																													solution.basesol[4].foffset = j17;
																													solution.basesol[5].foffset = j18;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j14array[1], cj14array[1], sj14array[1];
																									bool j14valid[1]={false};
																									j14array[0]=IKatan2(((gconst11)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst11)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																									sj14array[0]=IKsin(j14array[0]);
																									cj14array[0]=IKcos(j14array[0]);
																									if( j14array[0] > IKPI )
																									{
																										j14array[0]-=IK2PI;
																									}
																									else if( j14array[0] < -IKPI )
																									{
																										j14array[0]+=IK2PI;
																									}
																									j14valid[0] = true;
																									for(int ij14 = 0; ij14 < 1; ++ij14)
																									{
																										if( !j14valid[ij14] )
																										{
																											continue;
																										}
																										j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j13;
																											solution.basesol[1].foffset = j14;
																											solution.basesol[2].foffset = j15;
																											solution.basesol[3].foffset = j16;
																											solution.basesol[4].foffset = j17;
																											solution.basesol[5].foffset = j18;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
																						evalcond[1]=((((r20)*(sj18)))+(((cj18)*(r21))));
																						evalcond[2]=((0.0850000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																						evalcond[3]=((-1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																						evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((-0.0200000000000000)*(sj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																						evalcond[5]=((-0.0200000000000000)+(((npy)*(sj17)*(sj18)))+(((0.250000000000000)*(sj15)))+(((0.0200000000000000)*(cj15)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																						evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																						evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																						evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																						if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																						{
																							{
																								IKReal dummyeval[1];
																								IKReal gconst12;
																								gconst12=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																								dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									continue;

																								} else
																								{
																									{
																										IKReal j14array[1], cj14array[1], sj14array[1];
																										bool j14valid[1]={false};
																										j14array[0]=IKatan2(((gconst12)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst12)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																										sj14array[0]=IKsin(j14array[0]);
																										cj14array[0]=IKcos(j14array[0]);
																										if( j14array[0] > IKPI )
																										{
																											j14array[0]-=IK2PI;
																										}
																										else if( j14array[0] < -IKPI )
																										{
																											j14array[0]+=IK2PI;
																										}
																										j14valid[0] = true;
																										for(int ij14 = 0; ij14 < 1; ++ij14)
																										{
																											if( !j14valid[ij14] )
																											{
																												continue;
																											}
																											j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																											{
																												vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																												solution.basesol.resize(6);
																												solution.basesol[0].foffset = j13;
																												solution.basesol[1].foffset = j14;
																												solution.basesol[2].foffset = j15;
																												solution.basesol[3].foffset = j16;
																												solution.basesol[4].foffset = j17;
																												solution.basesol[5].foffset = j18;
																												solution.vfree.resize(0);
																											}
																										}
																									}

																								}

																							}

																						} else
																						{
																							if( 1 )
																							{
																								continue;

																							} else
																							{
																							}
																						}
																					}
																				}

																			} else
																			{
																				{
																					IKReal j14array[1], cj14array[1], sj14array[1];
																					bool j14valid[1]={false};
																					j14array[0]=IKatan2(((gconst10)*(((((r22)*(sj15)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj16)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((cj17)*(cj18)*(r20)*(sj15)*(sj16)))))), ((gconst10)*(((((cj15)*(cj17)*(r21)*(sj16)*(sj18)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)*(sj16)))))));
																					sj14array[0]=IKsin(j14array[0]);
																					cj14array[0]=IKcos(j14array[0]);
																					if( j14array[0] > IKPI )
																					{
																						j14array[0]-=IK2PI;
																					}
																					else if( j14array[0] < -IKPI )
																					{
																						j14array[0]+=IK2PI;
																					}
																					j14valid[0] = true;
																					for(int ij14 = 0; ij14 < 1; ++ij14)
																					{
																						if( !j14valid[ij14] )
																						{
																							continue;
																						}
																						j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																						{
																							vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																							solution.basesol.resize(6);
																							solution.basesol[0].foffset = j13;
																							solution.basesol[1].foffset = j14;
																							solution.basesol[2].foffset = j15;
																							solution.basesol[3].foffset = j16;
																							solution.basesol[4].foffset = j17;
																							solution.basesol[5].foffset = j18;
																							solution.vfree.resize(0);
																						}
																					}
																				}

																			}

																		}
																	}
																}

															}

														}

													} else
													{
														{
															IKReal j13array[1], cj13array[1], sj13array[1];
															bool j13valid[1]={false};
															j13array[0]=IKatan2(((gconst8)*(((((cj16)*(r11)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj16)))+(((cj16)*(cj17)*(r12)))+(((-1.00000000000000)*(cj16)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(r10)*(sj16)*(sj18)))))), ((gconst8)*(((((-1.00000000000000)*(cj16)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj18)*(r01)*(sj16)))+(((-1.00000000000000)*(r00)*(sj16)*(sj18)))+(((cj16)*(r01)*(sj17)*(sj18)))+(((cj16)*(cj17)*(r02)))))));
															sj13array[0]=IKsin(j13array[0]);
															cj13array[0]=IKcos(j13array[0]);
															if( j13array[0] > IKPI )
															{
																j13array[0]-=IK2PI;
															}
															else if( j13array[0] < -IKPI )
															{
																j13array[0]+=IK2PI;
															}
															j13valid[0] = true;
															for(int ij13 = 0; ij13 < 1; ++ij13)
															{
																if( !j13valid[ij13] )
																{
																	continue;
																}
																j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																{
																	IKReal dummyeval[1];
																	IKReal gconst10;
																	gconst10=IKsign(((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15))))));
																	dummyeval[0]=((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15)))));
																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																	{
																		{
																			IKReal evalcond[9];
																			evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
																			evalcond[1]=((((r20)*(sj18)))+(((cj18)*(r21))));
																			evalcond[2]=((-0.0850000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																			evalcond[3]=((1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																			evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((-0.0200000000000000)*(sj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																			evalcond[5]=((0.0200000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((-0.0200000000000000)*(cj15)))+(((-0.250000000000000)*(sj15)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																			evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																			evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																			evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																			if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																			{
																				{
																					IKReal dummyeval[1];
																					IKReal gconst11;
																					gconst11=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																					dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										continue;

																									} else
																									{
																										{
																											IKReal j14array[1], cj14array[1], sj14array[1];
																											bool j14valid[1]={false};
																											IKReal x456=(cj15)*(cj15);
																											IKReal x457=(sj15)*(sj15);
																											IKReal x458=((x456)+(x457));
																											j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x458) != 0)?((IKReal)1/(x458)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x458) != 0)?((IKReal)1/(x458)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																											sj14array[0]=IKsin(j14array[0]);
																											cj14array[0]=IKcos(j14array[0]);
																											if( j14array[0] > IKPI )
																											{
																												j14array[0]-=IK2PI;
																											}
																											else if( j14array[0] < -IKPI )
																											{
																												j14array[0]+=IK2PI;
																											}
																											j14valid[0] = true;
																											for(int ij14 = 0; ij14 < 1; ++ij14)
																											{
																												if( !j14valid[ij14] )
																												{
																													continue;
																												}
																												j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j13;
																													solution.basesol[1].foffset = j14;
																													solution.basesol[2].foffset = j15;
																													solution.basesol[3].foffset = j16;
																													solution.basesol[4].foffset = j17;
																													solution.basesol[5].foffset = j18;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j14array[1], cj14array[1], sj14array[1];
																									bool j14valid[1]={false};
																									IKReal x459=(cj15)*(cj15);
																									IKReal x460=(sj15)*(sj15);
																									IKReal x461=((x459)+(x460));
																									j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x461) != 0)?((IKReal)1/(x461)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x461) != 0)?((IKReal)1/(x461)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																									sj14array[0]=IKsin(j14array[0]);
																									cj14array[0]=IKcos(j14array[0]);
																									if( j14array[0] > IKPI )
																									{
																										j14array[0]-=IK2PI;
																									}
																									else if( j14array[0] < -IKPI )
																									{
																										j14array[0]+=IK2PI;
																									}
																									j14valid[0] = true;
																									for(int ij14 = 0; ij14 < 1; ++ij14)
																									{
																										if( !j14valid[ij14] )
																										{
																											continue;
																										}
																										j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j13;
																											solution.basesol[1].foffset = j14;
																											solution.basesol[2].foffset = j15;
																											solution.basesol[3].foffset = j16;
																											solution.basesol[4].foffset = j17;
																											solution.basesol[5].foffset = j18;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j14array[1], cj14array[1], sj14array[1];
																							bool j14valid[1]={false};
																							j14array[0]=IKatan2(((gconst11)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst11)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																							sj14array[0]=IKsin(j14array[0]);
																							cj14array[0]=IKcos(j14array[0]);
																							if( j14array[0] > IKPI )
																							{
																								j14array[0]-=IK2PI;
																							}
																							else if( j14array[0] < -IKPI )
																							{
																								j14array[0]+=IK2PI;
																							}
																							j14valid[0] = true;
																							for(int ij14 = 0; ij14 < 1; ++ij14)
																							{
																								if( !j14valid[ij14] )
																								{
																									continue;
																								}
																								j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j13;
																									solution.basesol[1].foffset = j14;
																									solution.basesol[2].foffset = j15;
																									solution.basesol[3].foffset = j16;
																									solution.basesol[4].foffset = j17;
																									solution.basesol[5].foffset = j18;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}

																			} else
																			{
																				evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
																				evalcond[1]=((((r20)*(sj18)))+(((cj18)*(r21))));
																				evalcond[2]=((0.0850000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																				evalcond[3]=((-1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																				evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((-0.0200000000000000)*(sj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																				evalcond[5]=((-0.0200000000000000)+(((npy)*(sj17)*(sj18)))+(((0.250000000000000)*(sj15)))+(((0.0200000000000000)*(cj15)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																				evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																				evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																				evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																				if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																				{
																					{
																						IKReal dummyeval[1];
																						IKReal gconst12;
																						gconst12=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																						dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							continue;

																						} else
																						{
																							{
																								IKReal j14array[1], cj14array[1], sj14array[1];
																								bool j14valid[1]={false};
																								j14array[0]=IKatan2(((gconst12)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst12)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																								sj14array[0]=IKsin(j14array[0]);
																								cj14array[0]=IKcos(j14array[0]);
																								if( j14array[0] > IKPI )
																								{
																									j14array[0]-=IK2PI;
																								}
																								else if( j14array[0] < -IKPI )
																								{
																									j14array[0]+=IK2PI;
																								}
																								j14valid[0] = true;
																								for(int ij14 = 0; ij14 < 1; ++ij14)
																								{
																									if( !j14valid[ij14] )
																									{
																										continue;
																									}
																									j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																									{
																										vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																										solution.basesol.resize(6);
																										solution.basesol[0].foffset = j13;
																										solution.basesol[1].foffset = j14;
																										solution.basesol[2].foffset = j15;
																										solution.basesol[3].foffset = j16;
																										solution.basesol[4].foffset = j17;
																										solution.basesol[5].foffset = j18;
																										solution.vfree.resize(0);
																									}
																								}
																							}

																						}

																					}

																				} else
																				{
																					if( 1 )
																					{
																						continue;

																					} else
																					{
																					}
																				}
																			}
																		}

																	} else
																	{
																		{
																			IKReal j14array[1], cj14array[1], sj14array[1];
																			bool j14valid[1]={false};
																			j14array[0]=IKatan2(((gconst10)*(((((r22)*(sj15)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj16)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((cj17)*(cj18)*(r20)*(sj15)*(sj16)))))), ((gconst10)*(((((cj15)*(cj17)*(r21)*(sj16)*(sj18)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)*(sj16)))))));
																			sj14array[0]=IKsin(j14array[0]);
																			cj14array[0]=IKcos(j14array[0]);
																			if( j14array[0] > IKPI )
																			{
																				j14array[0]-=IK2PI;
																			}
																			else if( j14array[0] < -IKPI )
																			{
																				j14array[0]+=IK2PI;
																			}
																			j14valid[0] = true;
																			for(int ij14 = 0; ij14 < 1; ++ij14)
																			{
																				if( !j14valid[ij14] )
																				{
																					continue;
																				}
																				j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																				{
																					vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																					solution.basesol.resize(6);
																					solution.basesol[0].foffset = j13;
																					solution.basesol[1].foffset = j14;
																					solution.basesol[2].foffset = j15;
																					solution.basesol[3].foffset = j16;
																					solution.basesol[4].foffset = j17;
																					solution.basesol[5].foffset = j18;
																					solution.vfree.resize(0);
																				}
																			}
																		}

																	}

																}
															}
														}

													}

												}

											} else
											{
												{
													IKReal j14array[1], cj14array[1], sj14array[1];
													bool j14valid[1]={false};
													j14array[0]=IKatan2(((gconst9)*(((((r22)*(sj15)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj16)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((cj17)*(cj18)*(r20)*(sj15)*(sj16)))))), ((gconst9)*(((((cj15)*(cj17)*(r21)*(sj16)*(sj18)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)*(sj16)))))));
													sj14array[0]=IKsin(j14array[0]);
													cj14array[0]=IKcos(j14array[0]);
													if( j14array[0] > IKPI )
													{
														j14array[0]-=IK2PI;
													}
													else if( j14array[0] < -IKPI )
													{
														j14array[0]+=IK2PI;
													}
													j14valid[0] = true;
													for(int ij14 = 0; ij14 < 1; ++ij14)
													{
														if( !j14valid[ij14] )
														{
															continue;
														}
														j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

														{
															IKReal dummyeval[1];
															IKReal gconst13;
															IKReal x462=(cj18)*(cj18);
															IKReal x463=(sj18)*(sj18);
															gconst13=IKsign(((((-1.00000000000000)*(r00)*(r11)*(sj17)*(x463)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x462)))+(((r01)*(r10)*(sj17)*(x463)))+(((r01)*(r10)*(sj17)*(x462)))+(((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11)))));
															IKReal x464=(cj18)*(cj18);
															IKReal x465=(sj18)*(sj18);
															dummyeval[0]=((((-1.00000000000000)*(r00)*(r11)*(sj17)*(x464)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x465)))+(((r01)*(r10)*(sj17)*(x464)))+(((r01)*(r10)*(sj17)*(x465)))+(((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11))));
															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
															{
																{
																	IKReal dummyeval[1];
																	IKReal x466=(sj18)*(sj18);
																	IKReal x467=(cj18)*(cj18);
																	dummyeval[0]=((((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x466)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x467)))+(((cj17)*(r00)*(r11)*(x466)))+(((cj17)*(r00)*(r11)*(x467)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18))));
																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																	{
																		continue;

																	} else
																	{
																		{
																			IKReal j13array[1], cj13array[1], sj13array[1];
																			bool j13valid[1]={false};
																			IKReal x468=(sj18)*(sj18);
																			IKReal x469=(cj18)*(cj18);
																			IKReal x470=((cj17)*(r01)*(r10)*(x468));
																			IKReal x471=((cj18)*(r01)*(r12)*(sj17));
																			IKReal x472=((r00)*(r12)*(sj17)*(sj18));
																			IKReal x473=((cj17)*(r01)*(r10)*(x469));
																			IKReal x474=((x470)+(x471)+(x472)+(x473));
																			IKReal x475=((cj17)*(r00)*(r11)*(x468));
																			IKReal x476=((cj17)*(r00)*(r11)*(x469));
																			IKReal x477=((r02)*(r10)*(sj17)*(sj18));
																			IKReal x478=((cj18)*(r02)*(r11)*(sj17));
																			IKReal x479=((x475)+(x476)+(x477)+(x478));
																			j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x474)))+(x479))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x474)))+(x479)))):(IKReal)1.0e30))*(((((cj16)*(r12)*(sj17)))+(((cj16)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj16)*(cj17)*(r11)*(sj18)))))), ((((IKabs(((((-1.00000000000000)*(x479)))+(x474))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x479)))+(x474)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj16)*(r02)*(sj17)))+(((cj16)*(cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj16)*(cj17)*(cj18)*(r00)))))));
																			sj13array[0]=IKsin(j13array[0]);
																			cj13array[0]=IKcos(j13array[0]);
																			if( j13array[0] > IKPI )
																			{
																				j13array[0]-=IK2PI;
																			}
																			else if( j13array[0] < -IKPI )
																			{
																				j13array[0]+=IK2PI;
																			}
																			j13valid[0] = true;
																			for(int ij13 = 0; ij13 < 1; ++ij13)
																			{
																				if( !j13valid[ij13] )
																				{
																					continue;
																				}
																				j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																				{
																					vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																					solution.basesol.resize(6);
																					solution.basesol[0].foffset = j13;
																					solution.basesol[1].foffset = j14;
																					solution.basesol[2].foffset = j15;
																					solution.basesol[3].foffset = j16;
																					solution.basesol[4].foffset = j17;
																					solution.basesol[5].foffset = j18;
																					solution.vfree.resize(0);
																				}
																			}
																		}

																	}

																}

															} else
															{
																{
																	IKReal j13array[1], cj13array[1], sj13array[1];
																	bool j13valid[1]={false};
																	j13array[0]=IKatan2(((gconst13)*(((((cj16)*(r11)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj16)))+(((cj16)*(cj17)*(r12)))+(((-1.00000000000000)*(cj16)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(r10)*(sj16)*(sj18)))))), ((gconst13)*(((((-1.00000000000000)*(cj16)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj18)*(r01)*(sj16)))+(((-1.00000000000000)*(r00)*(sj16)*(sj18)))+(((cj16)*(r01)*(sj17)*(sj18)))+(((cj16)*(cj17)*(r02)))))));
																	sj13array[0]=IKsin(j13array[0]);
																	cj13array[0]=IKcos(j13array[0]);
																	if( j13array[0] > IKPI )
																	{
																		j13array[0]-=IK2PI;
																	}
																	else if( j13array[0] < -IKPI )
																	{
																		j13array[0]+=IK2PI;
																	}
																	j13valid[0] = true;
																	for(int ij13 = 0; ij13 < 1; ++ij13)
																	{
																		if( !j13valid[ij13] )
																		{
																			continue;
																		}
																		j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																		{
																			vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																			solution.basesol.resize(6);
																			solution.basesol[0].foffset = j13;
																			solution.basesol[1].foffset = j14;
																			solution.basesol[2].foffset = j15;
																			solution.basesol[3].foffset = j16;
																			solution.basesol[4].foffset = j17;
																			solution.basesol[5].foffset = j18;
																			solution.vfree.resize(0);
																		}
																	}
																}

															}

														}
													}
												}

											}

										}
									}
								}

							}

						}
					}
				}
				return vsolutions.size()>0;
			}

			static inline bool checkconsistency8(const IKReal* Breal)
			{
				IKReal norm = 0.1;
				for(int i = 0; i < 7; ++i)
				{
					norm += IKabs(Breal[i]);
				}
								 // have to increase the threshold since many computations are involved
				IKReal tol = 1e-5*norm;
				return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
			}
			/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
			///
			/// matcoeffs is of length 54*3, for 3 matrices
			static inline void solvedialyticpoly8qep(const IKReal* matcoeffs, IKReal* rawroots, int& numroots)
			{
				const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
				IKReal IKFAST_ALIGNED16(M[16*16]) = {0};
				IKReal IKFAST_ALIGNED16(A[8*8]);
				IKReal IKFAST_ALIGNED16(work[16*16*15]);
				int ipiv[8];
				int info, coeffindex;
				const int worksize=16*16*15;
				const int matrixdim = 8;
				const int matrixdim2 = 16;
				numroots = 0;
				// first setup M = [0 I; -C -B] and A
				coeffindex = 0;
				for(int j = 0; j < 4; ++j)
				{
					for(int k = 0; k < 6; ++k)
					{
						M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
					}
				}
				for(int j = 0; j < 4; ++j)
				{
					for(int k = 0; k < 6; ++k)
					{
						M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
					}
				}
				for(int j = 0; j < 4; ++j)
				{
					for(int k = 0; k < 6; ++k)
					{
						A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
					}
					for(int k = 0; k < 2; ++k)
					{
						A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
					}
				}
				const IKReal lfpossibilities[4][4] =
				{
					{
						1,-1,1,1
					}
					,
					{
						1,0,-2,1
					}
					,
					{
						1,1,2,0
					}
					,
					{
						1,-1,4,1
					}
				};
				int lfindex = -1;
				bool bsingular = true;
				do
				{
					dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
					if( info == 0 )
					{
						bsingular = false;
						for(int j = 0; j < matrixdim; ++j)
						{
							if( IKabs(A[j*matrixdim+j]) < 100*tol )
							{
								bsingular = true;
								break;
							}
						}
						if( !bsingular )
						{
							break;
						}
					}
					if( lfindex == 3 )
					{
						break;
					}
					// transform by the linear functional
					lfindex++;
					const IKReal* lf = lfpossibilities[lfindex];
					// have to reinitialize A
					coeffindex = 0;
					for(int j = 0; j < 4; ++j)
					{
						for(int k = 0; k < 6; ++k)
						{
							IKReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
							A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
							M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
							M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
							coeffindex++;
						}
						for(int k = 0; k < 2; ++k)
						{
							A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
						}
					}
				} while(lfindex<4);

				if( bsingular )
				{
					return;
				}
				dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
				if( info != 0 )
				{
					return;
				}

				// set identity in upper corner
				for(int j = 0; j < matrixdim; ++j)
				{
					M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
				}
				IKReal IKFAST_ALIGNED16(wr[16]);
				IKReal IKFAST_ALIGNED16(wi[16]);
				IKReal IKFAST_ALIGNED16(vr[16*16]);
				int one=1;
				dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
				if( info != 0 )
				{
					return;
				}
				IKReal Breal[matrixdim-1];
				for(int i = 0; i < matrixdim2; ++i)
				{
					if( IKabs(wi[i]) < tol*100 )
					{
						IKReal* ev = vr+matrixdim2*i;
						if( IKabs(wr[i]) > 1 )
						{
							ev += matrixdim;
						}
						// consistency has to be checked!!
						if( IKabs(ev[0]) < tol )
						{
							continue;
						}
						IKReal iconst = 1/ev[0];
						for(int j = 1; j < matrixdim; ++j)
						{
							Breal[j-1] = ev[j]*iconst;
						}
						if( checkconsistency8(Breal) )
						{
							if( lfindex >= 0 )
							{
								const IKReal* lf = lfpossibilities[lfindex];
								rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
							}
							else
							{
								rawroots[numroots++] = wr[i];
							}
							bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
							bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
							if( bsmall0 && bsmall1 )
							{
								rawroots[numroots++] = ev[2]/ev[0];
								rawroots[numroots++] = ev[1]/ev[0];
							}
							else if( bsmall0 && !bsmall1 )
							{
								rawroots[numroots++] = ev[3]/ev[1];
								rawroots[numroots++] = ev[1]/ev[0];
							}
							else if( !bsmall0 && bsmall1 )
							{
								rawroots[numroots++] = ev[6]/ev[4];
								rawroots[numroots++] = ev[7]/ev[6];
							}
							else if( !bsmall0 && !bsmall1 )
							{
								rawroots[numroots++] = ev[7]/ev[5];
								rawroots[numroots++] = ev[7]/ev[6];
							}
						}
					}
				}
			}
	};

	/// solves the inverse kinematics equations.
	/// \param pfree is an array specifying the free joints of the chain.
	IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions)
	{
		IKSolver solver;
		return solver.ik(eetrans,eerot,pfree,vsolutions);
	}

	IKFAST_API const char* getKinematicsHash() { return "ef0600a18b32fdec44028f741f573c62"; }

	#ifdef IKFAST_NAMESPACE
}								 // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
	if( argc != 12+getNumFreeParameters()+1 )
	{
		printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
			"Returns the ik solutions given the transformation of the end effector specified by\n"
			"a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
			"There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
		return 1;
	}

	std::vector<IKSolution> vsolutions;
	std::vector<IKReal> vfree(getNumFreeParameters());
	IKReal eerot[9],eetrans[3];
	eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
	eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
	eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
	for(std::size_t i = 0; i < vfree.size(); ++i)
		vfree[i] = atof(argv[13+i]);
	bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

	if( !bSuccess )
	{
		fprintf(stderr,"Failed to get ik solution\n");
		return -1;
	}

	printf("Found %d ik solutions:\n", (int)vsolutions.size());
	std::vector<IKReal> sol(getNumJoints());
	for(std::size_t i = 0; i < vsolutions.size(); ++i)
	{
		printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
		std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
		vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
		for( std::size_t j = 0; j < sol.size(); ++j)
			printf("%.15f, ", sol[j]);
		printf("\n");
	}
	return 0;
}
#endif
