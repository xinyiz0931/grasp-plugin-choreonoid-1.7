/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 46 generated on 2011-09-17 03:36:36.605946
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IKReal)6.28318530717959)
#define IKPI  ((IKReal)3.14159265358979)
#define IKPI_2  ((IKReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

#ifdef IKFAST_REAL
typedef IKFAST_REAL IKReal;
#else
typedef double IKReal;
#endif

class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(std::size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IKReal)0.000001)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return 1.0f;
    }
    else if( f < 0 ) {
        return -1.0f;
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[3]);
x3=IKcos(j[3]);
x4=IKcos(j[1]);
x5=IKcos(j[2]);
x6=((x0)*(x4)*(x5));
x7=IKsin(j[1]);
x8=IKsin(j[2]);
x9=((x0)*(x7)*(x8));
x10=IKsin(j[5]);
x11=IKsin(j[4]);
x12=((x1)*(x2));
x13=((x6)+(((-1.00000000000000)*(x9))));
x14=((x13)*(x3));
x15=((((-1.00000000000000)*(x14)))+(x12));
x16=((x11)*(x15));
x17=IKcos(j[4]);
x18=((x0)*(x4)*(x8));
x19=((x0)*(x5)*(x7));
x20=((x19)+(x18));
x21=((-1.00000000000000)*(x20));
x22=((x17)*(x21));
x23=((x16)+(x22));
x24=((-1.00000000000000)*(x23));
x25=IKcos(j[5]);
x26=((x9)+(((-1.00000000000000)*(x6))));
x27=((x2)*(x26));
x28=((x1)*(x3));
x29=((0.0900000000000000)*(x19));
x30=((0.0900000000000000)*(x18));
x31=((x30)+(x29));
x32=((0.0900000000000000)*(x12));
x33=((0.0900000000000000)*(x14));
x34=((((-1.00000000000000)*(x33)))+(x32));
x35=((x1)*(x4)*(x5));
x36=((x1)*(x7)*(x8));
x37=((x4)*(x8));
x38=((x5)*(x7));
x39=((x38)+(x37));
x40=((((-1.00000000000000)*(x35)))+(x36));
x41=((x2)*(x40));
x42=((x0)*(x3));
x43=((x42)+(x41));
x44=((x0)*(x2));
x45=((((-1.00000000000000)*(x36)))+(x35));
x46=((x3)*(x45));
x47=((x46)+(x44));
x48=((-1.00000000000000)*(x47));
x49=((x11)*(x48));
x50=((x1)*(x37));
x51=((x1)*(x38));
x52=((x51)+(x50));
x53=((-1.00000000000000)*(x52));
x54=((x17)*(x53));
x55=((x49)+(x54));
x56=((-1.00000000000000)*(x55));
x57=((x7)*(x8));
x58=((x4)*(x5));
x59=((x57)+(((-1.00000000000000)*(x58))));
x60=((x17)*(x59));
x61=((x11)*(x3)*(x39));
x62=((x60)+(x61));
x63=((-1.00000000000000)*(x62));
x64=((0.0900000000000000)*(x44));
x65=((0.0900000000000000)*(x46));
x66=((x64)+(x65));
x67=((-1.00000000000000)*(x66));
x68=((0.0900000000000000)*(x50));
x69=((0.0900000000000000)*(x51));
x70=((x68)+(x69));
x71=((0.0900000000000000)*(x57));
x72=((0.0900000000000000)*(x58));
x73=((0.0900000000000000)*(x38));
x74=((0.0900000000000000)*(x37));
x75=((x74)+(x73));
x76=((-1.00000000000000)*(x43));
x77=((-1.00000000000000)*(x39));
x78=((x58)+(((-1.00000000000000)*(x57))));
x79=((((-1.00000000000000)*(x71)))+(x72));
x80=((-1.00000000000000)*(x70));
x81=((((-1.00000000000000)*(x72)))+(x71));
eerot[0]=((((x10)*(((((-1.00000000000000)*(x27)))+(x28)))))+(((x24)*(x25))));
eerot[1]=((((x25)*(((((-1.00000000000000)*(x28)))+(x27)))))+(((x10)*(x24))));
eerot[2]=((((x11)*(x20)))+(((x15)*(x17))));
eetrans[0]=((((-0.250000000000000)*(x0)*(x7)))+(((0.0950000000000000)*(x1)))+(((-0.0300000000000000)*(x6)))+(((0.0300000000000000)*(x9)))+(((x17)*(x34)))+(((x11)*(x34)))+(((x11)*(x31)))+(((-0.235000000000000)*(x19)))+(((-0.235000000000000)*(x18)))+(((-1.00000000000000)*(x17)*(x31))));
eerot[3]=((((0.965925532213041)*(x25)*(x56)))+(((-0.258820142606703)*(x10)*(x2)*(x77)))+(((0.965925532213041)*(x10)*(x76)))+(((-0.258820142606703)*(x25)*(x63))));
eerot[4]=((((0.965925532213041)*(x10)*(x56)))+(((-0.258820142606703)*(x2)*(x25)*(x39)))+(((0.965925532213041)*(x25)*(x43)))+(((-0.258820142606703)*(x10)*(x63))));
eerot[5]=((((0.965925532213041)*(x17)*(x48)))+(((-0.258820142606703)*(x17)*(x3)*(x39)))+(((-0.258820142606703)*(x11)*(x78)))+(((0.965925532213041)*(x11)*(x52))));
eetrans[1]=((-0.145000000000000)+(((-0.258820142606703)*(x17)*(x3)*(x75)))+(((0.0647050356516757)*(x4)))+(((-0.226992500070065)*(x50)))+(((-0.226992500070065)*(x51)))+(((-0.258820142606703)*(x17)*(x81)))+(((-0.0917629255602389)*(x0)))+(((0.0608227335125751)*(x58)))+(((0.965925532213041)*(x17)*(x67)))+(((0.965925532213041)*(x11)*(x70)))+(((-0.0608227335125751)*(x57)))+(((0.965925532213041)*(x17)*(x80)))+(((-0.258820142606703)*(x11)*(x79)))+(((-0.258820142606703)*(x11)*(x3)*(x75)))+(((0.0289777659663912)*(x36)))+(((-0.00776460427820108)*(x37)))+(((-0.00776460427820108)*(x38)))+(((-0.241481383053260)*(x1)*(x7)))+(((0.965925532213041)*(x11)*(x67)))+(((-0.0289777659663912)*(x35))));
eerot[6]=((((0.258820142606703)*(x10)*(x76)))+(((0.965925532213041)*(x10)*(x2)*(x77)))+(((0.258820142606703)*(x25)*(x56)))+(((0.965925532213041)*(x25)*(x63))));
eerot[7]=((((0.258820142606703)*(x10)*(x56)))+(((0.965925532213041)*(x10)*(x63)))+(((0.965925532213041)*(x2)*(x25)*(x39)))+(((0.258820142606703)*(x25)*(x43))));
eerot[8]=((((0.258820142606703)*(x11)*(x52)))+(((0.965925532213041)*(x11)*(x78)))+(((0.258820142606703)*(x17)*(x48)))+(((0.965925532213041)*(x17)*(x3)*(x39))));
eetrans[2]=((0.370296000000000)+(((0.965925532213041)*(x11)*(x3)*(x75)))+(((0.258820142606703)*(x11)*(x67)))+(((-0.226992500070065)*(x58)))+(((0.258820142606703)*(x11)*(x70)))+(((0.00776460427820108)*(x36)))+(((-0.0245879135476367)*(x0)))+(((0.226992500070065)*(x57)))+(((0.965925532213041)*(x11)*(x79)))+(((-0.0608227335125751)*(x50)))+(((-0.0608227335125751)*(x51)))+(((0.965925532213041)*(x17)*(x81)))+(((0.258820142606703)*(x17)*(x80)))+(((-0.0647050356516757)*(x1)*(x7)))+(((0.0289777659663912)*(x38)))+(((0.0289777659663912)*(x37)))+(((-0.00776460427820108)*(x35)))+(((0.258820142606703)*(x17)*(x67)))+(((0.965925532213041)*(x17)*(x3)*(x75)))+(((-0.241481383053260)*(x4))));
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 6; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

class IKSolver {
public:
IKReal j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j7,cj7,sj7,htj7,j8,cj8,sj8,htj8,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.00000000000000)*(r00));
new_r01=r01;
new_r02=((-1.00000000000000)*(r02));
new_px=((((-0.0900000000000000)*(r02)))+(px));
new_r10=((((-0.258820142606703)*(r20)))+(((-0.965925532213041)*(r10))));
new_r11=((((0.258820142606703)*(r21)))+(((0.965925532213041)*(r11))));
new_r12=((((-0.258820142606703)*(r22)))+(((-0.965925532213041)*(r12))));
new_py=((0.0442191386441994)+(((0.965925532213041)*(py)))+(((0.258820142606703)*(pz)))+(((-0.0869332978991737)*(r12)))+(((-0.0232938128346032)*(r22))));
new_r20=((((-0.965925532213041)*(r20)))+(((0.258820142606703)*(r10))));
new_r21=((((-0.258820142606703)*(r11)))+(((0.965925532213041)*(r21))));
new_r22=((((-0.965925532213041)*(r22)))+(((0.258820142606703)*(r12))));
new_pz=((-0.395207281554332)+(((0.0232938128346032)*(r12)))+(((0.965925532213041)*(pz)))+(((-0.258820142606703)*(py)))+(((-0.0869332978991737)*(r22))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
IKReal op[72], zeror[48];
int numroots;
IKReal x82=((0.0600000000000000)*(npz));
IKReal x83=((0.650000000000000)*(npx));
IKReal x84=((0.0600000000000000)*(npy));
IKReal x85=((0.0950000000000000)*(r22));
IKReal x86=((0.120000000000000)*(npx));
IKReal x87=((-1.30000000000000)*(npy));
IKReal x88=((0.0950000000000000)*(r21));
IKReal x89=((0.190000000000000)*(r20));
IKReal x90=((2.00000000000000)*(rxp1_2));
IKReal x91=((-0.0950000000000000)*(r21));
IKReal x92=((rxp0_2)+(x85));
IKReal x93=((0.940000000000000)*(npz));
IKReal x94=((2.00000000000000)*(rxp2_2));
IKReal x95=((0.180000000000000)*(r21));
IKReal x96=((0.360000000000000)*(r20));
IKReal x97=((0.380000000000000)*(r21));
IKReal x98=((-0.00570000000000000)+(x84));
IKReal x99=((0.290000000000000)*(npx));
IKReal x100=((-0.00570000000000000)+(((-1.00000000000000)*(x84))));
IKReal x101=((x85)+(((-1.00000000000000)*(rxp0_2))));
IKReal x102=((0.0114000000000000)+(x98));
IKReal x103=((0.580000000000000)*(npy));
IKReal x104=((0.00570000000000000)+(((-1.00000000000000)*(x84))));
IKReal x105=((pp)+(x82));
IKReal x106=((rxp0_2)+(((-1.00000000000000)*(x85))));
IKReal x107=((-2.00000000000000)*(rxp1_2));
IKReal x108=((-1.00000000000000)*(x92));
op[0]=((-0.0350000000000000)+(((-1.00000000000000)*(x105)))+(x83));
op[1]=x98;
op[2]=x87;
op[3]=x86;
op[4]=((-0.0350000000000000)+(((-1.00000000000000)*(x105)))+(((-1.00000000000000)*(x83))));
op[5]=x100;
op[6]=x108;
op[7]=x88;
op[8]=x90;
op[9]=x89;
op[10]=x106;
op[11]=x91;
op[12]=x102;
op[13]=((-0.0350000000000000)+(x82)+(x83)+(((-1.00000000000000)*(pp))));
op[14]=x86;
op[15]=x87;
op[16]=x104;
op[17]=((-0.0350000000000000)+(x82)+(((-1.00000000000000)*(x83)))+(((-1.00000000000000)*(pp))));
op[18]=x88;
op[19]=x101;
op[20]=x89;
op[21]=x90;
op[22]=x91;
op[23]=x92;
op[24]=((-0.0108000000000000)+(x86)+(x93));
op[25]=0;
op[26]=((-0.240000000000000)*(npy));
op[27]=0;
op[28]=((-0.0108000000000000)+(x93)+(((-1.00000000000000)*(x86))));
op[29]=0;
op[30]=((x89)+(x95)+(((-1.00000000000000)*(x94))));
op[31]=0;
op[32]=((x96)+(((-1.00000000000000)*(x97))));
op[33]=0;
op[34]=((((-1.00000000000000)*(x94)))+(((-1.00000000000000)*(x95)))+(((-1.00000000000000)*(x89))));
op[35]=0;
op[36]=0;
op[37]=((0.0108000000000000)+(x93)+(((-1.00000000000000)*(x86))));
op[38]=0;
op[39]=((0.240000000000000)*(npy));
op[40]=0;
op[41]=((0.0108000000000000)+(x86)+(x93));
op[42]=0;
op[43]=((x95)+(((-1.00000000000000)*(x94)))+(((-1.00000000000000)*(x89))));
op[44]=0;
op[45]=((x97)+(x96));
op[46]=0;
op[47]=((x89)+(((-1.00000000000000)*(x94)))+(((-1.00000000000000)*(x95))));
op[48]=((0.0496000000000000)+(x82)+(((-1.00000000000000)*(x99)))+(((-1.00000000000000)*(pp))));
op[49]=x98;
op[50]=x103;
op[51]=x86;
op[52]=((0.0496000000000000)+(x82)+(x99)+(((-1.00000000000000)*(pp))));
op[53]=x100;
op[54]=x92;
op[55]=x88;
op[56]=x107;
op[57]=x89;
op[58]=x101;
op[59]=x91;
op[60]=x102;
op[61]=((0.0496000000000000)+(((-1.00000000000000)*(x105)))+(((-1.00000000000000)*(x99))));
op[62]=x86;
op[63]=x103;
op[64]=x104;
op[65]=((0.0496000000000000)+(((-1.00000000000000)*(x105)))+(x99));
op[66]=x88;
op[67]=x106;
op[68]=x89;
op[69]=x107;
op[70]=x91;
op[71]=x108;
solvedialyticpoly8qep(op,zeror,numroots);
IKReal j7array[16], cj7array[16], sj7array[16], j8array[16], cj8array[16], sj8array[16], j6array[16], cj6array[16], sj6array[16];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ij7 += 3)
{
IKReal htj7 = zeror[ij7+0], htj8 = zeror[ij7+1], htj6 = zeror[ij7+2];
j7array[numsolutions]=((2.00000000000000)*(atan(htj7)));
j8array[numsolutions]=((2.00000000000000)*(atan(htj8)));
j6array[numsolutions]=((2.00000000000000)*(atan(htj6)));
IKReal x109=(htj7)*(htj7);
IKReal x110=(htj8)*(htj8);
IKReal x111=(htj6)*(htj6);
cj7array[numsolutions]=((((IKabs(((1.00000000000000)+(x109))) != 0)?((IKReal)1/(((1.00000000000000)+(x109)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x109))))));
cj8array[numsolutions]=((((IKabs(((1.00000000000000)+(x110))) != 0)?((IKReal)1/(((1.00000000000000)+(x110)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x110))))));
cj6array[numsolutions]=((((IKabs(((1.00000000000000)+(x111))) != 0)?((IKReal)1/(((1.00000000000000)+(x111)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x111))))));
sj7array[numsolutions]=((2.00000000000000)*(htj7)*(((IKabs(((1.00000000000000)+((htj7)*(htj7)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj7)*(htj7))))):(IKReal)1.0e30)));
sj8array[numsolutions]=((2.00000000000000)*(htj8)*(((IKabs(((1.00000000000000)+((htj8)*(htj8)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj8)*(htj8))))):(IKReal)1.0e30)));
sj6array[numsolutions]=((2.00000000000000)*(htj6)*(((IKabs(((1.00000000000000)+((htj6)*(htj6)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj6)*(htj6))))):(IKReal)1.0e30)));
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
bool valid = true;
for( int kj7 = 0; kj7 < numsolutions; ++kj7)
{
    if( IKabs(cj7array[kj7]-cj7array[numsolutions]) < 0.00001 && IKabs(sj7array[kj7]-sj7array[numsolutions]) < 0.00001 &&IKabs(cj8array[kj7]-cj8array[numsolutions]) < 0.00001 && IKabs(sj8array[kj7]-sj8array[numsolutions]) < 0.00001 &&IKabs(cj6array[kj7]-cj6array[numsolutions]) < 0.00001 && IKabs(sj6array[kj7]-sj6array[numsolutions]) < 0.00001 && 1 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

    j8 = j8array[ij7]; cj8 = cj8array[ij7]; sj8 = sj8array[ij7];

    j6 = j6array[ij7]; cj6 = cj6array[ij7]; sj6 = sj6array[ij7];

{
IKReal dummyeval[1];
IKReal gconst0;
IKReal x112=(sj8)*(sj8);
IKReal x113=(cj8)*(cj8);
gconst0=IKsign(((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x113)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x112)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x112)))+(((r01)*(r10)*(sj7)*(x113)))));
IKReal x114=(sj8)*(sj8);
IKReal x115=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x115)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x114)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x115)))+(((r01)*(r10)*(sj7)*(x114))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[3];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j6)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
evalcond[2]=((0.0950000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((0.120000000000000)+(((-4.00000000000000)*(cj8)*(npy)))+(((-4.00000000000000)*(npx)*(sj8)))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
IKReal gconst19;
gconst19=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x116=(sj8)*(sj8);
IKReal x117=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x117)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x116)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x116)))+(((r01)*(r10)*(sj7)*(x117))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x118=(sj7)*(sj7);
IKReal x119=(cj7)*(cj7);
dummyeval[0]=((((-1.00000000000000)*(cj8)*(r02)*(r10)*(x118)))+(((-1.00000000000000)*(cj8)*(r02)*(r10)*(x119)))+(((cj8)*(r00)*(r12)*(x118)))+(((cj8)*(r00)*(r12)*(x119)))+(((r02)*(r11)*(sj8)*(x118)))+(((r02)*(r11)*(sj8)*(x119)))+(((-1.00000000000000)*(r01)*(r12)*(sj8)*(x118)))+(((-1.00000000000000)*(r01)*(r12)*(sj8)*(x119))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x120=(sj7)*(sj7);
IKReal x121=(cj7)*(cj7);
IKReal x122=((cj8)*(r02)*(r10)*(x120));
IKReal x123=((cj8)*(r02)*(r10)*(x121));
IKReal x124=((r01)*(r12)*(sj8)*(x120));
IKReal x125=((r01)*(r12)*(sj8)*(x121));
IKReal x126=((x124)+(x125)+(x122)+(x123));
IKReal x127=((r02)*(r11)*(sj8)*(x120));
IKReal x128=((r02)*(r11)*(sj8)*(x121));
IKReal x129=((cj8)*(r00)*(r12)*(x120));
IKReal x130=((cj8)*(r00)*(r12)*(x121));
IKReal x131=((x130)+(x127)+(x128)+(x129));
j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x126)))+(x131))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x126)))+(x131)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((x126)+(((-1.00000000000000)*(x131))))) != 0)?((IKReal)1/(((x126)+(((-1.00000000000000)*(x131)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst20;
gconst20=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst20)*(((((cj5)*(r20)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(cj8)*(r21)))))), ((gconst20)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj8)*(r21)*(sj5)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x132=(sj8)*(sj8);
IKReal x133=(cj8)*(cj8);
IKReal x134=((cj7)*(cj8)*(r01)*(r12));
IKReal x135=((cj7)*(r00)*(r12)*(sj8));
IKReal x136=((r00)*(r11)*(sj7)*(x132));
IKReal x137=((r00)*(r11)*(sj7)*(x133));
IKReal x138=((x135)+(x134)+(x137)+(x136));
IKReal x139=((cj7)*(cj8)*(r02)*(r11));
IKReal x140=((r01)*(r10)*(sj7)*(x133));
IKReal x141=((cj7)*(r02)*(r10)*(sj8));
IKReal x142=((r01)*(r10)*(sj7)*(x132));
IKReal x143=((x140)+(x141)+(x142)+(x139));
j3array[0]=IKatan2(((((IKabs(((x143)+(((-1.00000000000000)*(x138))))) != 0)?((IKReal)1/(((x143)+(((-1.00000000000000)*(x138)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x143)))+(x138))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x143)))+(x138)))):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst20;
gconst20=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst20)*(((((cj5)*(r20)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(cj8)*(r21)))))), ((gconst20)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj8)*(r21)*(sj5)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst19)*(((((cj5)*(r20)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(cj8)*(r21)))))), ((gconst19)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj8)*(r21)*(sj5)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal x144=(sj8)*(sj8);
IKReal x145=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((r01)*(r10)*(sj7)*(x145)))+(((r01)*(r10)*(sj7)*(x144)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x144)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x145))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x146=(sj8)*(sj8);
IKReal x147=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(x146)*((r10)*(r10))))+(((-1.00000000000000)*(x147)*((r11)*(r11))))+(((-1.00000000000000)*(x147)*((r01)*(r01))))+(((-1.00000000000000)*(x146)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x148=(cj8)*(cj8);
IKReal x149=(sj8)*(sj8);
dummyeval[0]=((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x149)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj7)*(r00)*(r01)*(x148)))+(((cj8)*(r01)*(r02)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x149)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((cj7)*(r10)*(r11)*(x148))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x150=(cj8)*(cj8);
IKReal x151=(sj8)*(sj8);
IKReal x152=(r11)*(r11);
IKReal x153=((cj7)*(cj8)*(sj8)*(x152));
IKReal x154=((cj7)*(r10)*(r11)*(x151));
IKReal x155=(r01)*(r01);
IKReal x156=((cj7)*(cj8)*(sj8)*(x155));
IKReal x157=((cj7)*(r00)*(r01)*(x151));
IKReal x158=((x157)+(x156)+(x154)+(x153));
IKReal x159=(r10)*(r10);
IKReal x160=((cj7)*(cj8)*(sj8)*(x159));
IKReal x161=((r00)*(r02)*(sj7)*(sj8));
IKReal x162=((r10)*(r12)*(sj7)*(sj8));
IKReal x163=((cj7)*(r00)*(r01)*(x150));
IKReal x164=((cj8)*(r01)*(r02)*(sj7));
IKReal x165=(r00)*(r00);
IKReal x166=((cj7)*(cj8)*(sj8)*(x165));
IKReal x167=((cj7)*(r10)*(r11)*(x150));
IKReal x168=((cj8)*(r11)*(r12)*(sj7));
IKReal x169=((x168)+(x162)+(x163)+(x160)+(x161)+(x166)+(x167)+(x164));
j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x158)))+(x169))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x158)))+(x169)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj4)*(cj8)*(r11)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj4)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj4)*(r10)*(sj5)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x169)))+(x158))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x169)))+(x158)))):(IKReal)1.0e30))*(((((cj4)*(r00)*(sj5)*(sj8)))+(((cj5)*(cj8)*(r01)*(sj4)))+(((cj4)*(cj8)*(r01)*(sj5)))+(((cj5)*(r00)*(sj4)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x170=(sj8)*(sj8);
IKReal x171=(cj8)*(cj8);
IKReal x172=(r11)*(r11);
IKReal x173=((x171)*(x172));
IKReal x174=(r00)*(r00);
IKReal x175=((x170)*(x174));
IKReal x176=(r10)*(r10);
IKReal x177=((x170)*(x176));
IKReal x178=(r01)*(r01);
IKReal x179=((x171)*(x178));
IKReal x180=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x181=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
IKReal x182=((x179)+(x173)+(x175)+(x177)+(x180)+(x181));
j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x182) != 0)?((IKReal)1/(x182)):(IKReal)1.0e30))*(((((cj4)*(cj5)*(cj8)*(r11)))+(((cj4)*(cj5)*(r10)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj4)*(sj5)))+(((-1.00000000000000)*(r10)*(sj4)*(sj5)*(sj8)))))), ((((IKabs(x182) != 0)?((IKReal)1/(x182)):(IKReal)1.0e30))*(((((cj8)*(r01)*(sj4)*(sj5)))+(((r00)*(sj4)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj4)*(cj5)*(r00)*(sj8)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj8)*(r01)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x183=(sj8)*(sj8);
IKReal x184=(cj8)*(cj8);
IKReal x185=((cj7)*(cj8)*(r01)*(r12));
IKReal x186=((cj7)*(r00)*(r12)*(sj8));
IKReal x187=((r00)*(r11)*(sj7)*(x183));
IKReal x188=((r00)*(r11)*(sj7)*(x184));
IKReal x189=((x185)+(x186)+(x187)+(x188));
IKReal x190=((cj7)*(cj8)*(r02)*(r11));
IKReal x191=((r01)*(r10)*(sj7)*(x184));
IKReal x192=((cj7)*(r02)*(r10)*(sj8));
IKReal x193=((r01)*(r10)*(sj7)*(x183));
IKReal x194=((x193)+(x192)+(x191)+(x190));
j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x189)))+(x194))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x189)))+(x194)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x194)))+(x189))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x194)))+(x189)))):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j6)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
evalcond[2]=((-0.0950000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((0.120000000000000)+(((4.00000000000000)*(cj8)*(npy)))+(((4.00000000000000)*(npx)*(sj8)))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x195=(cj8)*(cj8);
IKReal x196=(sj8)*(sj8);
dummyeval[0]=((((cj7)*(cj8)*(r01)*(r12)))+(((cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(r01)*(r10)*(sj7)*(x195)))+(((-1.00000000000000)*(r01)*(r10)*(sj7)*(x196)))+(((-1.00000000000000)*(cj7)*(r02)*(r10)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r02)*(r11)))+(((r00)*(r11)*(sj7)*(x196)))+(((r00)*(r11)*(sj7)*(x195))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x197=(sj7)*(sj7);
IKReal x198=(cj7)*(cj7);
dummyeval[0]=((((r01)*(r12)*(sj8)*(x198)))+(((r01)*(r12)*(sj8)*(x197)))+(((cj8)*(r02)*(r10)*(x197)))+(((cj8)*(r02)*(r10)*(x198)))+(((-1.00000000000000)*(r02)*(r11)*(sj8)*(x197)))+(((-1.00000000000000)*(r02)*(r11)*(sj8)*(x198)))+(((-1.00000000000000)*(cj8)*(r00)*(r12)*(x197)))+(((-1.00000000000000)*(cj8)*(r00)*(r12)*(x198))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x199=(sj7)*(sj7);
IKReal x200=(cj7)*(cj7);
IKReal x201=((r02)*(r11)*(sj8)*(x199));
IKReal x202=((r02)*(r11)*(sj8)*(x200));
IKReal x203=((cj8)*(r00)*(r12)*(x199));
IKReal x204=((cj8)*(r00)*(r12)*(x200));
IKReal x205=((x204)+(x203)+(x202)+(x201));
IKReal x206=((cj8)*(r02)*(r10)*(x199));
IKReal x207=((cj8)*(r02)*(r10)*(x200));
IKReal x208=((r01)*(r12)*(sj8)*(x199));
IKReal x209=((r01)*(r12)*(sj8)*(x200));
IKReal x210=((x207)+(x206)+(x209)+(x208));
j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x205)))+(x210))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x205)))+(x210)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((x205)+(((-1.00000000000000)*(x210))))) != 0)?((IKReal)1/(((x205)+(((-1.00000000000000)*(x210)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst21;
gconst21=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x211=(cj5)*(cj5);
IKReal x212=(sj5)*(sj5);
IKReal x213=((x211)+(x212));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x213) != 0)?((IKReal)1/(x213)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r20)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj8)*(r21)))))), ((((IKabs(x213) != 0)?((IKReal)1/(x213)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(r20)*(sj5)*(sj8)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst21)*(((((cj3)*(r00)*(sj5)*(sj8)))+(((cj5)*(r20)*(sj8)))+(((cj3)*(cj8)*(r01)*(sj5)))+(((r10)*(sj3)*(sj5)*(sj8)))+(((cj8)*(r11)*(sj3)*(sj5)))+(((cj5)*(cj8)*(r21)))))), ((gconst21)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj5)*(r00)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj8)*(r01)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj3)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x214=(cj8)*(cj8);
IKReal x215=(sj8)*(sj8);
IKReal x216=((cj7)*(cj8)*(r02)*(r11));
IKReal x217=((r01)*(r10)*(sj7)*(x214));
IKReal x218=((cj7)*(r02)*(r10)*(sj8));
IKReal x219=((r01)*(r10)*(sj7)*(x215));
IKReal x220=((x216)+(x217)+(x218)+(x219));
IKReal x221=((cj7)*(cj8)*(r01)*(r12));
IKReal x222=((cj7)*(r00)*(r12)*(sj8));
IKReal x223=((r00)*(r11)*(sj7)*(x215));
IKReal x224=((r00)*(r11)*(sj7)*(x214));
IKReal x225=((x221)+(x223)+(x222)+(x224));
j3array[0]=IKatan2(((((IKabs(((x225)+(((-1.00000000000000)*(x220))))) != 0)?((IKReal)1/(((x225)+(((-1.00000000000000)*(x220)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((((IKabs(((x220)+(((-1.00000000000000)*(x225))))) != 0)?((IKReal)1/(((x220)+(((-1.00000000000000)*(x225)))))):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst21;
gconst21=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x226=(cj5)*(cj5);
IKReal x227=(sj5)*(sj5);
IKReal x228=((x227)+(x226));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x228) != 0)?((IKReal)1/(x228)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r20)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj8)*(r21)))))), ((((IKabs(x228) != 0)?((IKReal)1/(x228)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(r20)*(sj5)*(sj8)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst21)*(((((cj3)*(r00)*(sj5)*(sj8)))+(((cj5)*(r20)*(sj8)))+(((cj3)*(cj8)*(r01)*(sj5)))+(((r10)*(sj3)*(sj5)*(sj8)))+(((cj8)*(r11)*(sj3)*(sj5)))+(((cj5)*(cj8)*(r21)))))), ((gconst21)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj5)*(r00)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj8)*(r01)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj3)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x229=(cj5)*(cj5);
IKReal x230=(sj5)*(sj5);
IKReal x231=((x229)+(x230));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x231) != 0)?((IKReal)1/(x231)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r20)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj8)*(r21)))))), ((((IKabs(x231) != 0)?((IKReal)1/(x231)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(r20)*(sj5)*(sj8)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal x232=(cj8)*(cj8);
IKReal x233=(sj8)*(sj8);
dummyeval[0]=((((r00)*(r11)*(sj7)*(x232)))+(((r00)*(r11)*(sj7)*(x233)))+(((cj7)*(cj8)*(r01)*(r12)))+(((cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(cj7)*(r02)*(r10)*(sj8)))+(((-1.00000000000000)*(r01)*(r10)*(sj7)*(x233)))+(((-1.00000000000000)*(r01)*(r10)*(sj7)*(x232)))+(((-1.00000000000000)*(cj7)*(cj8)*(r02)*(r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x234=(sj8)*(sj8);
IKReal x235=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(x235)*((r01)*(r01))))+(((-1.00000000000000)*(x235)*((r11)*(r11))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x234)*((r10)*(r10))))+(((-1.00000000000000)*(x234)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x236=(cj8)*(cj8);
IKReal x237=(sj8)*(sj8);
dummyeval[0]=((((-1.00000000000000)*(cj7)*(r10)*(r11)*(x237)))+(((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((cj7)*(r10)*(r11)*(x236)))+(((r10)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x237)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r00)*(r01)*(x236)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x238=(cj8)*(cj8);
IKReal x239=(sj8)*(sj8);
IKReal x240=(r11)*(r11);
IKReal x241=((cj7)*(cj8)*(sj8)*(x240));
IKReal x242=((cj7)*(r10)*(r11)*(x239));
IKReal x243=(r01)*(r01);
IKReal x244=((cj7)*(cj8)*(sj8)*(x243));
IKReal x245=((cj7)*(r00)*(r01)*(x239));
IKReal x246=((x242)+(x241)+(x245)+(x244));
IKReal x247=(r10)*(r10);
IKReal x248=((cj7)*(cj8)*(sj8)*(x247));
IKReal x249=((r00)*(r02)*(sj7)*(sj8));
IKReal x250=((r10)*(r12)*(sj7)*(sj8));
IKReal x251=((cj7)*(r00)*(r01)*(x238));
IKReal x252=((cj8)*(r01)*(r02)*(sj7));
IKReal x253=(r00)*(r00);
IKReal x254=((cj7)*(cj8)*(sj8)*(x253));
IKReal x255=((cj7)*(r10)*(r11)*(x238));
IKReal x256=((cj8)*(r11)*(r12)*(sj7));
IKReal x257=((x254)+(x255)+(x256)+(x250)+(x251)+(x252)+(x249)+(x248));
j3array[0]=IKatan2(((((IKabs(((x257)+(((-1.00000000000000)*(x246))))) != 0)?((IKReal)1/(((x257)+(((-1.00000000000000)*(x246)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj4)*(cj8)*(r11)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj4)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj4)*(r10)*(sj5)*(sj8)))))), ((((IKabs(((x246)+(((-1.00000000000000)*(x257))))) != 0)?((IKReal)1/(((x246)+(((-1.00000000000000)*(x257)))))):(IKReal)1.0e30))*(((((cj4)*(r00)*(sj5)*(sj8)))+(((cj5)*(cj8)*(r01)*(sj4)))+(((cj4)*(cj8)*(r01)*(sj5)))+(((cj5)*(r00)*(sj4)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x258=(sj8)*(sj8);
IKReal x259=(cj8)*(cj8);
IKReal x260=(r11)*(r11);
IKReal x261=((x259)*(x260));
IKReal x262=(r00)*(r00);
IKReal x263=((x258)*(x262));
IKReal x264=(r10)*(r10);
IKReal x265=((x258)*(x264));
IKReal x266=(r01)*(r01);
IKReal x267=((x259)*(x266));
IKReal x268=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x269=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
IKReal x270=((x265)+(x267)+(x261)+(x263)+(x269)+(x268));
j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x270) != 0)?((IKReal)1/(x270)):(IKReal)1.0e30))*(((((r10)*(sj4)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj4)*(cj5)*(r10)*(sj8)))+(((cj8)*(r11)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj8)*(r11)))))), ((((IKabs(x270) != 0)?((IKReal)1/(x270)):(IKReal)1.0e30))*(((((cj4)*(cj5)*(r00)*(sj8)))+(((-1.00000000000000)*(r00)*(sj4)*(sj5)*(sj8)))+(((cj4)*(cj5)*(cj8)*(r01)))+(((-1.00000000000000)*(cj8)*(r01)*(sj4)*(sj5)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x271=(cj8)*(cj8);
IKReal x272=(sj8)*(sj8);
IKReal x273=((cj7)*(cj8)*(r02)*(r11));
IKReal x274=((r01)*(r10)*(sj7)*(x271));
IKReal x275=((cj7)*(r02)*(r10)*(sj8));
IKReal x276=((r01)*(r10)*(sj7)*(x272));
IKReal x277=((x276)+(x274)+(x275)+(x273));
IKReal x278=((cj7)*(cj8)*(r01)*(r12));
IKReal x279=((cj7)*(r00)*(r12)*(sj8));
IKReal x280=((r00)*(r11)*(sj7)*(x272));
IKReal x281=((r00)*(r11)*(sj7)*(x271));
IKReal x282=((x278)+(x279)+(x281)+(x280));
j3array[0]=IKatan2(((((IKabs(((x282)+(((-1.00000000000000)*(x277))))) != 0)?((IKReal)1/(((x282)+(((-1.00000000000000)*(x277)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((((IKabs(((x277)+(((-1.00000000000000)*(x282))))) != 0)?((IKReal)1/(((x277)+(((-1.00000000000000)*(x282)))))):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((0.120000000000000)+(((-4.00000000000000)*(cj8)*(npx)*(sj7)))+(((4.00000000000000)*(cj7)*(npz)))+(((0.360000000000000)*(sj7)))+(((4.00000000000000)*(npy)*(sj7)*(sj8)))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x283=(sj8)*(sj8);
IKReal x284=(cj8)*(cj8);
dummyeval[0]=((((x284)*((r11)*(r11))))+(((x283)*((r10)*(r10))))+(((x283)*((r00)*(r00))))+(((x284)*((r01)*(r01))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x285=(sj8)*(sj8);
IKReal x286=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj8)*(r02)*(r11)*(sj7)))+(((cj7)*(r00)*(r11)*(x286)))+(((cj7)*(r00)*(r11)*(x285)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x285)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x286)))+(((r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x287=(sj8)*(sj8);
IKReal x288=(cj8)*(cj8);
IKReal x289=((cj7)*(r01)*(r10)*(x287));
IKReal x290=((cj7)*(r01)*(r10)*(x288));
IKReal x291=((r00)*(r12)*(sj7)*(sj8));
IKReal x292=((cj8)*(r01)*(r12)*(sj7));
IKReal x293=((x290)+(x291)+(x292)+(x289));
IKReal x294=((cj7)*(r00)*(r11)*(x287));
IKReal x295=((cj7)*(r00)*(r11)*(x288));
IKReal x296=((cj8)*(r02)*(r11)*(sj7));
IKReal x297=((r02)*(r10)*(sj7)*(sj8));
IKReal x298=((x294)+(x295)+(x296)+(x297));
j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x293)))+(x298))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x293)))+(x298)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x298)))+(x293))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x298)))+(x293)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst22;
gconst22=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x299=(cj5)*(cj5);
IKReal x300=(sj5)*(sj5);
IKReal x301=((x300)+(x299));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x301) != 0)?((IKReal)1/(x301)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x301) != 0)?((IKReal)1/(x301)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x302=(cj5)*(cj5);
IKReal x303=(sj5)*(sj5);
IKReal x304=((x302)+(x303));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x304) != 0)?((IKReal)1/(x304)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x304) != 0)?((IKReal)1/(x304)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst22)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst22)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x305=(sj8)*(sj8);
IKReal x306=(cj8)*(cj8);
IKReal x307=(r11)*(r11);
IKReal x308=((x306)*(x307));
IKReal x309=(r00)*(r00);
IKReal x310=((x305)*(x309));
IKReal x311=(r10)*(r10);
IKReal x312=((x305)*(x311));
IKReal x313=(r01)*(r01);
IKReal x314=((x306)*(x313));
IKReal x315=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x316=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
IKReal x317=((x308)+(x315)+(x314)+(x316)+(x310)+(x312));
j3array[0]=IKatan2(((((IKabs(x317) != 0)?((IKReal)1/(x317)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((-1.00000000000000)*(((IKabs(x317) != 0)?((IKReal)1/(x317)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst22;
gconst22=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x318=(cj5)*(cj5);
IKReal x319=(sj5)*(sj5);
IKReal x320=((x319)+(x318));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x320) != 0)?((IKReal)1/(x320)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x320) != 0)?((IKReal)1/(x320)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x321=(cj5)*(cj5);
IKReal x322=(sj5)*(sj5);
IKReal x323=((x321)+(x322));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x323) != 0)?((IKReal)1/(x323)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x323) != 0)?((IKReal)1/(x323)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst22)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst22)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x324=(cj5)*(cj5);
IKReal x325=(sj5)*(sj5);
IKReal x326=((x324)+(x325));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x326) != 0)?((IKReal)1/(x326)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x326) != 0)?((IKReal)1/(x326)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal gconst23;
IKReal x327=(cj8)*(cj8);
IKReal x328=(sj8)*(sj8);
gconst23=IKsign(((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x328)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x328)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r10)*(r11)*(x327)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((cj7)*(r00)*(r01)*(x327)))));
IKReal x329=(cj8)*(cj8);
IKReal x330=(sj8)*(sj8);
dummyeval[0]=((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r10)*(r11)*(x329)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x330)))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x330)))+(((cj7)*(r00)*(r01)*(x329))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x331=(sj8)*(sj8);
IKReal x332=(cj8)*(cj8);
dummyeval[0]=((((x331)*((r00)*(r00))))+(((x332)*((r01)*(r01))))+(((x332)*((r11)*(r11))))+(((x331)*((r10)*(r10))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x333=(sj8)*(sj8);
IKReal x334=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj8)*(r02)*(r11)*(sj7)))+(((cj7)*(r00)*(r11)*(x333)))+(((cj7)*(r00)*(r11)*(x334)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x333)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x334)))+(((r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x335=(sj8)*(sj8);
IKReal x336=(cj8)*(cj8);
IKReal x337=((cj7)*(r01)*(r10)*(x335));
IKReal x338=((cj7)*(r01)*(r10)*(x336));
IKReal x339=((r00)*(r12)*(sj7)*(sj8));
IKReal x340=((cj8)*(r01)*(r12)*(sj7));
IKReal x341=((x339)+(x338)+(x337)+(x340));
IKReal x342=((cj7)*(r00)*(r11)*(x335));
IKReal x343=((cj7)*(r00)*(r11)*(x336));
IKReal x344=((cj8)*(r02)*(r11)*(sj7));
IKReal x345=((r02)*(r10)*(sj7)*(sj8));
IKReal x346=((x342)+(x343)+(x344)+(x345));
j3array[0]=IKatan2(((((IKabs(((x346)+(((-1.00000000000000)*(x341))))) != 0)?((IKReal)1/(((x346)+(((-1.00000000000000)*(x341)))))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((x341)+(((-1.00000000000000)*(x346))))) != 0)?((IKReal)1/(((x341)+(((-1.00000000000000)*(x346)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x347=(sj8)*(sj8);
IKReal x348=(cj8)*(cj8);
IKReal x349=(r11)*(r11);
IKReal x350=((x348)*(x349));
IKReal x351=(r00)*(r00);
IKReal x352=((x347)*(x351));
IKReal x353=(r10)*(r10);
IKReal x354=((x347)*(x353));
IKReal x355=(r01)*(r01);
IKReal x356=((x348)*(x355));
IKReal x357=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x358=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
IKReal x359=((x350)+(x352)+(x354)+(x357)+(x356)+(x358));
j3array[0]=IKatan2(((((IKabs(x359) != 0)?((IKReal)1/(x359)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((-1.00000000000000)*(((IKabs(x359) != 0)?((IKReal)1/(x359)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((gconst23)*(((((-1.00000000000000)*(cj4)*(cj8)*(r11)*(sj5)))+(((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj4)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))+(((-1.00000000000000)*(cj4)*(r10)*(sj5)*(sj8)))))), ((gconst23)*(((((-1.00000000000000)*(cj5)*(cj8)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj8)*(r01)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj4)*(r00)*(sj5)*(sj8)))+(((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
evalcond[1]=((-0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((0.120000000000000)+(((4.00000000000000)*(cj8)*(npx)*(sj7)))+(((-4.00000000000000)*(cj7)*(npz)))+(((-0.360000000000000)*(sj7)))+(((-4.00000000000000)*(npy)*(sj7)*(sj8)))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
IKReal gconst24;
gconst24=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x360=(sj8)*(sj8);
IKReal x361=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(x361)*((r11)*(r11))))+(((-1.00000000000000)*(x360)*((r10)*(r10))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x360)*((r00)*(r00))))+(((-1.00000000000000)*(x361)*((r01)*(r01))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x362=(sj8)*(sj8);
IKReal x363=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj7)*(r00)*(r11)*(x362)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x363)))+(((r00)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj8)*(r02)*(r11)*(sj7)))+(((cj7)*(r01)*(r10)*(x363)))+(((cj7)*(r01)*(r10)*(x362)))+(((-1.00000000000000)*(r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x364=(sj8)*(sj8);
IKReal x365=(cj8)*(cj8);
IKReal x366=((cj7)*(r00)*(r11)*(x364));
IKReal x367=((cj7)*(r00)*(r11)*(x365));
IKReal x368=((cj8)*(r02)*(r11)*(sj7));
IKReal x369=((r02)*(r10)*(sj7)*(sj8));
IKReal x370=((x368)+(x369)+(x366)+(x367));
IKReal x371=((cj7)*(r01)*(r10)*(x364));
IKReal x372=((cj7)*(r01)*(r10)*(x365));
IKReal x373=((r00)*(r12)*(sj7)*(sj8));
IKReal x374=((cj8)*(r01)*(r12)*(sj7));
IKReal x375=((x374)+(x373)+(x372)+(x371));
j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x370)))+(x375))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x370)))+(x375)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x375)))+(x370))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x375)))+(x370)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst25;
gconst25=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst25)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst25)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x376=(sj8)*(sj8);
IKReal x377=(cj8)*(cj8);
IKReal x378=(r11)*(r11);
IKReal x379=((x377)*(x378));
IKReal x380=(r00)*(r00);
IKReal x381=((x376)*(x380));
IKReal x382=(r10)*(r10);
IKReal x383=((x376)*(x382));
IKReal x384=(r01)*(r01);
IKReal x385=((x377)*(x384));
IKReal x386=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x387=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
IKReal x388=((x386)+(x387)+(x385)+(x383)+(x381)+(x379));
j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x388) != 0)?((IKReal)1/(x388)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((((IKabs(x388) != 0)?((IKReal)1/(x388)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst25;
gconst25=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst25)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst25)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst24)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst24)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal gconst26;
IKReal x389=(cj8)*(cj8);
IKReal x390=(sj8)*(sj8);
gconst26=IKsign(((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r02)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((cj7)*(r00)*(r01)*(x389)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x390)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x390)))+(((cj7)*(r10)*(r11)*(x389)))));
IKReal x391=(cj8)*(cj8);
IKReal x392=(sj8)*(sj8);
dummyeval[0]=((((cj7)*(r00)*(r01)*(x391)))+(((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r10)*(r11)*(x391)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x392)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x392))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x393=(sj8)*(sj8);
IKReal x394=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(x393)*((r00)*(r00))))+(((-1.00000000000000)*(x394)*((r11)*(r11))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x394)*((r01)*(r01))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x393)*((r10)*(r10)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x395=(sj8)*(sj8);
IKReal x396=(cj8)*(cj8);
dummyeval[0]=((((r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x395)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x396)))+(((cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj8)*(r02)*(r11)*(sj7)))+(((cj7)*(r01)*(r10)*(x395)))+(((cj7)*(r01)*(r10)*(x396)))+(((-1.00000000000000)*(r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x397=(sj8)*(sj8);
IKReal x398=(cj8)*(cj8);
IKReal x399=((cj7)*(r00)*(r11)*(x397));
IKReal x400=((cj7)*(r00)*(r11)*(x398));
IKReal x401=((cj8)*(r02)*(r11)*(sj7));
IKReal x402=((r02)*(r10)*(sj7)*(sj8));
IKReal x403=((x399)+(x401)+(x400)+(x402));
IKReal x404=((cj7)*(r01)*(r10)*(x397));
IKReal x405=((cj7)*(r01)*(r10)*(x398));
IKReal x406=((r00)*(r12)*(sj7)*(sj8));
IKReal x407=((cj8)*(r01)*(r12)*(sj7));
IKReal x408=((x405)+(x404)+(x407)+(x406));
j3array[0]=IKatan2(((((IKabs(((x408)+(((-1.00000000000000)*(x403))))) != 0)?((IKReal)1/(((x408)+(((-1.00000000000000)*(x403)))))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((x403)+(((-1.00000000000000)*(x408))))) != 0)?((IKReal)1/(((x403)+(((-1.00000000000000)*(x408)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x409=(sj8)*(sj8);
IKReal x410=(cj8)*(cj8);
IKReal x411=(r11)*(r11);
IKReal x412=((x410)*(x411));
IKReal x413=(r00)*(r00);
IKReal x414=((x409)*(x413));
IKReal x415=(r10)*(r10);
IKReal x416=((x409)*(x415));
IKReal x417=(r01)*(r01);
IKReal x418=((x410)*(x417));
IKReal x419=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x420=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
IKReal x421=((x412)+(x416)+(x414)+(x418)+(x419)+(x420));
j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x421) != 0)?((IKReal)1/(x421)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((((IKabs(x421) != 0)?((IKReal)1/(x421)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((gconst26)*(((((r02)*(sj7)))+(((-1.00000000000000)*(cj4)*(cj8)*(r11)*(sj5)))+(((cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj4)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj4)*(r10)*(sj5)*(sj8)))))), ((gconst26)*(((((-1.00000000000000)*(cj5)*(cj8)*(r01)*(sj4)))+(((cj7)*(r11)*(sj8)))+(((-1.00000000000000)*(cj4)*(cj8)*(r01)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj4)*(r00)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r12)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((((IKabs(cj6) != 0)?((IKReal)1/(cj6)):(IKReal)1.0e30))*(((((-4.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.120000000000000)*(cj6)))+(((0.380000000000000)*(sj6)))+(((4.00000000000000)*(cj7)*(npz)))+(((0.360000000000000)*(sj7)))+(((4.00000000000000)*(npy)*(sj7)*(sj8)))))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
IKReal gconst2;
gconst2=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst1;
IKReal x422=(sj8)*(sj8);
IKReal x423=(cj8)*(cj8);
gconst1=IKsign(((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((r01)*(r10)*(sj7)*(x422)))+(((r01)*(r10)*(sj7)*(x423)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x423)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x422)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))));
IKReal x424=(sj8)*(sj8);
IKReal x425=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((r01)*(r10)*(sj7)*(x424)))+(((r01)*(r10)*(sj7)*(x425)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x425)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x424)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x426=(sj8)*(sj8);
IKReal x427=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x426)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x427)))+(((cj7)*(r00)*(r11)*(x427)))+(((cj7)*(r00)*(r11)*(x426)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj8)*(r02)*(r11)*(sj7)))+(((r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x428=(sj8)*(sj8);
IKReal x429=(cj8)*(cj8);
dummyeval[0]=((((x429)*((r11)*(r11))))+(((x429)*((r01)*(r01))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((x428)*((r10)*(r10))))+(((x428)*((r00)*(r00)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x430=(sj8)*(sj8);
IKReal x431=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x431)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x430)))+(((cj7)*(r00)*(r11)*(x430)))+(((cj7)*(r00)*(r11)*(x431)))+(((cj8)*(r02)*(r11)*(sj7)))+(((r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x432=(sj8)*(sj8);
IKReal x433=(cj8)*(cj8);
IKReal x434=((cj7)*(r01)*(r10)*(x432));
IKReal x435=((cj7)*(r01)*(r10)*(x433));
IKReal x436=((r00)*(r12)*(sj7)*(sj8));
IKReal x437=((cj8)*(r01)*(r12)*(sj7));
IKReal x438=((x434)+(x435)+(x436)+(x437));
IKReal x439=((cj7)*(r00)*(r11)*(x432));
IKReal x440=((cj7)*(r00)*(r11)*(x433));
IKReal x441=((cj8)*(r02)*(r11)*(sj7));
IKReal x442=((r02)*(r10)*(sj7)*(sj8));
IKReal x443=((x439)+(x441)+(x440)+(x442));
j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x438)))+(x443))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x438)))+(x443)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x443)))+(x438))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x443)))+(x438)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst7;
gconst7=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x444=(cj5)*(cj5);
IKReal x445=(sj5)*(sj5);
IKReal x446=((x445)+(x444));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x446) != 0)?((IKReal)1/(x446)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x446) != 0)?((IKReal)1/(x446)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x447=(cj5)*(cj5);
IKReal x448=(sj5)*(sj5);
IKReal x449=((x448)+(x447));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x449) != 0)?((IKReal)1/(x449)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x449) != 0)?((IKReal)1/(x449)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst7)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst7)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x450=(sj8)*(sj8);
IKReal x451=(cj8)*(cj8);
IKReal x452=(r11)*(r11);
IKReal x453=((x451)*(x452));
IKReal x454=(r00)*(r00);
IKReal x455=((x450)*(x454));
IKReal x456=(r10)*(r10);
IKReal x457=((x450)*(x456));
IKReal x458=(r01)*(r01);
IKReal x459=((x451)*(x458));
IKReal x460=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x461=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
IKReal x462=((x459)+(x457)+(x455)+(x453)+(x461)+(x460));
j3array[0]=IKatan2(((((IKabs(x462) != 0)?((IKReal)1/(x462)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((-1.00000000000000)*(((IKabs(x462) != 0)?((IKReal)1/(x462)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst7;
gconst7=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x463=(cj5)*(cj5);
IKReal x464=(sj5)*(sj5);
IKReal x465=((x463)+(x464));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x465) != 0)?((IKReal)1/(x465)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x465) != 0)?((IKReal)1/(x465)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x466=(cj5)*(cj5);
IKReal x467=(sj5)*(sj5);
IKReal x468=((x467)+(x466));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x468) != 0)?((IKReal)1/(x468)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x468) != 0)?((IKReal)1/(x468)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst7)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst7)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x469=(cj5)*(cj5);
IKReal x470=(sj5)*(sj5);
IKReal x471=((x469)+(x470));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x471) != 0)?((IKReal)1/(x471)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x471) != 0)?((IKReal)1/(x471)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal gconst8;
IKReal x472=(cj8)*(cj8);
IKReal x473=(sj8)*(sj8);
gconst8=IKsign(((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x473)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj7)*(r10)*(r11)*(x472)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x473)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r00)*(r01)*(x472)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))));
IKReal x474=(cj8)*(cj8);
IKReal x475=(sj8)*(sj8);
dummyeval[0]=((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x475)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj7)*(r10)*(r11)*(x474)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x475)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r00)*(r01)*(x474)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x476=(sj8)*(sj8);
IKReal x477=(cj8)*(cj8);
dummyeval[0]=((((x477)*((r01)*(r01))))+(((x476)*((r00)*(r00))))+(((x477)*((r11)*(r11))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((x476)*((r10)*(r10)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x478=(sj8)*(sj8);
IKReal x479=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj7)*(r01)*(r10)*(x479)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x478)))+(((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((cj7)*(r00)*(r11)*(x478)))+(((cj7)*(r00)*(r11)*(x479)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj8)*(r02)*(r11)*(sj7)))+(((r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x480=(sj8)*(sj8);
IKReal x481=(cj8)*(cj8);
IKReal x482=((cj7)*(r01)*(r10)*(x480));
IKReal x483=((cj7)*(r01)*(r10)*(x481));
IKReal x484=((r00)*(r12)*(sj7)*(sj8));
IKReal x485=((cj8)*(r01)*(r12)*(sj7));
IKReal x486=((x483)+(x482)+(x485)+(x484));
IKReal x487=((cj7)*(r00)*(r11)*(x480));
IKReal x488=((cj7)*(r00)*(r11)*(x481));
IKReal x489=((cj8)*(r02)*(r11)*(sj7));
IKReal x490=((r02)*(r10)*(sj7)*(sj8));
IKReal x491=((x489)+(x488)+(x487)+(x490));
j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x486)))+(x491))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x486)))+(x491)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x491)))+(x486))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x491)))+(x486)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x492=(sj8)*(sj8);
IKReal x493=(cj8)*(cj8);
IKReal x494=(r11)*(r11);
IKReal x495=((x493)*(x494));
IKReal x496=(r00)*(r00);
IKReal x497=((x492)*(x496));
IKReal x498=(r10)*(r10);
IKReal x499=((x492)*(x498));
IKReal x500=(r01)*(r01);
IKReal x501=((x493)*(x500));
IKReal x502=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x503=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
IKReal x504=((x499)+(x497)+(x495)+(x501)+(x502)+(x503));
j3array[0]=IKatan2(((((IKabs(x504) != 0)?((IKReal)1/(x504)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((-1.00000000000000)*(((IKabs(x504) != 0)?((IKReal)1/(x504)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((gconst8)*(((((-1.00000000000000)*(cj4)*(cj8)*(r11)*(sj5)))+(((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj4)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))+(((-1.00000000000000)*(cj4)*(r10)*(sj5)*(sj8)))))), ((gconst8)*(((((-1.00000000000000)*(cj5)*(cj8)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj8)*(r01)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj4)*(r00)*(sj5)*(sj8)))+(((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
evalcond[1]=((-0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((-0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst9;
gconst9=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x505=(sj8)*(sj8);
IKReal x506=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(x506)*((r01)*(r01))))+(((-1.00000000000000)*(x506)*((r11)*(r11))))+(((-1.00000000000000)*(x505)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x505)*((r10)*(r10))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x507=(sj8)*(sj8);
IKReal x508=(cj8)*(cj8);
dummyeval[0]=((((r00)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(r02)*(r10)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x508)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x507)))+(((cj7)*(r01)*(r10)*(x508)))+(((cj7)*(r01)*(r10)*(x507))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x509=(sj8)*(sj8);
IKReal x510=(cj8)*(cj8);
IKReal x511=((cj7)*(r00)*(r11)*(x509));
IKReal x512=((cj7)*(r00)*(r11)*(x510));
IKReal x513=((cj8)*(r02)*(r11)*(sj7));
IKReal x514=((r02)*(r10)*(sj7)*(sj8));
IKReal x515=((x514)+(x513)+(x512)+(x511));
IKReal x516=((cj7)*(r01)*(r10)*(x509));
IKReal x517=((cj7)*(r01)*(r10)*(x510));
IKReal x518=((r00)*(r12)*(sj7)*(sj8));
IKReal x519=((cj8)*(r01)*(r12)*(sj7));
IKReal x520=((x519)+(x518)+(x517)+(x516));
j3array[0]=IKatan2(((((IKabs(((x520)+(((-1.00000000000000)*(x515))))) != 0)?((IKReal)1/(((x520)+(((-1.00000000000000)*(x515)))))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x520)))+(x515))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x520)))+(x515)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst10;
gconst10=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst10)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst10)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x521=(sj8)*(sj8);
IKReal x522=(cj8)*(cj8);
IKReal x523=(r11)*(r11);
IKReal x524=((x522)*(x523));
IKReal x525=(r00)*(r00);
IKReal x526=((x521)*(x525));
IKReal x527=(r10)*(r10);
IKReal x528=((x521)*(x527));
IKReal x529=(r01)*(r01);
IKReal x530=((x522)*(x529));
IKReal x531=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x532=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
IKReal x533=((x531)+(x530)+(x532)+(x526)+(x524)+(x528));
j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x533) != 0)?((IKReal)1/(x533)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((((IKabs(x533) != 0)?((IKReal)1/(x533)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst10;
gconst10=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst10)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst10)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst9)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst9)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal gconst11;
IKReal x534=(cj8)*(cj8);
IKReal x535=(sj8)*(sj8);
gconst11=IKsign(((((-1.00000000000000)*(cj7)*(r10)*(r11)*(x535)))+(((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r00)*(r01)*(x534)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(r10)*(r11)*(x534)))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x535)))));
IKReal x536=(cj8)*(cj8);
IKReal x537=(sj8)*(sj8);
dummyeval[0]=((((-1.00000000000000)*(cj7)*(r10)*(r11)*(x537)))+(((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r00)*(r01)*(x536)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(r10)*(r11)*(x536)))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x537))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x538=(sj8)*(sj8);
IKReal x539=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(x539)*((r11)*(r11))))+(((-1.00000000000000)*(x539)*((r01)*(r01))))+(((-1.00000000000000)*(x538)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x538)*((r10)*(r10))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x540=(sj8)*(sj8);
IKReal x541=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj7)*(r00)*(r11)*(x541)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x540)))+(((r00)*(r12)*(sj7)*(sj8)))+(((cj7)*(r01)*(r10)*(x540)))+(((cj7)*(r01)*(r10)*(x541)))+(((cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x542=(sj8)*(sj8);
IKReal x543=(cj8)*(cj8);
IKReal x544=((cj7)*(r00)*(r11)*(x542));
IKReal x545=((cj7)*(r00)*(r11)*(x543));
IKReal x546=((cj8)*(r02)*(r11)*(sj7));
IKReal x547=((r02)*(r10)*(sj7)*(sj8));
IKReal x548=((x544)+(x545)+(x546)+(x547));
IKReal x549=((cj7)*(r01)*(r10)*(x542));
IKReal x550=((cj7)*(r01)*(r10)*(x543));
IKReal x551=((r00)*(r12)*(sj7)*(sj8));
IKReal x552=((cj8)*(r01)*(r12)*(sj7));
IKReal x553=((x552)+(x551)+(x550)+(x549));
j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x548)))+(x553))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x548)))+(x553)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x553)))+(x548))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x553)))+(x548)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x554=(sj8)*(sj8);
IKReal x555=(cj8)*(cj8);
IKReal x556=(r11)*(r11);
IKReal x557=((x555)*(x556));
IKReal x558=(r00)*(r00);
IKReal x559=((x554)*(x558));
IKReal x560=(r10)*(r10);
IKReal x561=((x554)*(x560));
IKReal x562=(r01)*(r01);
IKReal x563=((x555)*(x562));
IKReal x564=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x565=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
IKReal x566=((x559)+(x557)+(x564)+(x565)+(x563)+(x561));
j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x566) != 0)?((IKReal)1/(x566)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((((IKabs(x566) != 0)?((IKReal)1/(x566)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((gconst11)*(((((r02)*(sj7)))+(((-1.00000000000000)*(cj4)*(cj8)*(r11)*(sj5)))+(((cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj4)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj4)*(r10)*(sj5)*(sj8)))))), ((gconst11)*(((((-1.00000000000000)*(cj5)*(cj8)*(r01)*(sj4)))+(((cj7)*(r11)*(sj8)))+(((-1.00000000000000)*(cj4)*(cj8)*(r01)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj4)*(r00)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r12)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x567=(sj8)*(sj8);
IKReal x568=(cj8)*(cj8);
IKReal x569=((cj7)*(r01)*(r10)*(x567));
IKReal x570=((cj7)*(r01)*(r10)*(x568));
IKReal x571=((r00)*(r12)*(sj7)*(sj8));
IKReal x572=((cj8)*(r01)*(r12)*(sj7));
IKReal x573=((x571)+(x570)+(x572)+(x569));
IKReal x574=((cj7)*(r00)*(r11)*(x567));
IKReal x575=((cj7)*(r00)*(r11)*(x568));
IKReal x576=((cj8)*(r02)*(r11)*(sj7));
IKReal x577=((r02)*(r10)*(sj7)*(sj8));
IKReal x578=((x575)+(x574)+(x577)+(x576));
j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x573)))+(x578))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x573)))+(x578)))):(IKReal)1.0e30))*(((((cj6)*(r12)*(sj7)))+(((cj6)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj6)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x578)))+(x573))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x578)))+(x573)))):(IKReal)1.0e30))*(((((cj6)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj6)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[5]=((0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x579=(cj5)*(cj5);
IKReal x580=(sj5)*(sj5);
IKReal x581=((x579)+(x580));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x581) != 0)?((IKReal)1/(x581)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x581) != 0)?((IKReal)1/(x581)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x582=(cj5)*(cj5);
IKReal x583=(sj5)*(sj5);
IKReal x584=((x582)+(x583));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x584) != 0)?((IKReal)1/(x584)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x584) != 0)?((IKReal)1/(x584)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst4)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst4)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
evalcond[1]=((-0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[5]=((-0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst5;
gconst5=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst5)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst5)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst3)*(((((cj5)*(r20)*(sj8)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj5)*(cj8)*(r21)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))))), ((gconst3)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((gconst1)*(((((cj6)*(r11)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj6)))+(((-1.00000000000000)*(r10)*(sj6)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r10)*(sj7)))+(((cj6)*(cj7)*(r12)))))), ((gconst1)*(((((cj6)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(r00)*(sj6)*(sj8)))+(((cj6)*(cj7)*(r02)))+(((-1.00000000000000)*(cj8)*(r01)*(sj6)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[5]=((0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x585=(cj5)*(cj5);
IKReal x586=(sj5)*(sj5);
IKReal x587=((x585)+(x586));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x587) != 0)?((IKReal)1/(x587)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x587) != 0)?((IKReal)1/(x587)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x588=(cj5)*(cj5);
IKReal x589=(sj5)*(sj5);
IKReal x590=((x588)+(x589));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x590) != 0)?((IKReal)1/(x590)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x590) != 0)?((IKReal)1/(x590)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst4)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst4)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
evalcond[1]=((-0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[5]=((-0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst5;
gconst5=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst5)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst5)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst3)*(((((cj5)*(r20)*(sj8)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj5)*(cj8)*(r21)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))))), ((gconst3)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst2)*(((((cj5)*(r20)*(sj8)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj5)*(cj8)*(r21)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))))), ((gconst2)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal gconst6;
IKReal x591=(sj8)*(sj8);
IKReal x592=(cj8)*(cj8);
gconst6=IKsign(((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x592)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x591)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x592)))+(((r01)*(r10)*(sj7)*(x591)))));
IKReal x593=(sj8)*(sj8);
IKReal x594=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x594)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x593)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x593)))+(((r01)*(r10)*(sj7)*(x594))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x595=(sj8)*(sj8);
IKReal x596=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj8)*(r02)*(r11)*(sj7)))+(((cj7)*(r00)*(r11)*(x596)))+(((cj7)*(r00)*(r11)*(x595)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x596)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x595)))+(((r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x597=(sj8)*(sj8);
IKReal x598=(cj8)*(cj8);
IKReal x599=((cj7)*(r01)*(r10)*(x597));
IKReal x600=((cj7)*(r01)*(r10)*(x598));
IKReal x601=((r00)*(r12)*(sj7)*(sj8));
IKReal x602=((cj8)*(r01)*(r12)*(sj7));
IKReal x603=((x599)+(x602)+(x601)+(x600));
IKReal x604=((cj7)*(r00)*(r11)*(x597));
IKReal x605=((cj7)*(r00)*(r11)*(x598));
IKReal x606=((cj8)*(r02)*(r11)*(sj7));
IKReal x607=((r02)*(r10)*(sj7)*(sj8));
IKReal x608=((x607)+(x606)+(x605)+(x604));
j3array[0]=IKatan2(((((IKabs(((x608)+(((-1.00000000000000)*(x603))))) != 0)?((IKReal)1/(((x608)+(((-1.00000000000000)*(x603)))))):(IKReal)1.0e30))*(((((cj6)*(r12)*(sj7)))+(((cj6)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj6)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((x603)+(((-1.00000000000000)*(x608))))) != 0)?((IKReal)1/(((x603)+(((-1.00000000000000)*(x608)))))):(IKReal)1.0e30))*(((((cj6)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj6)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((gconst6)*(((((cj6)*(r11)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj6)))+(((-1.00000000000000)*(r10)*(sj6)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r10)*(sj7)))+(((cj6)*(cj7)*(r12)))))), ((gconst6)*(((((cj6)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(r00)*(sj6)*(sj8)))+(((cj6)*(cj7)*(r02)))+(((-1.00000000000000)*(cj8)*(r01)*(sj6)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((((IKabs(sj6) != 0)?((IKReal)1/(sj6)):(IKReal)1.0e30))*(((((0.120000000000000)*(sj6)))+(((-0.380000000000000)*(cj6)))+(((-4.00000000000000)*(cj8)*(npy)))+(((-4.00000000000000)*(npx)*(sj8)))))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
IKReal gconst2;
gconst2=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst1;
IKReal x609=(sj8)*(sj8);
IKReal x610=(cj8)*(cj8);
gconst1=IKsign(((((r01)*(r10)*(sj7)*(x609)))+(((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x610)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x610)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x609)))));
IKReal x611=(sj8)*(sj8);
IKReal x612=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x611)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x612)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x612)))+(((r01)*(r10)*(sj7)*(x611))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x613=(sj8)*(sj8);
IKReal x614=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj7)*(r00)*(r11)*(x614)))+(((cj7)*(r00)*(r11)*(x613)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x614)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x613)))+(((cj8)*(r02)*(r11)*(sj7)))+(((r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x615=(sj8)*(sj8);
IKReal x616=(cj8)*(cj8);
dummyeval[0]=((((x615)*((r10)*(r10))))+(((x616)*((r01)*(r01))))+(((x615)*((r00)*(r00))))+(((x616)*((r11)*(r11))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x617=(sj8)*(sj8);
IKReal x618=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj7)*(r00)*(r11)*(x618)))+(((cj7)*(r00)*(r11)*(x617)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x618)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x617)))+(((cj8)*(r02)*(r11)*(sj7)))+(((r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x619=(sj8)*(sj8);
IKReal x620=(cj8)*(cj8);
IKReal x621=((cj7)*(r01)*(r10)*(x619));
IKReal x622=((cj7)*(r01)*(r10)*(x620));
IKReal x623=((r00)*(r12)*(sj7)*(sj8));
IKReal x624=((cj8)*(r01)*(r12)*(sj7));
IKReal x625=((x624)+(x621)+(x623)+(x622));
IKReal x626=((cj7)*(r00)*(r11)*(x619));
IKReal x627=((cj7)*(r00)*(r11)*(x620));
IKReal x628=((cj8)*(r02)*(r11)*(sj7));
IKReal x629=((r02)*(r10)*(sj7)*(sj8));
IKReal x630=((x627)+(x626)+(x629)+(x628));
j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x625)))+(x630))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x625)))+(x630)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x630)))+(x625))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x630)))+(x625)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst7;
gconst7=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x631=(cj5)*(cj5);
IKReal x632=(sj5)*(sj5);
IKReal x633=((x632)+(x631));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x633) != 0)?((IKReal)1/(x633)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x633) != 0)?((IKReal)1/(x633)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x634=(cj5)*(cj5);
IKReal x635=(sj5)*(sj5);
IKReal x636=((x634)+(x635));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x636) != 0)?((IKReal)1/(x636)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x636) != 0)?((IKReal)1/(x636)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst7)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst7)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x637=(sj8)*(sj8);
IKReal x638=(cj8)*(cj8);
IKReal x639=(r11)*(r11);
IKReal x640=((x638)*(x639));
IKReal x641=(r00)*(r00);
IKReal x642=((x637)*(x641));
IKReal x643=(r10)*(r10);
IKReal x644=((x637)*(x643));
IKReal x645=(r01)*(r01);
IKReal x646=((x638)*(x645));
IKReal x647=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x648=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
IKReal x649=((x647)+(x646)+(x644)+(x642)+(x640)+(x648));
j3array[0]=IKatan2(((((IKabs(x649) != 0)?((IKReal)1/(x649)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((-1.00000000000000)*(((IKabs(x649) != 0)?((IKReal)1/(x649)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst7;
gconst7=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x650=(cj5)*(cj5);
IKReal x651=(sj5)*(sj5);
IKReal x652=((x650)+(x651));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x652) != 0)?((IKReal)1/(x652)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x652) != 0)?((IKReal)1/(x652)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x653=(cj5)*(cj5);
IKReal x654=(sj5)*(sj5);
IKReal x655=((x653)+(x654));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x655) != 0)?((IKReal)1/(x655)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x655) != 0)?((IKReal)1/(x655)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst7)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst7)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x656=(cj5)*(cj5);
IKReal x657=(sj5)*(sj5);
IKReal x658=((x656)+(x657));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x658) != 0)?((IKReal)1/(x658)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x658) != 0)?((IKReal)1/(x658)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal gconst8;
IKReal x659=(cj8)*(cj8);
IKReal x660=(sj8)*(sj8);
gconst8=IKsign(((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r10)*(r11)*(x659)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x660)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((cj7)*(r00)*(r01)*(x659)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x660)))));
IKReal x661=(cj8)*(cj8);
IKReal x662=(sj8)*(sj8);
dummyeval[0]=((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r00)*(r01)*(x661)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x662)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x662)))+(((cj7)*(r10)*(r11)*(x661))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x663=(sj8)*(sj8);
IKReal x664=(cj8)*(cj8);
dummyeval[0]=((((x664)*((r01)*(r01))))+(((x663)*((r00)*(r00))))+(((x664)*((r11)*(r11))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((x663)*((r10)*(r10))))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x665=(sj8)*(sj8);
IKReal x666=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj7)*(r00)*(r11)*(x665)))+(((cj7)*(r00)*(r11)*(x666)))+(((cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x665)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x666)))+(((r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x667=(sj8)*(sj8);
IKReal x668=(cj8)*(cj8);
IKReal x669=((cj7)*(r01)*(r10)*(x667));
IKReal x670=((cj7)*(r01)*(r10)*(x668));
IKReal x671=((r00)*(r12)*(sj7)*(sj8));
IKReal x672=((cj8)*(r01)*(r12)*(sj7));
IKReal x673=((x669)+(x672)+(x670)+(x671));
IKReal x674=((cj7)*(r00)*(r11)*(x667));
IKReal x675=((cj7)*(r00)*(r11)*(x668));
IKReal x676=((cj8)*(r02)*(r11)*(sj7));
IKReal x677=((r02)*(r10)*(sj7)*(sj8));
IKReal x678=((x676)+(x677)+(x674)+(x675));
j3array[0]=IKatan2(((((IKabs(((x678)+(((-1.00000000000000)*(x673))))) != 0)?((IKReal)1/(((x678)+(((-1.00000000000000)*(x673)))))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((x673)+(((-1.00000000000000)*(x678))))) != 0)?((IKReal)1/(((x673)+(((-1.00000000000000)*(x678)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x679=(sj8)*(sj8);
IKReal x680=(cj8)*(cj8);
IKReal x681=(r11)*(r11);
IKReal x682=((x680)*(x681));
IKReal x683=(r00)*(r00);
IKReal x684=((x679)*(x683));
IKReal x685=(r10)*(r10);
IKReal x686=((x679)*(x685));
IKReal x687=(r01)*(r01);
IKReal x688=((x680)*(x687));
IKReal x689=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x690=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
IKReal x691=((x689)+(x688)+(x682)+(x686)+(x684)+(x690));
j3array[0]=IKatan2(((((IKabs(x691) != 0)?((IKReal)1/(x691)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((-1.00000000000000)*(((IKabs(x691) != 0)?((IKReal)1/(x691)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((gconst8)*(((((-1.00000000000000)*(cj4)*(cj8)*(r11)*(sj5)))+(((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj4)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))+(((-1.00000000000000)*(cj4)*(r10)*(sj5)*(sj8)))))), ((gconst8)*(((((-1.00000000000000)*(cj5)*(cj8)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj8)*(r01)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj4)*(r00)*(sj5)*(sj8)))+(((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
evalcond[1]=((-0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((-0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst9;
gconst9=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x692=(sj8)*(sj8);
IKReal x693=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(x693)*((r11)*(r11))))+(((-1.00000000000000)*(x692)*((r00)*(r00))))+(((-1.00000000000000)*(x693)*((r01)*(r01))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((-1.00000000000000)*(x692)*((r10)*(r10)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x694=(sj8)*(sj8);
IKReal x695=(cj8)*(cj8);
dummyeval[0]=((((cj7)*(r01)*(r10)*(x695)))+(((cj7)*(r01)*(r10)*(x694)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x694)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x695)))+(((r00)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x696=(sj8)*(sj8);
IKReal x697=(cj8)*(cj8);
IKReal x698=((cj7)*(r00)*(r11)*(x696));
IKReal x699=((cj7)*(r00)*(r11)*(x697));
IKReal x700=((cj8)*(r02)*(r11)*(sj7));
IKReal x701=((r02)*(r10)*(sj7)*(sj8));
IKReal x702=((x698)+(x699)+(x700)+(x701));
IKReal x703=((cj7)*(r01)*(r10)*(x696));
IKReal x704=((cj7)*(r01)*(r10)*(x697));
IKReal x705=((r00)*(r12)*(sj7)*(sj8));
IKReal x706=((cj8)*(r01)*(r12)*(sj7));
IKReal x707=((x703)+(x706)+(x704)+(x705));
j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x702)))+(x707))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x702)))+(x707)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x707)))+(x702))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x707)))+(x702)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst10;
gconst10=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst10)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst10)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x708=(sj8)*(sj8);
IKReal x709=(cj8)*(cj8);
IKReal x710=(r11)*(r11);
IKReal x711=((x709)*(x710));
IKReal x712=(r00)*(r00);
IKReal x713=((x708)*(x712));
IKReal x714=(r10)*(r10);
IKReal x715=((x708)*(x714));
IKReal x716=(r01)*(r01);
IKReal x717=((x709)*(x716));
IKReal x718=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x719=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
IKReal x720=((x719)+(x718)+(x711)+(x713)+(x715)+(x717));
j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x720) != 0)?((IKReal)1/(x720)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((((IKabs(x720) != 0)?((IKReal)1/(x720)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst10;
gconst10=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst10)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst10)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst9)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst9)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal gconst11;
IKReal x721=(cj8)*(cj8);
IKReal x722=(sj8)*(sj8);
gconst11=IKsign(((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x722)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj7)*(r00)*(r01)*(x721)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r10)*(r11)*(x721)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x722)))));
IKReal x723=(cj8)*(cj8);
IKReal x724=(sj8)*(sj8);
dummyeval[0]=((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x724)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj7)*(r00)*(r01)*(x723)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r10)*(r11)*(x723)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x724))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x725=(sj8)*(sj8);
IKReal x726=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(x726)*((r11)*(r11))))+(((-1.00000000000000)*(x725)*((r00)*(r00))))+(((-1.00000000000000)*(x726)*((r01)*(r01))))+(((-1.00000000000000)*(x725)*((r10)*(r10))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x727=(sj8)*(sj8);
IKReal x728=(cj8)*(cj8);
dummyeval[0]=((((cj7)*(r01)*(r10)*(x727)))+(((cj7)*(r01)*(r10)*(x728)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x728)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x727)))+(((r00)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x729=(sj8)*(sj8);
IKReal x730=(cj8)*(cj8);
IKReal x731=((cj7)*(r00)*(r11)*(x729));
IKReal x732=((cj7)*(r00)*(r11)*(x730));
IKReal x733=((cj8)*(r02)*(r11)*(sj7));
IKReal x734=((r02)*(r10)*(sj7)*(sj8));
IKReal x735=((x734)+(x733)+(x732)+(x731));
IKReal x736=((cj7)*(r01)*(r10)*(x729));
IKReal x737=((cj7)*(r01)*(r10)*(x730));
IKReal x738=((r00)*(r12)*(sj7)*(sj8));
IKReal x739=((cj8)*(r01)*(r12)*(sj7));
IKReal x740=((x737)+(x736)+(x739)+(x738));
j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x735)))+(x740))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x735)))+(x740)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((x735)+(((-1.00000000000000)*(x740))))) != 0)?((IKReal)1/(((x735)+(((-1.00000000000000)*(x740)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x741=(sj8)*(sj8);
IKReal x742=(cj8)*(cj8);
IKReal x743=(r11)*(r11);
IKReal x744=((x742)*(x743));
IKReal x745=(r00)*(r00);
IKReal x746=((x741)*(x745));
IKReal x747=(r10)*(r10);
IKReal x748=((x741)*(x747));
IKReal x749=(r01)*(r01);
IKReal x750=((x742)*(x749));
IKReal x751=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
IKReal x752=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
IKReal x753=((x751)+(x750)+(x752)+(x746)+(x744)+(x748));
j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x753) != 0)?((IKReal)1/(x753)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((((IKabs(x753) != 0)?((IKReal)1/(x753)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((gconst11)*(((((r02)*(sj7)))+(((-1.00000000000000)*(cj4)*(cj8)*(r11)*(sj5)))+(((cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj4)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj4)*(r10)*(sj5)*(sj8)))))), ((gconst11)*(((((-1.00000000000000)*(cj5)*(cj8)*(r01)*(sj4)))+(((cj7)*(r11)*(sj8)))+(((-1.00000000000000)*(cj4)*(cj8)*(r01)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj4)*(r00)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r12)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x754=(sj8)*(sj8);
IKReal x755=(cj8)*(cj8);
IKReal x756=((cj7)*(r01)*(r10)*(x754));
IKReal x757=((cj7)*(r01)*(r10)*(x755));
IKReal x758=((r00)*(r12)*(sj7)*(sj8));
IKReal x759=((cj8)*(r01)*(r12)*(sj7));
IKReal x760=((x757)+(x756)+(x759)+(x758));
IKReal x761=((cj7)*(r00)*(r11)*(x754));
IKReal x762=((cj7)*(r00)*(r11)*(x755));
IKReal x763=((cj8)*(r02)*(r11)*(sj7));
IKReal x764=((r02)*(r10)*(sj7)*(sj8));
IKReal x765=((x764)+(x761)+(x762)+(x763));
j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x760)))+(x765))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x760)))+(x765)))):(IKReal)1.0e30))*(((((cj6)*(r12)*(sj7)))+(((cj6)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj6)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x765)))+(x760))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x765)))+(x760)))):(IKReal)1.0e30))*(((((cj6)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj6)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[5]=((0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x766=(cj5)*(cj5);
IKReal x767=(sj5)*(sj5);
IKReal x768=((x766)+(x767));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x768) != 0)?((IKReal)1/(x768)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x768) != 0)?((IKReal)1/(x768)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x769=(cj5)*(cj5);
IKReal x770=(sj5)*(sj5);
IKReal x771=((x770)+(x769));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x771) != 0)?((IKReal)1/(x771)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x771) != 0)?((IKReal)1/(x771)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst4)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst4)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
evalcond[1]=((-0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[5]=((-0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst5;
gconst5=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst5)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst5)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst3)*(((((cj5)*(r20)*(sj8)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj5)*(cj8)*(r21)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))))), ((gconst3)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((gconst1)*(((((cj6)*(r11)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj6)))+(((-1.00000000000000)*(r10)*(sj6)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r10)*(sj7)))+(((cj6)*(cj7)*(r12)))))), ((gconst1)*(((((cj6)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(r00)*(sj6)*(sj8)))+(((cj6)*(cj7)*(r02)))+(((-1.00000000000000)*(cj8)*(r01)*(sj6)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[5]=((0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x772=(cj5)*(cj5);
IKReal x773=(sj5)*(sj5);
IKReal x774=((x773)+(x772));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x774) != 0)?((IKReal)1/(x774)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x774) != 0)?((IKReal)1/(x774)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x775=(cj5)*(cj5);
IKReal x776=(sj5)*(sj5);
IKReal x777=((x776)+(x775));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x777) != 0)?((IKReal)1/(x777)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x777) != 0)?((IKReal)1/(x777)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst4)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst4)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
evalcond[1]=((-0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[5]=((-0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst5;
gconst5=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst5)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst5)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst3)*(((((cj5)*(r20)*(sj8)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj5)*(cj8)*(r21)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))))), ((gconst3)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst2)*(((((cj5)*(r20)*(sj8)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj5)*(cj8)*(r21)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))))), ((gconst2)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IKReal dummyeval[1];
IKReal gconst6;
IKReal x778=(sj8)*(sj8);
IKReal x779=(cj8)*(cj8);
gconst6=IKsign(((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x778)))+(((r01)*(r10)*(sj7)*(x779)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x779)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x778)))));
IKReal x780=(sj8)*(sj8);
IKReal x781=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x780)))+(((r01)*(r10)*(sj7)*(x781)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x780)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x781))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x782=(sj8)*(sj8);
IKReal x783=(cj8)*(cj8);
dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((cj7)*(r00)*(r11)*(x782)))+(((cj7)*(r00)*(r11)*(x783)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x783)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x782)))+(((r02)*(r10)*(sj7)*(sj8))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
IKReal x784=(sj8)*(sj8);
IKReal x785=(cj8)*(cj8);
IKReal x786=((cj7)*(r01)*(r10)*(x784));
IKReal x787=((cj7)*(r01)*(r10)*(x785));
IKReal x788=((r00)*(r12)*(sj7)*(sj8));
IKReal x789=((cj8)*(r01)*(r12)*(sj7));
IKReal x790=((x786)+(x787)+(x788)+(x789));
IKReal x791=((cj7)*(r00)*(r11)*(x784));
IKReal x792=((cj7)*(r00)*(r11)*(x785));
IKReal x793=((cj8)*(r02)*(r11)*(sj7));
IKReal x794=((r02)*(r10)*(sj7)*(sj8));
IKReal x795=((x791)+(x793)+(x792)+(x794));
j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x790)))+(x795))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x790)))+(x795)))):(IKReal)1.0e30))*(((((cj6)*(r12)*(sj7)))+(((cj6)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj6)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x795)))+(x790))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x795)))+(x790)))):(IKReal)1.0e30))*(((((cj6)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj6)*(r02)*(sj7)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((gconst6)*(((((cj6)*(r11)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj6)))+(((-1.00000000000000)*(r10)*(sj6)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r10)*(sj7)))+(((cj6)*(cj7)*(r12)))))), ((gconst6)*(((((cj6)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(r00)*(sj6)*(sj8)))+(((cj6)*(cj7)*(r02)))+(((-1.00000000000000)*(cj8)*(r01)*(sj6)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
j3array[0]=IKatan2(((gconst0)*(((((cj6)*(r11)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj6)))+(((-1.00000000000000)*(r10)*(sj6)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r10)*(sj7)))+(((cj6)*(cj7)*(r12)))))), ((gconst0)*(((((cj6)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(r00)*(sj6)*(sj8)))+(((cj6)*(cj7)*(r02)))+(((-1.00000000000000)*(cj8)*(r01)*(sj6)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IKReal dummyeval[1];
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[7];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j6)), 6.28318530717959)));
evalcond[1]=((((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[2]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
evalcond[3]=((0.0950000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[4]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[5]=((1.00000000000000)+(((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
evalcond[6]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((0.120000000000000)+(((-4.00000000000000)*(cj8)*(npy)))+(((-4.00000000000000)*(npx)*(sj8)))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
IKReal gconst15;
gconst15=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst15)*(((((cj5)*(r20)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(cj8)*(r21)))))), ((gconst15)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj8)*(r21)*(sj5)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j6)), 6.28318530717959)));
evalcond[1]=((((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[2]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
evalcond[3]=((-0.0950000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[4]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[5]=((-1.00000000000000)+(((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
evalcond[6]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((cj3)*(cj8)*(r00)*(sj7))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((0.120000000000000)+(((4.00000000000000)*(cj8)*(npy)))+(((4.00000000000000)*(npx)*(sj8)))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
IKReal gconst16;
gconst16=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x796=(cj5)*(cj5);
IKReal x797=(sj5)*(sj5);
IKReal x798=((x797)+(x796));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x798) != 0)?((IKReal)1/(x798)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r20)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj8)*(r21)))))), ((((IKabs(x798) != 0)?((IKReal)1/(x798)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(r20)*(sj5)*(sj8)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst16)*(((((cj3)*(r00)*(sj5)*(sj8)))+(((cj5)*(r20)*(sj8)))+(((cj3)*(cj8)*(r01)*(sj5)))+(((r10)*(sj3)*(sj5)*(sj8)))+(((cj8)*(r11)*(sj3)*(sj5)))+(((cj5)*(cj8)*(r21)))))), ((gconst16)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj5)*(r00)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj8)*(r01)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj3)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[4]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[5]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[6]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((0.120000000000000)+(((-4.00000000000000)*(cj8)*(npx)*(sj7)))+(((4.00000000000000)*(cj7)*(npz)))+(((0.360000000000000)*(sj7)))+(((4.00000000000000)*(npy)*(sj7)*(sj8)))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
IKReal gconst17;
gconst17=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x799=(cj5)*(cj5);
IKReal x800=(sj5)*(sj5);
IKReal x801=((x799)+(x800));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x801) != 0)?((IKReal)1/(x801)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x801) != 0)?((IKReal)1/(x801)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x802=(cj5)*(cj5);
IKReal x803=(sj5)*(sj5);
IKReal x804=((x803)+(x802));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x804) != 0)?((IKReal)1/(x804)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x804) != 0)?((IKReal)1/(x804)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst17)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst17)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
evalcond[1]=((-0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[4]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[5]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[6]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((0.120000000000000)+(((4.00000000000000)*(cj8)*(npx)*(sj7)))+(((-4.00000000000000)*(cj7)*(npz)))+(((-0.360000000000000)*(sj7)))+(((-4.00000000000000)*(npy)*(sj7)*(sj8)))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
IKReal gconst18;
gconst18=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst18)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst18)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((((IKabs(cj6) != 0)?((IKReal)1/(cj6)):(IKReal)1.0e30))*(((((-4.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.120000000000000)*(cj6)))+(((0.380000000000000)*(sj6)))+(((4.00000000000000)*(cj7)*(npz)))+(((0.360000000000000)*(sj7)))+(((4.00000000000000)*(npy)*(sj7)*(sj8)))))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
IKReal gconst12;
gconst12=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[5]=((0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst13;
gconst13=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x805=(cj5)*(cj5);
IKReal x806=(sj5)*(sj5);
IKReal x807=((x805)+(x806));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x807) != 0)?((IKReal)1/(x807)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x807) != 0)?((IKReal)1/(x807)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x808=(cj5)*(cj5);
IKReal x809=(sj5)*(sj5);
IKReal x810=((x809)+(x808));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x810) != 0)?((IKReal)1/(x810)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x810) != 0)?((IKReal)1/(x810)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst13)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst13)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
evalcond[1]=((-0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[5]=((-0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst14;
gconst14=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst14)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst14)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst12)*(((((cj5)*(r20)*(sj8)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj5)*(cj8)*(r21)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))))), ((gconst12)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
j5array[0]=IKatan2(((((IKabs(sj6) != 0)?((IKReal)1/(sj6)):(IKReal)1.0e30))*(((((0.120000000000000)*(sj6)))+(((-0.380000000000000)*(cj6)))+(((-4.00000000000000)*(cj8)*(npy)))+(((-4.00000000000000)*(npx)*(sj8)))))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IKReal dummyeval[1];
IKReal gconst12;
gconst12=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
evalcond[1]=((0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[5]=((0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst13;
gconst13=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x811=(cj5)*(cj5);
IKReal x812=(sj5)*(sj5);
IKReal x813=((x812)+(x811));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x813) != 0)?((IKReal)1/(x813)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x813) != 0)?((IKReal)1/(x813)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
IKReal x814=(cj5)*(cj5);
IKReal x815=(sj5)*(sj5);
IKReal x816=((x814)+(x815));
j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x816) != 0)?((IKReal)1/(x816)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x816) != 0)?((IKReal)1/(x816)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst13)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst13)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
evalcond[1]=((-0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
evalcond[4]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
evalcond[5]=((-0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst14;
gconst14=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst14)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst14)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
j4array[0]=IKatan2(((gconst12)*(((((cj5)*(r20)*(sj8)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj5)*(cj8)*(r21)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))))), ((gconst12)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j3;
solution.basesol[1].foffset = j4;
solution.basesol[2].foffset = j5;
solution.basesol[3].foffset = j6;
solution.basesol[4].foffset = j7;
solution.basesol[5].foffset = j8;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

}

}
    }
}
return vsolutions.size()>0;
}

static inline bool checkconsistency8(const IKReal* Breal)
{
    IKReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    IKReal tol = 1e-5*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IKReal* matcoeffs, IKReal* rawroots, int& numroots)
{
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    IKReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IKReal IKFAST_ALIGNED16(A[8*8]);
    IKReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IKReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IKReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IKReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IKReal IKFAST_ALIGNED16(wr[16]);
    IKReal IKFAST_ALIGNED16(wi[16]);
    IKReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IKReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IKReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IKReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IKReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "375ffd5a1bd2565b9d93634412dce778"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(std::size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
