/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 41 generated on 2011-05-11 15:28:51.101446
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }
#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IKReal)6.28318530717959)
#define IKPI  ((IKReal)3.14159265358979)
#define IKPI_2  ((IKReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif							 // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C"
{
	void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
	void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
	void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
	void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
	void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
	void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}


using namespace std;			 // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
	#endif

	#ifdef IKFAST_REAL
	typedef IKFAST_REAL IKReal;
	#else
	typedef double IKReal;
	#endif

	class IKSolution
	{
		public:
			/// Gets a solution given its free parameters
			/// \param pfree The free parameters required, range is in [-pi,pi]
			void GetSolution(IKReal* psolution, const IKReal* pfree) const
			{
				for(std::size_t i = 0; i < basesol.size(); ++i)
				{
					if( basesol[i].freeind < 0 )
						psolution[i] = basesol[i].foffset;
					else
					{
						IKFAST_ASSERT(pfree != NULL);
						psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
						if( psolution[i] > IKPI )
						{
							psolution[i] -= IK2PI;
						}
						else if( psolution[i] < -IKPI )
						{
							psolution[i] += IK2PI;
						}
					}
				}
			}

			/// Gets the free parameters the solution requires to be set before a full solution can be returned
			/// \return vector of indices indicating the free parameters
			const std::vector<int>& GetFree() const { return vfree; }

			struct VARIABLE
			{
				VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
				VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
				int freeind;
								 ///< joint value is fmul*sol[freeind]+foffset
				IKReal fmul, foffset;
			};

								 ///< solution and their offsets if joints are mimiced
			std::vector<VARIABLE> basesol;
			std::vector<int> vfree;
	};

	inline float IKabs(float f) { return fabsf(f); }
	inline double IKabs(double f) { return fabs(f); }

	inline float IKlog(float f) { return logf(f); }
	inline double IKlog(double f) { return log(f); }

	#ifndef IKFAST_SINCOS_THRESH
	#define IKFAST_SINCOS_THRESH ((IKReal)0.000001)
	#endif

	inline float IKasin(float f)
	{
								 // any more error implies something is wrong with the solver
		IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH );
		if( f <= -1 ) return -IKPI_2;
		else if( f >= 1 ) return IKPI_2;
		return asinf(f);
	}
	inline double IKasin(double f)
	{
								 // any more error implies something is wrong with the solver
		IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH );
		if( f <= -1 ) return -IKPI_2;
		else if( f >= 1 ) return IKPI_2;
		return asin(f);
	}

	// return positive value in [0,y)
	inline float IKfmod(float x, float y)
	{
		while(x < 0)
		{
			x += y;
		}
		return fmodf(x,y);
	}

	// return positive value in [0,y)
	inline float IKfmod(double x, double y)
	{
		while(x < 0)
		{
			x += y;
		}
		return fmod(x,y);
	}

	inline float IKacos(float f)
	{
								 // any more error implies something is wrong with the solver
		IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH );
		if( f <= -1 ) return IKPI;
		else if( f >= 1 ) return 0;
		return acosf(f);
	}
	inline double IKacos(double f)
	{
								 // any more error implies something is wrong with the solver
		IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH );
		if( f <= -1 ) return IKPI;
		else if( f >= 1 ) return 0;
		return acos(f);
	}
	inline float IKsin(float f) { return sinf(f); }
	inline double IKsin(double f) { return sin(f); }
	inline float IKcos(float f) { return cosf(f); }
	inline double IKcos(double f) { return cos(f); }
	inline float IKtan(float f) { return tanf(f); }
	inline double IKtan(double f) { return tan(f); }
	inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
	inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
	inline float IKatan2(float fy, float fx)
	{
		if( isnan(fy) )
		{
								 // if both are nan, probably wrong value will be returned
			IKFAST_ASSERT(!isnan(fx));
			return IKPI_2;
		}
		else if( isnan(fx) )
		{
			return 0;
		}
		return atan2f(fy,fx);
	}
	inline double IKatan2(double fy, double fx)
	{
		if( isnan(fy) )
		{
								 // if both are nan, probably wrong value will be returned
			IKFAST_ASSERT(!isnan(fx));
			return IKPI_2;
		}
		else if( isnan(fx) )
		{
			return 0;
		}
		return atan2(fy,fx);
	}

	inline float IKsign(float f)
	{
		if( f > 0 )
		{
			return 1.0f;
		}
		else if( f < 0 )
		{
			return -1.0f;
		}
		return 0;
	}

	inline double IKsign(double f)
	{
		if( f > 0 )
		{
			return 1.0;
		}
		else if( f < 0 )
		{
			return -1.0;
		}
		return 0;
	}

	/// solves the forward kinematics equations.
	/// \param pfree is an array specifying the free joints of the chain.
	IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot)
	{
		IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85;
		x0=IKcos(j[0]);
		x1=IKcos(j[1]);
		x2=IKsin(j[2]);
		x3=IKcos(j[2]);
		x4=IKsin(j[1]);
		x5=IKsin(j[4]);
		x6=IKsin(j[0]);
		x7=IKsin(j[3]);
		x8=((x6)*(x7));
		x9=IKcos(j[3]);
		x10=((x0)*(x1)*(x3));
		x11=((x0)*(x2)*(x4));
		x12=((((-1.00000000000000)*(x11)))+(x10));
		x13=((x12)*(x9));
		x14=IKcos(j[4]);
		x15=((x0)*(x1)*(x2));
		x16=((x0)*(x3)*(x4));
		x17=((x15)+(x16));
		x18=((-1.00000000000000)*(x17));
		x19=IKsin(j[5]);
		x20=((x6)*(x9));
		x21=((((-1.00000000000000)*(x10)))+(x11));
		x22=((x21)*(x7));
		x23=IKcos(j[5]);
		x24=((((-1.00000000000000)*(x13)))+(x8));
		x25=((x24)*(x5));
		x26=((x14)*(x18));
		x27=((x25)+(x26));
		x28=((-1.00000000000000)*(x27));
		x29=((x1)*(x2));
		x30=((x3)*(x4));
		x31=((x30)+(x29));
		x32=((x2)*(x4));
		x33=((x1)*(x3));
		x34=((((-1.00000000000000)*(x33)))+(x32));
		x35=((x32)*(x6));
		x36=((x33)*(x6));
		x37=((x0)*(x7));
		x38=((((-1.00000000000000)*(x35)))+(x36));
		x39=((x38)*(x9));
		x40=((x39)+(x37));
		x41=((x29)*(x6));
		x42=((x30)*(x6));
		x43=((x42)+(x41));
		x44=((-1.00000000000000)*(x43));
		x45=((((-1.00000000000000)*(x36)))+(x35));
		x46=((x45)*(x7));
		x47=((x0)*(x9));
		x48=((x46)+(x47));
		x49=((x14)*(x34));
		x50=((x31)*(x5)*(x9));
		x51=((x49)+(x50));
		x52=((-1.00000000000000)*(x51));
		x53=((-1.00000000000000)*(x40));
		x54=((x5)*(x53));
		x55=((x14)*(x44));
		x56=((x55)+(x54));
		x57=((-1.00000000000000)*(x56));
		x58=((-1.00000000000000)*(x31));
		x59=((-1.00000000000000)*(x48));
		x60=((0.0900000000000000)*(x32));
		x61=((0.0900000000000000)*(x33));
		x62=((x60)+(((-1.00000000000000)*(x61))));
		x63=((0.0400000000000000)*(x33));
		x64=((0.0400000000000000)*(x32));
		x65=((x63)+(((-1.00000000000000)*(x64))));
		x66=((0.0900000000000000)*(x30));
		x67=((0.0900000000000000)*(x29));
		x68=((x66)+(x67));
		x69=((0.0400000000000000)*(x30));
		x70=((0.0400000000000000)*(x29));
		x71=((x70)+(x69));
		x72=((0.0900000000000000)*(x41));
		x73=((0.0900000000000000)*(x42));
		x74=((x73)+(x72));
		x75=((-1.00000000000000)*(x74));
		x76=((-0.0900000000000000)*(x39));
		x77=((-0.0900000000000000)*(x37));
		x78=((x77)+(x76));
		x79=((0.0400000000000000)*(x37));
		x80=((0.0400000000000000)*(x39));
		x81=((x79)+(x80));
		x82=((-1.00000000000000)*(x81));
		x83=((0.0400000000000000)*(x41));
		x84=((0.0400000000000000)*(x42));
		x85=((x83)+(x84));
		eerot[0]=((((x18)*(x5)))+(((x14)*(((x13)+(((-1.00000000000000)*(x8))))))));
		eerot[1]=((((x19)*(x28)))+(((x23)*(((((-1.00000000000000)*(x20)))+(x22))))));
		eerot[2]=((((x23)*(x28)))+(((x19)*(((((-1.00000000000000)*(x22)))+(x20))))));
		eetrans[0]=((((-0.250000000000000)*(x0)*(x4)))+(((0.0300000000000000)*(x11)))+(((-0.0300000000000000)*(x10)))+(((x5)*(((((0.0400000000000000)*(x15)))+(((0.0400000000000000)*(x16)))))))+(((x14)*(((((0.0400000000000000)*(x8)))+(((-0.0400000000000000)*(x13)))))))+(((x14)*(((((-0.0900000000000000)*(x16)))+(((-0.0900000000000000)*(x15)))))))+(((-0.235000000000000)*(x16)))+(((-0.235000000000000)*(x15)))+(((x5)*(((((-0.0900000000000000)*(x13)))+(((0.0900000000000000)*(x8)))))))+(((-0.0950000000000000)*(x6))));
		eerot[3]=((((0.965925532213041)*(x14)*(x40)))+(((0.258820142606703)*(x34)*(x5)))+(((0.965925532213041)*(x44)*(x5)))+(((0.258820142606703)*(x14)*(x58)*(x9))));
		eerot[4]=((((0.965925532213041)*(x19)*(x57)))+(((0.258820142606703)*(x23)*(x31)*(x7)))+(((0.258820142606703)*(x19)*(x52)))+(((0.965925532213041)*(x23)*(x48))));
		eerot[5]=((((0.965925532213041)*(x19)*(x59)))+(((0.258820142606703)*(x19)*(x58)*(x7)))+(((0.258820142606703)*(x23)*(x52)))+(((0.965925532213041)*(x23)*(x57))));
		eetrans[1]=((0.145000000000000)+(((0.965925532213041)*(x14)*(x82)))+(((-0.226992500070065)*(x42)))+(((-0.226992500070065)*(x41)))+(((0.0608227335125751)*(x32)))+(((0.965925532213041)*(x14)*(x75)))+(((0.258820142606703)*(x5)*(x65)))+(((0.00776460427820108)*(x30)))+(((0.258820142606703)*(x5)*(x68)*(x9)))+(((0.0917629255602389)*(x0)))+(((0.965925532213041)*(x5)*(x78)))+(((0.258820142606703)*(x14)*(x71)*(x9)))+(((-0.241481383053260)*(x4)*(x6)))+(((0.00776460427820108)*(x29)))+(((0.965925532213041)*(x5)*(x85)))+(((0.0289777659663912)*(x35)))+(((-0.0647050356516757)*(x1)))+(((0.258820142606703)*(x14)*(x62)))+(((-0.0608227335125751)*(x33)))+(((-0.0289777659663912)*(x36))));
		eerot[6]=((((0.965925532213041)*(x34)*(x5)))+(((0.965925532213041)*(x14)*(x58)*(x9)))+(((-0.258820142606703)*(x14)*(x40)))+(((-0.258820142606703)*(x44)*(x5))));
		eerot[7]=((((-0.258820142606703)*(x23)*(x48)))+(((0.965925532213041)*(x19)*(x52)))+(((-0.258820142606703)*(x19)*(x57)))+(((0.965925532213041)*(x23)*(x31)*(x7))));
		eerot[8]=((((0.965925532213041)*(x19)*(x58)*(x7)))+(((-0.258820142606703)*(x23)*(x57)))+(((-0.258820142606703)*(x19)*(x59)))+(((0.965925532213041)*(x23)*(x52))));
		eetrans[2]=((0.370296000000000)+(((-0.226992500070065)*(x33)))+(((0.0289777659663912)*(x29)))+(((0.226992500070065)*(x32)))+(((0.0608227335125751)*(x41)))+(((0.0608227335125751)*(x42)))+(((0.965925532213041)*(x5)*(x68)*(x9)))+(((0.965925532213041)*(x14)*(x62)))+(((0.00776460427820108)*(x36)))+(((-0.258820142606703)*(x14)*(x82)))+(((-0.0245879135476367)*(x0)))+(((0.965925532213041)*(x14)*(x71)*(x9)))+(((0.0647050356516757)*(x4)*(x6)))+(((0.0289777659663912)*(x30)))+(((-0.258820142606703)*(x5)*(x85)))+(((-0.00776460427820108)*(x35)))+(((0.965925532213041)*(x5)*(x65)))+(((-0.258820142606703)*(x5)*(x78)))+(((-0.258820142606703)*(x14)*(x75)))+(((-0.241481383053260)*(x1))));
	}

	IKFAST_API int getNumFreeParameters() { return 0; }
	IKFAST_API int* getFreeParameters() { return NULL; }
	IKFAST_API int getNumJoints() { return 6; }

	IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

	IKFAST_API int getIKType() { return 0x67000001; }

	class IKSolver
	{
		public:
			IKReal j13,cj13,sj13,htj13,j14,cj14,sj14,htj14,j15,cj15,sj15,htj15,j16,cj16,sj16,htj16,j17,cj17,sj17,htj17,j18,cj18,sj18,htj18,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;

			bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions)
			{
				for(int dummyiter = 0; dummyiter < 1; ++dummyiter)
				{
					vsolutions.resize(0); vsolutions.reserve(8);
					r00 = eerot[0*3+0];
					r01 = eerot[0*3+1];
					r02 = eerot[0*3+2];
					r10 = eerot[1*3+0];
					r11 = eerot[1*3+1];
					r12 = eerot[1*3+2];
					r20 = eerot[2*3+0];
					r21 = eerot[2*3+1];
					r22 = eerot[2*3+2];
					px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

					new_r00=((-1.00000000000000)*(r02));
					new_r01=r01;
					new_r02=r00;
					new_px=((((0.0400000000000000)*(r00)))+(px));
					new_r10=((((0.258820142606703)*(r22)))+(((-0.965925532213041)*(r12))));
					new_r11=((((-0.258820142606703)*(r21)))+(((0.965925532213041)*(r11))));
					new_r12=((((-0.258820142606703)*(r20)))+(((0.965925532213041)*(r10))));
					new_py=((-0.0442191386441994)+(((0.965925532213041)*(py)))+(((-0.258820142606703)*(pz)))+(((-0.0103528057042681)*(r20)))+(((0.0386370212885216)*(r10))));
					new_r20=((((-0.965925532213041)*(r22)))+(((-0.258820142606703)*(r12))));
					new_r21=((((0.965925532213041)*(r21)))+(((0.258820142606703)*(r11))));
					new_r22=((((0.965925532213041)*(r20)))+(((0.258820142606703)*(r10))));
					new_pz=((-0.395207281554332)+(((0.965925532213041)*(pz)))+(((0.0386370212885216)*(r20)))+(((0.258820142606703)*(py)))+(((0.0103528057042681)*(r10))));
					r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
					pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
					npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
					npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
					npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
					rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
					rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
					rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
					rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
					rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
					rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
					rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
					rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
					rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
					IKReal op[72], zeror[48];
					int numroots;
					IKReal x86=((0.0600000000000000)*(npz));
					IKReal x87=((0.650000000000000)*(npx));
					IKReal x88=((0.0600000000000000)*(npy));
					IKReal x89=((0.0950000000000000)*(r22));
					IKReal x90=((0.120000000000000)*(npx));
					IKReal x91=((-1.30000000000000)*(npy));
					IKReal x92=((-0.0950000000000000)*(r21));
					IKReal x93=((rxp0_2)+(x89));
					IKReal x94=((-0.190000000000000)*(r20));
					IKReal x95=((2.00000000000000)*(rxp1_2));
					IKReal x96=((0.0950000000000000)*(r21));
					IKReal x97=((0.940000000000000)*(npz));
					IKReal x98=((0.190000000000000)*(r20));
					IKReal x99=((2.00000000000000)*(rxp2_2));
					IKReal x100=((0.180000000000000)*(r21));
					IKReal x101=((0.360000000000000)*(r20));
					IKReal x102=((0.380000000000000)*(r21));
					IKReal x103=((0.00570000000000000)+(x88));
					IKReal x104=((0.290000000000000)*(npx));
					IKReal x105=((0.00570000000000000)+(((-1.00000000000000)*(x88))));
					IKReal x106=((rxp0_2)+(((-1.00000000000000)*(x89))));
					IKReal x107=((-1.00000000000000)*(x93));
					IKReal x108=((-0.0114000000000000)+(x103));
					IKReal x109=((0.580000000000000)*(npy));
					IKReal x110=((-0.00570000000000000)+(((-1.00000000000000)*(x88))));
					IKReal x111=((pp)+(x86));
					IKReal x112=((-2.00000000000000)*(rxp1_2));
					IKReal x113=((x89)+(((-1.00000000000000)*(rxp0_2))));
					op[0]=((-0.0350000000000000)+(((-1.00000000000000)*(x111)))+(x87));
					op[1]=x103;
					op[2]=x91;
					op[3]=x90;
					op[4]=((-0.0350000000000000)+(((-1.00000000000000)*(x111)))+(((-1.00000000000000)*(x87))));
					op[5]=x105;
					op[6]=x113;
					op[7]=x92;
					op[8]=x95;
					op[9]=x94;
					op[10]=x93;
					op[11]=x96;
					op[12]=x108;
					op[13]=((-0.0350000000000000)+(x86)+(x87)+(((-1.00000000000000)*(pp))));
					op[14]=x90;
					op[15]=x91;
					op[16]=x110;
					op[17]=((-0.0350000000000000)+(x86)+(((-1.00000000000000)*(x87)))+(((-1.00000000000000)*(pp))));
					op[18]=x92;
					op[19]=x107;
					op[20]=x94;
					op[21]=x95;
					op[22]=x96;
					op[23]=x106;
					op[24]=((-0.0108000000000000)+(x90)+(x97));
					op[25]=0;
					op[26]=((-0.240000000000000)*(npy));
					op[27]=0;
					op[28]=((-0.0108000000000000)+(x97)+(((-1.00000000000000)*(x90))));
					op[29]=0;
					op[30]=((x100)+(((-1.00000000000000)*(x98)))+(((-1.00000000000000)*(x99))));
					op[31]=0;
					op[32]=((x101)+(x102));
					op[33]=0;
					op[34]=((((-1.00000000000000)*(x100)))+(x98)+(((-1.00000000000000)*(x99))));
					op[35]=0;
					op[36]=0;
					op[37]=((0.0108000000000000)+(x97)+(((-1.00000000000000)*(x90))));
					op[38]=0;
					op[39]=((0.240000000000000)*(npy));
					op[40]=0;
					op[41]=((0.0108000000000000)+(x90)+(x97));
					op[42]=0;
					op[43]=((x100)+(x98)+(((-1.00000000000000)*(x99))));
					op[44]=0;
					op[45]=((((-1.00000000000000)*(x102)))+(x101));
					op[46]=0;
					op[47]=((((-1.00000000000000)*(x100)))+(((-1.00000000000000)*(x98)))+(((-1.00000000000000)*(x99))));
					op[48]=((0.0496000000000000)+(((-1.00000000000000)*(x104)))+(x86)+(((-1.00000000000000)*(pp))));
					op[49]=x103;
					op[50]=x109;
					op[51]=x90;
					op[52]=((0.0496000000000000)+(x104)+(x86)+(((-1.00000000000000)*(pp))));
					op[53]=x105;
					op[54]=x106;
					op[55]=x92;
					op[56]=x112;
					op[57]=x94;
					op[58]=x107;
					op[59]=x96;
					op[60]=x108;
					op[61]=((0.0496000000000000)+(((-1.00000000000000)*(x104)))+(((-1.00000000000000)*(x111))));
					op[62]=x90;
					op[63]=x109;
					op[64]=x110;
					op[65]=((0.0496000000000000)+(((-1.00000000000000)*(x111)))+(x104));
					op[66]=x92;
					op[67]=x93;
					op[68]=x94;
					op[69]=x112;
					op[70]=x96;
					op[71]=x113;
					solvedialyticpoly8qep(op,zeror,numroots);
					IKReal j17array[16], cj17array[16], sj17array[16], j18array[16], cj18array[16], sj18array[16], j16array[16], cj16array[16], sj16array[16];
					int numsolutions = 0;
					for(int ij17 = 0; ij17 < numroots; ij17 += 3)
					{
						IKReal htj17 = zeror[ij17+0], htj18 = zeror[ij17+1], htj16 = zeror[ij17+2];
						j17array[numsolutions]=((2.00000000000000)*(atan(htj17)));
						j18array[numsolutions]=((2.00000000000000)*(atan(htj18)));
						j16array[numsolutions]=((2.00000000000000)*(atan(htj16)));
						IKReal x114=(htj17)*(htj17);
						IKReal x115=(htj18)*(htj18);
						IKReal x116=(htj16)*(htj16);
						cj17array[numsolutions]=((((IKabs(((1.00000000000000)+(x114))) != 0)?((IKReal)1/(((1.00000000000000)+(x114)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x114))))));
						cj18array[numsolutions]=((((IKabs(((1.00000000000000)+(x115))) != 0)?((IKReal)1/(((1.00000000000000)+(x115)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x115))))));
						cj16array[numsolutions]=((((IKabs(((1.00000000000000)+(x116))) != 0)?((IKReal)1/(((1.00000000000000)+(x116)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x116))))));
						sj17array[numsolutions]=((2.00000000000000)*(htj17)*(((IKabs(((1.00000000000000)+((htj17)*(htj17)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj17)*(htj17))))):(IKReal)1.0e30)));
						sj18array[numsolutions]=((2.00000000000000)*(htj18)*(((IKabs(((1.00000000000000)+((htj18)*(htj18)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj18)*(htj18))))):(IKReal)1.0e30)));
						sj16array[numsolutions]=((2.00000000000000)*(htj16)*(((IKabs(((1.00000000000000)+((htj16)*(htj16)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj16)*(htj16))))):(IKReal)1.0e30)));
						if( j17array[numsolutions] > IKPI )
						{
							j17array[numsolutions]-=IK2PI;
						}
						else if( j17array[numsolutions] < -IKPI )
						{
							j17array[numsolutions]+=IK2PI;
						}
						if( j18array[numsolutions] > IKPI )
						{
							j18array[numsolutions]-=IK2PI;
						}
						else if( j18array[numsolutions] < -IKPI )
						{
							j18array[numsolutions]+=IK2PI;
						}
						if( j16array[numsolutions] > IKPI )
						{
							j16array[numsolutions]-=IK2PI;
						}
						else if( j16array[numsolutions] < -IKPI )
						{
							j16array[numsolutions]+=IK2PI;
						}
						bool valid = true;
						for( int kj17 = 0; kj17 < numsolutions; ++kj17)
						{
							if( IKabs(cj17array[kj17]-cj17array[numsolutions]) < 0.00001 && IKabs(sj17array[kj17]-sj17array[numsolutions]) < 0.00001 &&IKabs(cj18array[kj17]-cj18array[numsolutions]) < 0.00001 && IKabs(sj18array[kj17]-sj18array[numsolutions]) < 0.00001 &&IKabs(cj16array[kj17]-cj16array[numsolutions]) < 0.00001 && IKabs(sj16array[kj17]-sj16array[numsolutions]) < 0.00001 && 1 )
							{
								valid=false; break;
							}
						}
						if( valid ) { numsolutions++; }
					}
					for(int ij17 = 0; ij17 < numsolutions; ++ij17)
					{
						j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];

						j18 = j18array[ij17]; cj18 = cj18array[ij17]; sj18 = sj18array[ij17];

						j16 = j16array[ij17]; cj16 = cj16array[ij17]; sj16 = sj16array[ij17];

						{
							IKReal dummyeval[1];
							IKReal gconst0;
							IKReal x117=(cj18)*(cj18);
							IKReal x118=(sj18)*(sj18);
							gconst0=IKsign(((((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x117)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x118)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11)))+(((r01)*(r10)*(sj17)*(x117)))+(((r01)*(r10)*(sj17)*(x118)))));
							IKReal x119=(cj18)*(cj18);
							IKReal x120=(sj18)*(sj18);
							dummyeval[0]=((((r01)*(r10)*(sj17)*(x120)))+(((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x119)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x120)))+(((r01)*(r10)*(sj17)*(x119))));
							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
							{
								{
									IKReal dummyeval[1];
									dummyeval[0]=sj16;
									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
									{
										{
											IKReal dummyeval[1];
											dummyeval[0]=cj16;
											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
											{
												{
													IKReal evalcond[3];
													evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j16)), 6.28318530717959)));
													evalcond[1]=((((-1.00000000000000)*(cj18)*(r20)*(sj17)))+(((cj17)*(r22)))+(((r21)*(sj17)*(sj18))));
													evalcond[2]=((-0.0950000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
													if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
													{
														{
															IKReal j15array[1], cj15array[1], sj15array[1];
															bool j15valid[1]={false};
															j15array[0]=IKatan2(((0.120000000000000)+(((-4.00000000000000)*(cj18)*(npy)))+(((-4.00000000000000)*(npx)*(sj18)))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
															sj15array[0]=IKsin(j15array[0]);
															cj15array[0]=IKcos(j15array[0]);
															if( j15array[0] > IKPI )
															{
																j15array[0]-=IK2PI;
															}
															else if( j15array[0] < -IKPI )
															{
																j15array[0]+=IK2PI;
															}
															j15valid[0] = true;
															for(int ij15 = 0; ij15 < 1; ++ij15)
															{
																if( !j15valid[ij15] )
																{
																	continue;
																}
																j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

																{
																	IKReal dummyeval[1];
																	IKReal gconst19;
																	gconst19=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																	dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																	{
																		{
																			IKReal dummyeval[1];
																			IKReal x121=(cj18)*(cj18);
																			IKReal x122=(sj18)*(sj18);
																			dummyeval[0]=((((r01)*(r10)*(sj17)*(x122)))+(((r01)*(r10)*(sj17)*(x121)))+(((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x122)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x121))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				{
																					IKReal dummyeval[1];
																					IKReal x123=(sj17)*(sj17);
																					IKReal x124=(cj17)*(cj17);
																					dummyeval[0]=((((cj18)*(r00)*(r12)*(x123)))+(((cj18)*(r00)*(r12)*(x124)))+(((-1.00000000000000)*(r01)*(r12)*(sj18)*(x123)))+(((-1.00000000000000)*(r01)*(r12)*(sj18)*(x124)))+(((r02)*(r11)*(sj18)*(x124)))+(((r02)*(r11)*(sj18)*(x123)))+(((-1.00000000000000)*(cj18)*(r02)*(r10)*(x124)))+(((-1.00000000000000)*(cj18)*(r02)*(r10)*(x123))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						continue;

																					} else
																					{
																						{
																							IKReal j13array[1], cj13array[1], sj13array[1];
																							bool j13valid[1]={false};
																							IKReal x125=(sj17)*(sj17);
																							IKReal x126=(cj17)*(cj17);
																							IKReal x127=((r01)*(r12)*(sj18)*(x126));
																							IKReal x128=((cj18)*(r02)*(r10)*(x126));
																							IKReal x129=((r01)*(r12)*(sj18)*(x125));
																							IKReal x130=((cj18)*(r02)*(r10)*(x125));
																							IKReal x131=((x130)+(x127)+(x128)+(x129));
																							IKReal x132=((cj18)*(r00)*(r12)*(x126));
																							IKReal x133=((cj18)*(r00)*(r12)*(x125));
																							IKReal x134=((r02)*(r11)*(sj18)*(x125));
																							IKReal x135=((r02)*(r11)*(sj18)*(x126));
																							IKReal x136=((x135)+(x134)+(x133)+(x132));
																							j13array[0]=IKatan2(((((IKabs(((x136)+(((-1.00000000000000)*(x131))))) != 0)?((IKReal)1/(((x136)+(((-1.00000000000000)*(x131)))))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((x131)+(((-1.00000000000000)*(x136))))) != 0)?((IKReal)1/(((x131)+(((-1.00000000000000)*(x136)))))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
																							sj13array[0]=IKsin(j13array[0]);
																							cj13array[0]=IKcos(j13array[0]);
																							if( j13array[0] > IKPI )
																							{
																								j13array[0]-=IK2PI;
																							}
																							else if( j13array[0] < -IKPI )
																							{
																								j13array[0]+=IK2PI;
																							}
																							j13valid[0] = true;
																							for(int ij13 = 0; ij13 < 1; ++ij13)
																							{
																								if( !j13valid[ij13] )
																								{
																									continue;
																								}
																								j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																								{
																									IKReal dummyeval[1];
																									IKReal gconst20;
																									gconst20=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																									dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										continue;

																									} else
																									{
																										{
																											IKReal j14array[1], cj14array[1], sj14array[1];
																											bool j14valid[1]={false};
																											j14array[0]=IKatan2(((gconst20)*(((((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst20)*(((((r20)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r21)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																											sj14array[0]=IKsin(j14array[0]);
																											cj14array[0]=IKcos(j14array[0]);
																											if( j14array[0] > IKPI )
																											{
																												j14array[0]-=IK2PI;
																											}
																											else if( j14array[0] < -IKPI )
																											{
																												j14array[0]+=IK2PI;
																											}
																											j14valid[0] = true;
																											for(int ij14 = 0; ij14 < 1; ++ij14)
																											{
																												if( !j14valid[ij14] )
																												{
																													continue;
																												}
																												j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j13;
																													solution.basesol[1].foffset = j14;
																													solution.basesol[2].foffset = j15;
																													solution.basesol[3].foffset = j16;
																													solution.basesol[4].foffset = j17;
																													solution.basesol[5].foffset = j18;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}
																							}
																						}

																					}

																				}

																			} else
																			{
																				{
																					IKReal j13array[1], cj13array[1], sj13array[1];
																					bool j13valid[1]={false};
																					IKReal x137=(cj18)*(cj18);
																					IKReal x138=(sj18)*(sj18);
																					IKReal x139=((r00)*(r11)*(sj17)*(x137));
																					IKReal x140=((cj17)*(cj18)*(r01)*(r12));
																					IKReal x141=((r00)*(r11)*(sj17)*(x138));
																					IKReal x142=((cj17)*(r00)*(r12)*(sj18));
																					IKReal x143=((x140)+(x141)+(x142)+(x139));
																					IKReal x144=((r01)*(r10)*(sj17)*(x137));
																					IKReal x145=((r01)*(r10)*(sj17)*(x138));
																					IKReal x146=((cj17)*(r02)*(r10)*(sj18));
																					IKReal x147=((cj17)*(cj18)*(r02)*(r11));
																					IKReal x148=((x144)+(x145)+(x146)+(x147));
																					j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x143)))+(x148))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x143)))+(x148)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))), ((((IKabs(((((-1.00000000000000)*(x148)))+(x143))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x148)))+(x143)))):(IKReal)1.0e30))*(((((cj18)*(r01)))+(((r00)*(sj18)))))));
																					sj13array[0]=IKsin(j13array[0]);
																					cj13array[0]=IKcos(j13array[0]);
																					if( j13array[0] > IKPI )
																					{
																						j13array[0]-=IK2PI;
																					}
																					else if( j13array[0] < -IKPI )
																					{
																						j13array[0]+=IK2PI;
																					}
																					j13valid[0] = true;
																					for(int ij13 = 0; ij13 < 1; ++ij13)
																					{
																						if( !j13valid[ij13] )
																						{
																							continue;
																						}
																						j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																						{
																							IKReal dummyeval[1];
																							IKReal gconst20;
																							gconst20=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																							dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								continue;

																							} else
																							{
																								{
																									IKReal j14array[1], cj14array[1], sj14array[1];
																									bool j14valid[1]={false};
																									j14array[0]=IKatan2(((gconst20)*(((((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst20)*(((((r20)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r21)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																									sj14array[0]=IKsin(j14array[0]);
																									cj14array[0]=IKcos(j14array[0]);
																									if( j14array[0] > IKPI )
																									{
																										j14array[0]-=IK2PI;
																									}
																									else if( j14array[0] < -IKPI )
																									{
																										j14array[0]+=IK2PI;
																									}
																									j14valid[0] = true;
																									for(int ij14 = 0; ij14 < 1; ++ij14)
																									{
																										if( !j14valid[ij14] )
																										{
																											continue;
																										}
																										j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j13;
																											solution.basesol[1].foffset = j14;
																											solution.basesol[2].foffset = j15;
																											solution.basesol[3].foffset = j16;
																											solution.basesol[4].foffset = j17;
																											solution.basesol[5].foffset = j18;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}
																					}
																				}

																			}

																		}

																	} else
																	{
																		{
																			IKReal j14array[1], cj14array[1], sj14array[1];
																			bool j14valid[1]={false};
																			j14array[0]=IKatan2(((gconst19)*(((((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst19)*(((((r20)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r21)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																			sj14array[0]=IKsin(j14array[0]);
																			cj14array[0]=IKcos(j14array[0]);
																			if( j14array[0] > IKPI )
																			{
																				j14array[0]-=IK2PI;
																			}
																			else if( j14array[0] < -IKPI )
																			{
																				j14array[0]+=IK2PI;
																			}
																			j14valid[0] = true;
																			for(int ij14 = 0; ij14 < 1; ++ij14)
																			{
																				if( !j14valid[ij14] )
																				{
																					continue;
																				}
																				j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																				{
																					IKReal dummyeval[1];
																					IKReal x149=(cj18)*(cj18);
																					IKReal x150=(sj18)*(sj18);
																					dummyeval[0]=((((r01)*(r10)*(sj17)*(x150)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x150)))+(((r01)*(r10)*(sj17)*(x149)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x149)))+(((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							IKReal x151=(sj18)*(sj18);
																							IKReal x152=(cj18)*(cj18);
																							dummyeval[0]=((((-2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((-1.00000000000000)*(x151)*((r00)*(r00))))+(((-1.00000000000000)*(x151)*((r10)*(r10))))+(((-2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((-1.00000000000000)*(x152)*((r11)*(r11))))+(((-1.00000000000000)*(x152)*((r01)*(r01)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									IKReal x153=(cj18)*(cj18);
																									IKReal x154=(sj18)*(sj18);
																									dummyeval[0]=((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r10)*(r11)*(x153)))+(((cj17)*(r00)*(r01)*(x153)))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x154)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x154)))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((r00)*(r02)*(sj17)*(sj18)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										continue;

																									} else
																									{
																										{
																											IKReal j13array[1], cj13array[1], sj13array[1];
																											bool j13valid[1]={false};
																											IKReal x155=(cj18)*(cj18);
																											IKReal x156=(sj18)*(sj18);
																											IKReal x157=((cj17)*(r00)*(r01)*(x156));
																											IKReal x158=(r11)*(r11);
																											IKReal x159=((cj17)*(cj18)*(sj18)*(x158));
																											IKReal x160=(r01)*(r01);
																											IKReal x161=((cj17)*(cj18)*(sj18)*(x160));
																											IKReal x162=((cj17)*(r10)*(r11)*(x156));
																											IKReal x163=((x162)+(x161)+(x157)+(x159));
																											IKReal x164=(r10)*(r10);
																											IKReal x165=((cj17)*(cj18)*(sj18)*(x164));
																											IKReal x166=((cj18)*(r11)*(r12)*(sj17));
																											IKReal x167=((cj17)*(r10)*(r11)*(x155));
																											IKReal x168=(r00)*(r00);
																											IKReal x169=((cj17)*(cj18)*(sj18)*(x168));
																											IKReal x170=((cj17)*(r00)*(r01)*(x155));
																											IKReal x171=((r00)*(r02)*(sj17)*(sj18));
																											IKReal x172=((cj18)*(r01)*(r02)*(sj17));
																											IKReal x173=((r10)*(r12)*(sj17)*(sj18));
																											IKReal x174=((x171)+(x170)+(x173)+(x172)+(x169)+(x166)+(x167)+(x165));
																											j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x163)))+(x174))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x163)))+(x174)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj14)))+(((-1.00000000000000)*(cj15)*(r10)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj14)*(r10)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj14)*(cj18)*(r11)*(sj15)))))), ((((IKabs(((((-1.00000000000000)*(x174)))+(x163))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x174)))+(x163)))):(IKReal)1.0e30))*(((((cj14)*(cj18)*(r01)*(sj15)))+(((cj15)*(r00)*(sj14)*(sj18)))+(((cj15)*(cj18)*(r01)*(sj14)))+(((cj14)*(r00)*(sj15)*(sj18)))))));
																											sj13array[0]=IKsin(j13array[0]);
																											cj13array[0]=IKcos(j13array[0]);
																											if( j13array[0] > IKPI )
																											{
																												j13array[0]-=IK2PI;
																											}
																											else if( j13array[0] < -IKPI )
																											{
																												j13array[0]+=IK2PI;
																											}
																											j13valid[0] = true;
																											for(int ij13 = 0; ij13 < 1; ++ij13)
																											{
																												if( !j13valid[ij13] )
																												{
																													continue;
																												}
																												j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j13;
																													solution.basesol[1].foffset = j14;
																													solution.basesol[2].foffset = j15;
																													solution.basesol[3].foffset = j16;
																													solution.basesol[4].foffset = j17;
																													solution.basesol[5].foffset = j18;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j13array[1], cj13array[1], sj13array[1];
																									bool j13valid[1]={false};
																									IKReal x175=(sj18)*(sj18);
																									IKReal x176=(cj18)*(cj18);
																									IKReal x177=(r10)*(r10);
																									IKReal x178=((x175)*(x177));
																									IKReal x179=(r00)*(r00);
																									IKReal x180=((x175)*(x179));
																									IKReal x181=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
																									IKReal x182=(r01)*(r01);
																									IKReal x183=((x176)*(x182));
																									IKReal x184=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
																									IKReal x185=(r11)*(r11);
																									IKReal x186=((x176)*(x185));
																									IKReal x187=((x178)+(x184)+(x186)+(x180)+(x181)+(x183));
																									j13array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x187) != 0)?((IKReal)1/(x187)):(IKReal)1.0e30))*(((((cj14)*(cj15)*(r10)*(sj18)))+(((-1.00000000000000)*(r10)*(sj14)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj14)*(sj15)))+(((cj14)*(cj15)*(cj18)*(r11)))))), ((((IKabs(x187) != 0)?((IKReal)1/(x187)):(IKReal)1.0e30))*(((((r00)*(sj14)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj14)*(cj15)*(cj18)*(r01)))+(((cj18)*(r01)*(sj14)*(sj15)))+(((-1.00000000000000)*(cj14)*(cj15)*(r00)*(sj18)))))));
																									sj13array[0]=IKsin(j13array[0]);
																									cj13array[0]=IKcos(j13array[0]);
																									if( j13array[0] > IKPI )
																									{
																										j13array[0]-=IK2PI;
																									}
																									else if( j13array[0] < -IKPI )
																									{
																										j13array[0]+=IK2PI;
																									}
																									j13valid[0] = true;
																									for(int ij13 = 0; ij13 < 1; ++ij13)
																									{
																										if( !j13valid[ij13] )
																										{
																											continue;
																										}
																										j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j13;
																											solution.basesol[1].foffset = j14;
																											solution.basesol[2].foffset = j15;
																											solution.basesol[3].foffset = j16;
																											solution.basesol[4].foffset = j17;
																											solution.basesol[5].foffset = j18;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j13array[1], cj13array[1], sj13array[1];
																							bool j13valid[1]={false};
																							IKReal x188=(cj18)*(cj18);
																							IKReal x189=(sj18)*(sj18);
																							IKReal x190=((r00)*(r11)*(sj17)*(x188));
																							IKReal x191=((cj17)*(cj18)*(r01)*(r12));
																							IKReal x192=((r00)*(r11)*(sj17)*(x189));
																							IKReal x193=((cj17)*(r00)*(r12)*(sj18));
																							IKReal x194=((x193)+(x192)+(x191)+(x190));
																							IKReal x195=((r01)*(r10)*(sj17)*(x188));
																							IKReal x196=((r01)*(r10)*(sj17)*(x189));
																							IKReal x197=((cj17)*(r02)*(r10)*(sj18));
																							IKReal x198=((cj17)*(cj18)*(r02)*(r11));
																							IKReal x199=((x198)+(x197)+(x196)+(x195));
																							j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x194)))+(x199))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x194)))+(x199)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))), ((((IKabs(((((-1.00000000000000)*(x199)))+(x194))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x199)))+(x194)))):(IKReal)1.0e30))*(((((cj18)*(r01)))+(((r00)*(sj18)))))));
																							sj13array[0]=IKsin(j13array[0]);
																							cj13array[0]=IKcos(j13array[0]);
																							if( j13array[0] > IKPI )
																							{
																								j13array[0]-=IK2PI;
																							}
																							else if( j13array[0] < -IKPI )
																							{
																								j13array[0]+=IK2PI;
																							}
																							j13valid[0] = true;
																							for(int ij13 = 0; ij13 < 1; ++ij13)
																							{
																								if( !j13valid[ij13] )
																								{
																									continue;
																								}
																								j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j13;
																									solution.basesol[1].foffset = j14;
																									solution.basesol[2].foffset = j15;
																									solution.basesol[3].foffset = j16;
																									solution.basesol[4].foffset = j17;
																									solution.basesol[5].foffset = j18;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}
																			}
																		}

																	}

																}
															}
														}

													} else
													{
														evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j16)), 6.28318530717959)));
														evalcond[1]=((((-1.00000000000000)*(cj18)*(r20)*(sj17)))+(((cj17)*(r22)))+(((r21)*(sj17)*(sj18))));
														evalcond[2]=((0.0950000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
														if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
														{
															{
																IKReal j15array[1], cj15array[1], sj15array[1];
																bool j15valid[1]={false};
																j15array[0]=IKatan2(((0.120000000000000)+(((4.00000000000000)*(cj18)*(npy)))+(((4.00000000000000)*(npx)*(sj18)))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
																sj15array[0]=IKsin(j15array[0]);
																cj15array[0]=IKcos(j15array[0]);
																if( j15array[0] > IKPI )
																{
																	j15array[0]-=IK2PI;
																}
																else if( j15array[0] < -IKPI )
																{
																	j15array[0]+=IK2PI;
																}
																j15valid[0] = true;
																for(int ij15 = 0; ij15 < 1; ++ij15)
																{
																	if( !j15valid[ij15] )
																	{
																		continue;
																	}
																	j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

																	{
																		IKReal dummyeval[1];
																		dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																		if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																		{
																			{
																				IKReal dummyeval[1];
																				IKReal x200=(cj18)*(cj18);
																				IKReal x201=(sj18)*(sj18);
																				dummyeval[0]=((((-1.00000000000000)*(cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r01)*(r12)))+(((cj17)*(r00)*(r12)*(sj18)))+(((-1.00000000000000)*(r01)*(r10)*(sj17)*(x201)))+(((-1.00000000000000)*(r01)*(r10)*(sj17)*(x200)))+(((r00)*(r11)*(sj17)*(x201)))+(((r00)*(r11)*(sj17)*(x200)))+(((-1.00000000000000)*(cj17)*(cj18)*(r02)*(r11))));
																				if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																				{
																					{
																						IKReal dummyeval[1];
																						IKReal x202=(cj17)*(cj17);
																						IKReal x203=(sj17)*(sj17);
																						dummyeval[0]=((((-1.00000000000000)*(cj18)*(r00)*(r12)*(x202)))+(((-1.00000000000000)*(cj18)*(r00)*(r12)*(x203)))+(((r01)*(r12)*(sj18)*(x202)))+(((r01)*(r12)*(sj18)*(x203)))+(((-1.00000000000000)*(r02)*(r11)*(sj18)*(x202)))+(((-1.00000000000000)*(r02)*(r11)*(sj18)*(x203)))+(((cj18)*(r02)*(r10)*(x203)))+(((cj18)*(r02)*(r10)*(x202))));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							continue;

																						} else
																						{
																							{
																								IKReal j13array[1], cj13array[1], sj13array[1];
																								bool j13valid[1]={false};
																								IKReal x204=(cj17)*(cj17);
																								IKReal x205=(sj17)*(sj17);
																								IKReal x206=((cj18)*(r00)*(r12)*(x204));
																								IKReal x207=((cj18)*(r00)*(r12)*(x205));
																								IKReal x208=((r02)*(r11)*(sj18)*(x205));
																								IKReal x209=((r02)*(r11)*(sj18)*(x204));
																								IKReal x210=((x207)+(x206)+(x209)+(x208));
																								IKReal x211=((r01)*(r12)*(sj18)*(x204));
																								IKReal x212=((cj18)*(r02)*(r10)*(x204));
																								IKReal x213=((r01)*(r12)*(sj18)*(x205));
																								IKReal x214=((cj18)*(r02)*(r10)*(x205));
																								IKReal x215=((x211)+(x212)+(x213)+(x214));
																								j13array[0]=IKatan2(((((IKabs(((x215)+(((-1.00000000000000)*(x210))))) != 0)?((IKReal)1/(((x215)+(((-1.00000000000000)*(x210)))))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((x210)+(((-1.00000000000000)*(x215))))) != 0)?((IKReal)1/(((x210)+(((-1.00000000000000)*(x215)))))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
																								sj13array[0]=IKsin(j13array[0]);
																								cj13array[0]=IKcos(j13array[0]);
																								if( j13array[0] > IKPI )
																								{
																									j13array[0]-=IK2PI;
																								}
																								else if( j13array[0] < -IKPI )
																								{
																									j13array[0]+=IK2PI;
																								}
																								j13valid[0] = true;
																								for(int ij13 = 0; ij13 < 1; ++ij13)
																								{
																									if( !j13valid[ij13] )
																									{
																										continue;
																									}
																									j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																									{
																										IKReal dummyeval[1];
																										IKReal gconst21;
																										gconst21=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																										dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											{
																												IKReal dummyeval[1];
																												dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																												if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																												{
																													continue;

																												} else
																												{
																													{
																														IKReal j14array[1], cj14array[1], sj14array[1];
																														bool j14valid[1]={false};
																														IKReal x216=(cj15)*(cj15);
																														IKReal x217=(sj15)*(sj15);
																														IKReal x218=((x216)+(x217));
																														j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x218) != 0)?((IKReal)1/(x218)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x218) != 0)?((IKReal)1/(x218)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r20)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																														sj14array[0]=IKsin(j14array[0]);
																														cj14array[0]=IKcos(j14array[0]);
																														if( j14array[0] > IKPI )
																														{
																															j14array[0]-=IK2PI;
																														}
																														else if( j14array[0] < -IKPI )
																														{
																															j14array[0]+=IK2PI;
																														}
																														j14valid[0] = true;
																														for(int ij14 = 0; ij14 < 1; ++ij14)
																														{
																															if( !j14valid[ij14] )
																															{
																																continue;
																															}
																															j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																															{
																																vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																solution.basesol.resize(6);
																																solution.basesol[0].foffset = j13;
																																solution.basesol[1].foffset = j14;
																																solution.basesol[2].foffset = j15;
																																solution.basesol[3].foffset = j16;
																																solution.basesol[4].foffset = j17;
																																solution.basesol[5].foffset = j18;
																																solution.vfree.resize(0);
																															}
																														}
																													}

																												}

																											}

																										} else
																										{
																											{
																												IKReal j14array[1], cj14array[1], sj14array[1];
																												bool j14valid[1]={false};
																												j14array[0]=IKatan2(((gconst21)*(((((r10)*(sj13)*(sj15)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj13)*(r00)*(sj15)*(sj18)))+(((cj15)*(r20)*(sj18)))+(((cj13)*(cj18)*(r01)*(sj15)))+(((cj18)*(r11)*(sj13)*(sj15)))))), ((gconst21)*(((((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj13)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(r00)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj18)*(r01)))))));
																												sj14array[0]=IKsin(j14array[0]);
																												cj14array[0]=IKcos(j14array[0]);
																												if( j14array[0] > IKPI )
																												{
																													j14array[0]-=IK2PI;
																												}
																												else if( j14array[0] < -IKPI )
																												{
																													j14array[0]+=IK2PI;
																												}
																												j14valid[0] = true;
																												for(int ij14 = 0; ij14 < 1; ++ij14)
																												{
																													if( !j14valid[ij14] )
																													{
																														continue;
																													}
																													j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j13;
																														solution.basesol[1].foffset = j14;
																														solution.basesol[2].foffset = j15;
																														solution.basesol[3].foffset = j16;
																														solution.basesol[4].foffset = j17;
																														solution.basesol[5].foffset = j18;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}
																								}
																							}

																						}

																					}

																				} else
																				{
																					{
																						IKReal j13array[1], cj13array[1], sj13array[1];
																						bool j13valid[1]={false};
																						IKReal x219=(cj18)*(cj18);
																						IKReal x220=(sj18)*(sj18);
																						IKReal x221=((r01)*(r10)*(sj17)*(x219));
																						IKReal x222=((r01)*(r10)*(sj17)*(x220));
																						IKReal x223=((cj17)*(r02)*(r10)*(sj18));
																						IKReal x224=((cj17)*(cj18)*(r02)*(r11));
																						IKReal x225=((x221)+(x223)+(x222)+(x224));
																						IKReal x226=((r00)*(r11)*(sj17)*(x219));
																						IKReal x227=((cj17)*(cj18)*(r01)*(r12));
																						IKReal x228=((r00)*(r11)*(sj17)*(x220));
																						IKReal x229=((cj17)*(r00)*(r12)*(sj18));
																						IKReal x230=((x229)+(x228)+(x227)+(x226));
																						j13array[0]=IKatan2(((((IKabs(((x230)+(((-1.00000000000000)*(x225))))) != 0)?((IKReal)1/(((x230)+(((-1.00000000000000)*(x225)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))), ((((IKabs(((((-1.00000000000000)*(x230)))+(x225))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x230)))+(x225)))):(IKReal)1.0e30))*(((((cj18)*(r01)))+(((r00)*(sj18)))))));
																						sj13array[0]=IKsin(j13array[0]);
																						cj13array[0]=IKcos(j13array[0]);
																						if( j13array[0] > IKPI )
																						{
																							j13array[0]-=IK2PI;
																						}
																						else if( j13array[0] < -IKPI )
																						{
																							j13array[0]+=IK2PI;
																						}
																						j13valid[0] = true;
																						for(int ij13 = 0; ij13 < 1; ++ij13)
																						{
																							if( !j13valid[ij13] )
																							{
																								continue;
																							}
																							j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																							{
																								IKReal dummyeval[1];
																								IKReal gconst21;
																								gconst21=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																								dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									{
																										IKReal dummyeval[1];
																										dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											continue;

																										} else
																										{
																											{
																												IKReal j14array[1], cj14array[1], sj14array[1];
																												bool j14valid[1]={false};
																												IKReal x231=(cj15)*(cj15);
																												IKReal x232=(sj15)*(sj15);
																												IKReal x233=((x232)+(x231));
																												j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x233) != 0)?((IKReal)1/(x233)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x233) != 0)?((IKReal)1/(x233)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r20)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																												sj14array[0]=IKsin(j14array[0]);
																												cj14array[0]=IKcos(j14array[0]);
																												if( j14array[0] > IKPI )
																												{
																													j14array[0]-=IK2PI;
																												}
																												else if( j14array[0] < -IKPI )
																												{
																													j14array[0]+=IK2PI;
																												}
																												j14valid[0] = true;
																												for(int ij14 = 0; ij14 < 1; ++ij14)
																												{
																													if( !j14valid[ij14] )
																													{
																														continue;
																													}
																													j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j13;
																														solution.basesol[1].foffset = j14;
																														solution.basesol[2].foffset = j15;
																														solution.basesol[3].foffset = j16;
																														solution.basesol[4].foffset = j17;
																														solution.basesol[5].foffset = j18;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}

																								} else
																								{
																									{
																										IKReal j14array[1], cj14array[1], sj14array[1];
																										bool j14valid[1]={false};
																										j14array[0]=IKatan2(((gconst21)*(((((r10)*(sj13)*(sj15)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj13)*(r00)*(sj15)*(sj18)))+(((cj15)*(r20)*(sj18)))+(((cj13)*(cj18)*(r01)*(sj15)))+(((cj18)*(r11)*(sj13)*(sj15)))))), ((gconst21)*(((((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj13)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(r00)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj18)*(r01)))))));
																										sj14array[0]=IKsin(j14array[0]);
																										cj14array[0]=IKcos(j14array[0]);
																										if( j14array[0] > IKPI )
																										{
																											j14array[0]-=IK2PI;
																										}
																										else if( j14array[0] < -IKPI )
																										{
																											j14array[0]+=IK2PI;
																										}
																										j14valid[0] = true;
																										for(int ij14 = 0; ij14 < 1; ++ij14)
																										{
																											if( !j14valid[ij14] )
																											{
																												continue;
																											}
																											j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																											{
																												vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																												solution.basesol.resize(6);
																												solution.basesol[0].foffset = j13;
																												solution.basesol[1].foffset = j14;
																												solution.basesol[2].foffset = j15;
																												solution.basesol[3].foffset = j16;
																												solution.basesol[4].foffset = j17;
																												solution.basesol[5].foffset = j18;
																												solution.vfree.resize(0);
																											}
																										}
																									}

																								}

																							}
																						}
																					}

																				}

																			}

																		} else
																		{
																			{
																				IKReal j14array[1], cj14array[1], sj14array[1];
																				bool j14valid[1]={false};
																				IKReal x234=(cj15)*(cj15);
																				IKReal x235=(sj15)*(sj15);
																				IKReal x236=((x234)+(x235));
																				j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x236) != 0)?((IKReal)1/(x236)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x236) != 0)?((IKReal)1/(x236)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r20)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																				sj14array[0]=IKsin(j14array[0]);
																				cj14array[0]=IKcos(j14array[0]);
																				if( j14array[0] > IKPI )
																				{
																					j14array[0]-=IK2PI;
																				}
																				else if( j14array[0] < -IKPI )
																				{
																					j14array[0]+=IK2PI;
																				}
																				j14valid[0] = true;
																				for(int ij14 = 0; ij14 < 1; ++ij14)
																				{
																					if( !j14valid[ij14] )
																					{
																						continue;
																					}
																					j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																					{
																						IKReal dummyeval[1];
																						IKReal x237=(cj18)*(cj18);
																						IKReal x238=(sj18)*(sj18);
																						dummyeval[0]=((((-1.00000000000000)*(cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r01)*(r12)))+(((cj17)*(r00)*(r12)*(sj18)))+(((-1.00000000000000)*(r01)*(r10)*(sj17)*(x238)))+(((-1.00000000000000)*(r01)*(r10)*(sj17)*(x237)))+(((r00)*(r11)*(sj17)*(x238)))+(((r00)*(r11)*(sj17)*(x237)))+(((-1.00000000000000)*(cj17)*(cj18)*(r02)*(r11))));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							{
																								IKReal dummyeval[1];
																								IKReal x239=(sj18)*(sj18);
																								IKReal x240=(cj18)*(cj18);
																								dummyeval[0]=((((-1.00000000000000)*(x239)*((r10)*(r10))))+(((-2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((-1.00000000000000)*(x240)*((r01)*(r01))))+(((-2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((-1.00000000000000)*(x239)*((r00)*(r00))))+(((-1.00000000000000)*(x240)*((r11)*(r11)))));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									{
																										IKReal dummyeval[1];
																										IKReal x241=(cj18)*(cj18);
																										IKReal x242=(sj18)*(sj18);
																										dummyeval[0]=((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((cj17)*(r10)*(r11)*(x241)))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj17)*(r00)*(r01)*(x241)))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((r00)*(r02)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x242)))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x242)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18))));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											continue;

																										} else
																										{
																											{
																												IKReal j13array[1], cj13array[1], sj13array[1];
																												bool j13valid[1]={false};
																												IKReal x243=(cj18)*(cj18);
																												IKReal x244=(sj18)*(sj18);
																												IKReal x245=((cj17)*(r00)*(r01)*(x244));
																												IKReal x246=(r11)*(r11);
																												IKReal x247=((cj17)*(cj18)*(sj18)*(x246));
																												IKReal x248=(r01)*(r01);
																												IKReal x249=((cj17)*(cj18)*(sj18)*(x248));
																												IKReal x250=((cj17)*(r10)*(r11)*(x244));
																												IKReal x251=((x250)+(x247)+(x245)+(x249));
																												IKReal x252=(r10)*(r10);
																												IKReal x253=((cj17)*(cj18)*(sj18)*(x252));
																												IKReal x254=((cj18)*(r11)*(r12)*(sj17));
																												IKReal x255=((cj17)*(r10)*(r11)*(x243));
																												IKReal x256=(r00)*(r00);
																												IKReal x257=((cj17)*(cj18)*(sj18)*(x256));
																												IKReal x258=((cj17)*(r00)*(r01)*(x243));
																												IKReal x259=((r00)*(r02)*(sj17)*(sj18));
																												IKReal x260=((cj18)*(r01)*(r02)*(sj17));
																												IKReal x261=((r10)*(r12)*(sj17)*(sj18));
																												IKReal x262=((x258)+(x259)+(x254)+(x255)+(x257)+(x253)+(x261)+(x260));
																												j13array[0]=IKatan2(((((IKabs(((x262)+(((-1.00000000000000)*(x251))))) != 0)?((IKReal)1/(((x262)+(((-1.00000000000000)*(x251)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj14)))+(((-1.00000000000000)*(cj15)*(r10)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj14)*(r10)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj14)*(cj18)*(r11)*(sj15)))))), ((((IKabs(((x251)+(((-1.00000000000000)*(x262))))) != 0)?((IKReal)1/(((x251)+(((-1.00000000000000)*(x262)))))):(IKReal)1.0e30))*(((((cj14)*(cj18)*(r01)*(sj15)))+(((cj15)*(r00)*(sj14)*(sj18)))+(((cj15)*(cj18)*(r01)*(sj14)))+(((cj14)*(r00)*(sj15)*(sj18)))))));
																												sj13array[0]=IKsin(j13array[0]);
																												cj13array[0]=IKcos(j13array[0]);
																												if( j13array[0] > IKPI )
																												{
																													j13array[0]-=IK2PI;
																												}
																												else if( j13array[0] < -IKPI )
																												{
																													j13array[0]+=IK2PI;
																												}
																												j13valid[0] = true;
																												for(int ij13 = 0; ij13 < 1; ++ij13)
																												{
																													if( !j13valid[ij13] )
																													{
																														continue;
																													}
																													j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j13;
																														solution.basesol[1].foffset = j14;
																														solution.basesol[2].foffset = j15;
																														solution.basesol[3].foffset = j16;
																														solution.basesol[4].foffset = j17;
																														solution.basesol[5].foffset = j18;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}

																								} else
																								{
																									{
																										IKReal j13array[1], cj13array[1], sj13array[1];
																										bool j13valid[1]={false};
																										IKReal x263=(sj18)*(sj18);
																										IKReal x264=(cj18)*(cj18);
																										IKReal x265=(r10)*(r10);
																										IKReal x266=((x263)*(x265));
																										IKReal x267=(r00)*(r00);
																										IKReal x268=((x263)*(x267));
																										IKReal x269=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
																										IKReal x270=(r01)*(r01);
																										IKReal x271=((x264)*(x270));
																										IKReal x272=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
																										IKReal x273=(r11)*(r11);
																										IKReal x274=((x264)*(x273));
																										IKReal x275=((x266)+(x269)+(x268)+(x274)+(x272)+(x271));
																										j13array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x275) != 0)?((IKReal)1/(x275)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj14)*(cj15)*(r10)*(sj18)))+(((cj18)*(r11)*(sj14)*(sj15)))+(((-1.00000000000000)*(cj14)*(cj15)*(cj18)*(r11)))+(((r10)*(sj14)*(sj15)*(sj18)))))), ((((IKabs(x275) != 0)?((IKReal)1/(x275)):(IKReal)1.0e30))*(((((cj14)*(cj15)*(cj18)*(r01)))+(((-1.00000000000000)*(r00)*(sj14)*(sj15)*(sj18)))+(((cj14)*(cj15)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(sj14)*(sj15)))))));
																										sj13array[0]=IKsin(j13array[0]);
																										cj13array[0]=IKcos(j13array[0]);
																										if( j13array[0] > IKPI )
																										{
																											j13array[0]-=IK2PI;
																										}
																										else if( j13array[0] < -IKPI )
																										{
																											j13array[0]+=IK2PI;
																										}
																										j13valid[0] = true;
																										for(int ij13 = 0; ij13 < 1; ++ij13)
																										{
																											if( !j13valid[ij13] )
																											{
																												continue;
																											}
																											j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																											{
																												vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																												solution.basesol.resize(6);
																												solution.basesol[0].foffset = j13;
																												solution.basesol[1].foffset = j14;
																												solution.basesol[2].foffset = j15;
																												solution.basesol[3].foffset = j16;
																												solution.basesol[4].foffset = j17;
																												solution.basesol[5].foffset = j18;
																												solution.vfree.resize(0);
																											}
																										}
																									}

																								}

																							}

																						} else
																						{
																							{
																								IKReal j13array[1], cj13array[1], sj13array[1];
																								bool j13valid[1]={false};
																								IKReal x276=(cj18)*(cj18);
																								IKReal x277=(sj18)*(sj18);
																								IKReal x278=((r01)*(r10)*(sj17)*(x276));
																								IKReal x279=((r01)*(r10)*(sj17)*(x277));
																								IKReal x280=((cj17)*(r02)*(r10)*(sj18));
																								IKReal x281=((cj17)*(cj18)*(r02)*(r11));
																								IKReal x282=((x278)+(x279)+(x281)+(x280));
																								IKReal x283=((r00)*(r11)*(sj17)*(x276));
																								IKReal x284=((cj17)*(cj18)*(r01)*(r12));
																								IKReal x285=((r00)*(r11)*(sj17)*(x277));
																								IKReal x286=((cj17)*(r00)*(r12)*(sj18));
																								IKReal x287=((x286)+(x285)+(x284)+(x283));
																								j13array[0]=IKatan2(((((IKabs(((x287)+(((-1.00000000000000)*(x282))))) != 0)?((IKReal)1/(((x287)+(((-1.00000000000000)*(x282)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))), ((((IKabs(((x282)+(((-1.00000000000000)*(x287))))) != 0)?((IKReal)1/(((x282)+(((-1.00000000000000)*(x287)))))):(IKReal)1.0e30))*(((((cj18)*(r01)))+(((r00)*(sj18)))))));
																								sj13array[0]=IKsin(j13array[0]);
																								cj13array[0]=IKcos(j13array[0]);
																								if( j13array[0] > IKPI )
																								{
																									j13array[0]-=IK2PI;
																								}
																								else if( j13array[0] < -IKPI )
																								{
																									j13array[0]+=IK2PI;
																								}
																								j13valid[0] = true;
																								for(int ij13 = 0; ij13 < 1; ++ij13)
																								{
																									if( !j13valid[ij13] )
																									{
																										continue;
																									}
																									j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																									{
																										vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																										solution.basesol.resize(6);
																										solution.basesol[0].foffset = j13;
																										solution.basesol[1].foffset = j14;
																										solution.basesol[2].foffset = j15;
																										solution.basesol[3].foffset = j16;
																										solution.basesol[4].foffset = j17;
																										solution.basesol[5].foffset = j18;
																										solution.vfree.resize(0);
																									}
																								}
																							}

																						}

																					}
																				}
																			}

																		}

																	}
																}
															}

														} else
														{
															evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
															evalcond[1]=((-0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
															evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
															if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
															{
																{
																	IKReal j15array[1], cj15array[1], sj15array[1];
																	bool j15valid[1]={false};
																	j15array[0]=IKatan2(((0.120000000000000)+(((4.00000000000000)*(npy)*(sj17)*(sj18)))+(((-4.00000000000000)*(cj18)*(npx)*(sj17)))+(((4.00000000000000)*(cj17)*(npz)))+(((0.360000000000000)*(sj17)))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
																	sj15array[0]=IKsin(j15array[0]);
																	cj15array[0]=IKcos(j15array[0]);
																	if( j15array[0] > IKPI )
																	{
																		j15array[0]-=IK2PI;
																	}
																	else if( j15array[0] < -IKPI )
																	{
																		j15array[0]+=IK2PI;
																	}
																	j15valid[0] = true;
																	for(int ij15 = 0; ij15 < 1; ++ij15)
																	{
																		if( !j15valid[ij15] )
																		{
																			continue;
																		}
																		j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

																		{
																			IKReal dummyeval[1];
																			dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				{
																					IKReal dummyeval[1];
																					IKReal x288=(sj18)*(sj18);
																					IKReal x289=(cj18)*(cj18);
																					dummyeval[0]=((((x288)*((r10)*(r10))))+(((x289)*((r01)*(r01))))+(((x288)*((r00)*(r00))))+(((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((x289)*((r11)*(r11)))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							IKReal x290=(sj18)*(sj18);
																							IKReal x291=(cj18)*(cj18);
																							dummyeval[0]=((((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj17)*(r00)*(r11)*(x291)))+(((cj17)*(r00)*(r11)*(x290)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x291)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x290))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								continue;

																							} else
																							{
																								{
																									IKReal j13array[1], cj13array[1], sj13array[1];
																									bool j13valid[1]={false};
																									IKReal x292=(sj18)*(sj18);
																									IKReal x293=(cj18)*(cj18);
																									IKReal x294=((cj17)*(r01)*(r10)*(x292));
																									IKReal x295=((cj18)*(r01)*(r12)*(sj17));
																									IKReal x296=((r00)*(r12)*(sj17)*(sj18));
																									IKReal x297=((cj17)*(r01)*(r10)*(x293));
																									IKReal x298=((x294)+(x295)+(x296)+(x297));
																									IKReal x299=((cj17)*(r00)*(r11)*(x292));
																									IKReal x300=((cj17)*(r00)*(r11)*(x293));
																									IKReal x301=((r02)*(r10)*(sj17)*(sj18));
																									IKReal x302=((cj18)*(r02)*(r11)*(sj17));
																									IKReal x303=((x302)+(x300)+(x301)+(x299));
																									j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x298)))+(x303))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x298)))+(x303)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((x298)+(((-1.00000000000000)*(x303))))) != 0)?((IKReal)1/(((x298)+(((-1.00000000000000)*(x303)))))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
																									sj13array[0]=IKsin(j13array[0]);
																									cj13array[0]=IKcos(j13array[0]);
																									if( j13array[0] > IKPI )
																									{
																										j13array[0]-=IK2PI;
																									}
																									else if( j13array[0] < -IKPI )
																									{
																										j13array[0]+=IK2PI;
																									}
																									j13valid[0] = true;
																									for(int ij13 = 0; ij13 < 1; ++ij13)
																									{
																										if( !j13valid[ij13] )
																										{
																											continue;
																										}
																										j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																										{
																											IKReal dummyeval[1];
																											IKReal gconst22;
																											gconst22=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																											dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												{
																													IKReal dummyeval[1];
																													dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														{
																															IKReal dummyeval[1];
																															dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																															{
																																continue;

																															} else
																															{
																																{
																																	IKReal j14array[1], cj14array[1], sj14array[1];
																																	bool j14valid[1]={false};
																																	IKReal x304=(cj15)*(cj15);
																																	IKReal x305=(sj15)*(sj15);
																																	IKReal x306=((x304)+(x305));
																																	j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x306) != 0)?((IKReal)1/(x306)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x306) != 0)?((IKReal)1/(x306)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																																	sj14array[0]=IKsin(j14array[0]);
																																	cj14array[0]=IKcos(j14array[0]);
																																	if( j14array[0] > IKPI )
																																	{
																																		j14array[0]-=IK2PI;
																																	}
																																	else if( j14array[0] < -IKPI )
																																	{
																																		j14array[0]+=IK2PI;
																																	}
																																	j14valid[0] = true;
																																	for(int ij14 = 0; ij14 < 1; ++ij14)
																																	{
																																		if( !j14valid[ij14] )
																																		{
																																			continue;
																																		}
																																		j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																		{
																																			vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																			solution.basesol.resize(6);
																																			solution.basesol[0].foffset = j13;
																																			solution.basesol[1].foffset = j14;
																																			solution.basesol[2].foffset = j15;
																																			solution.basesol[3].foffset = j16;
																																			solution.basesol[4].foffset = j17;
																																			solution.basesol[5].foffset = j18;
																																			solution.vfree.resize(0);
																																		}
																																	}
																																}

																															}

																														}

																													} else
																													{
																														{
																															IKReal j14array[1], cj14array[1], sj14array[1];
																															bool j14valid[1]={false};
																															IKReal x307=(cj15)*(cj15);
																															IKReal x308=(sj15)*(sj15);
																															IKReal x309=((x308)+(x307));
																															j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x309) != 0)?((IKReal)1/(x309)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x309) != 0)?((IKReal)1/(x309)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																															sj14array[0]=IKsin(j14array[0]);
																															cj14array[0]=IKcos(j14array[0]);
																															if( j14array[0] > IKPI )
																															{
																																j14array[0]-=IK2PI;
																															}
																															else if( j14array[0] < -IKPI )
																															{
																																j14array[0]+=IK2PI;
																															}
																															j14valid[0] = true;
																															for(int ij14 = 0; ij14 < 1; ++ij14)
																															{
																																if( !j14valid[ij14] )
																																{
																																	continue;
																																}
																																j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j13;
																																	solution.basesol[1].foffset = j14;
																																	solution.basesol[2].foffset = j15;
																																	solution.basesol[3].foffset = j16;
																																	solution.basesol[4].foffset = j17;
																																	solution.basesol[5].foffset = j18;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}

																											} else
																											{
																												{
																													IKReal j14array[1], cj14array[1], sj14array[1];
																													bool j14valid[1]={false};
																													j14array[0]=IKatan2(((gconst22)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst22)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																													sj14array[0]=IKsin(j14array[0]);
																													cj14array[0]=IKcos(j14array[0]);
																													if( j14array[0] > IKPI )
																													{
																														j14array[0]-=IK2PI;
																													}
																													else if( j14array[0] < -IKPI )
																													{
																														j14array[0]+=IK2PI;
																													}
																													j14valid[0] = true;
																													for(int ij14 = 0; ij14 < 1; ++ij14)
																													{
																														if( !j14valid[ij14] )
																														{
																															continue;
																														}
																														j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j13;
																															solution.basesol[1].foffset = j14;
																															solution.basesol[2].foffset = j15;
																															solution.basesol[3].foffset = j16;
																															solution.basesol[4].foffset = j17;
																															solution.basesol[5].foffset = j18;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j13array[1], cj13array[1], sj13array[1];
																							bool j13valid[1]={false};
																							IKReal x310=(sj18)*(sj18);
																							IKReal x311=(cj18)*(cj18);
																							IKReal x312=(r10)*(r10);
																							IKReal x313=((x310)*(x312));
																							IKReal x314=(r00)*(r00);
																							IKReal x315=((x310)*(x314));
																							IKReal x316=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
																							IKReal x317=(r01)*(r01);
																							IKReal x318=((x311)*(x317));
																							IKReal x319=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
																							IKReal x320=(r11)*(r11);
																							IKReal x321=((x311)*(x320));
																							IKReal x322=((x321)+(x319)+(x318)+(x315)+(x316)+(x313));
																							j13array[0]=IKatan2(((((IKabs(x322) != 0)?((IKReal)1/(x322)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((-1.00000000000000)*(((IKabs(x322) != 0)?((IKReal)1/(x322)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
																							sj13array[0]=IKsin(j13array[0]);
																							cj13array[0]=IKcos(j13array[0]);
																							if( j13array[0] > IKPI )
																							{
																								j13array[0]-=IK2PI;
																							}
																							else if( j13array[0] < -IKPI )
																							{
																								j13array[0]+=IK2PI;
																							}
																							j13valid[0] = true;
																							for(int ij13 = 0; ij13 < 1; ++ij13)
																							{
																								if( !j13valid[ij13] )
																								{
																									continue;
																								}
																								j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																								{
																									IKReal dummyeval[1];
																									IKReal gconst22;
																									gconst22=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																									dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												{
																													IKReal dummyeval[1];
																													dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														continue;

																													} else
																													{
																														{
																															IKReal j14array[1], cj14array[1], sj14array[1];
																															bool j14valid[1]={false};
																															IKReal x323=(cj15)*(cj15);
																															IKReal x324=(sj15)*(sj15);
																															IKReal x325=((x324)+(x323));
																															j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x325) != 0)?((IKReal)1/(x325)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x325) != 0)?((IKReal)1/(x325)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																															sj14array[0]=IKsin(j14array[0]);
																															cj14array[0]=IKcos(j14array[0]);
																															if( j14array[0] > IKPI )
																															{
																																j14array[0]-=IK2PI;
																															}
																															else if( j14array[0] < -IKPI )
																															{
																																j14array[0]+=IK2PI;
																															}
																															j14valid[0] = true;
																															for(int ij14 = 0; ij14 < 1; ++ij14)
																															{
																																if( !j14valid[ij14] )
																																{
																																	continue;
																																}
																																j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j13;
																																	solution.basesol[1].foffset = j14;
																																	solution.basesol[2].foffset = j15;
																																	solution.basesol[3].foffset = j16;
																																	solution.basesol[4].foffset = j17;
																																	solution.basesol[5].foffset = j18;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}

																											} else
																											{
																												{
																													IKReal j14array[1], cj14array[1], sj14array[1];
																													bool j14valid[1]={false};
																													IKReal x326=(cj15)*(cj15);
																													IKReal x327=(sj15)*(sj15);
																													IKReal x328=((x326)+(x327));
																													j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x328) != 0)?((IKReal)1/(x328)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x328) != 0)?((IKReal)1/(x328)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																													sj14array[0]=IKsin(j14array[0]);
																													cj14array[0]=IKcos(j14array[0]);
																													if( j14array[0] > IKPI )
																													{
																														j14array[0]-=IK2PI;
																													}
																													else if( j14array[0] < -IKPI )
																													{
																														j14array[0]+=IK2PI;
																													}
																													j14valid[0] = true;
																													for(int ij14 = 0; ij14 < 1; ++ij14)
																													{
																														if( !j14valid[ij14] )
																														{
																															continue;
																														}
																														j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j13;
																															solution.basesol[1].foffset = j14;
																															solution.basesol[2].foffset = j15;
																															solution.basesol[3].foffset = j16;
																															solution.basesol[4].foffset = j17;
																															solution.basesol[5].foffset = j18;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j14array[1], cj14array[1], sj14array[1];
																											bool j14valid[1]={false};
																											j14array[0]=IKatan2(((gconst22)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst22)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																											sj14array[0]=IKsin(j14array[0]);
																											cj14array[0]=IKcos(j14array[0]);
																											if( j14array[0] > IKPI )
																											{
																												j14array[0]-=IK2PI;
																											}
																											else if( j14array[0] < -IKPI )
																											{
																												j14array[0]+=IK2PI;
																											}
																											j14valid[0] = true;
																											for(int ij14 = 0; ij14 < 1; ++ij14)
																											{
																												if( !j14valid[ij14] )
																												{
																													continue;
																												}
																												j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j13;
																													solution.basesol[1].foffset = j14;
																													solution.basesol[2].foffset = j15;
																													solution.basesol[3].foffset = j16;
																													solution.basesol[4].foffset = j17;
																													solution.basesol[5].foffset = j18;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}
																							}
																						}

																					}

																				}

																			} else
																			{
																				{
																					IKReal j14array[1], cj14array[1], sj14array[1];
																					bool j14valid[1]={false};
																					IKReal x329=(cj15)*(cj15);
																					IKReal x330=(sj15)*(sj15);
																					IKReal x331=((x330)+(x329));
																					j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x331) != 0)?((IKReal)1/(x331)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x331) != 0)?((IKReal)1/(x331)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																					sj14array[0]=IKsin(j14array[0]);
																					cj14array[0]=IKcos(j14array[0]);
																					if( j14array[0] > IKPI )
																					{
																						j14array[0]-=IK2PI;
																					}
																					else if( j14array[0] < -IKPI )
																					{
																						j14array[0]+=IK2PI;
																					}
																					j14valid[0] = true;
																					for(int ij14 = 0; ij14 < 1; ++ij14)
																					{
																						if( !j14valid[ij14] )
																						{
																							continue;
																						}
																						j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																						{
																							IKReal dummyeval[1];
																							IKReal gconst23;
																							IKReal x332=(cj18)*(cj18);
																							IKReal x333=(sj18)*(sj18);
																							gconst23=IKsign(((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((cj17)*(r00)*(r01)*(x332)))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r10)*(r11)*(x332)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x333)))+(((r00)*(r02)*(sj17)*(sj18)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x333)))));
																							IKReal x334=(cj18)*(cj18);
																							IKReal x335=(sj18)*(sj18);
																							dummyeval[0]=((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((cj17)*(r00)*(r01)*(x334)))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r10)*(r11)*(x334)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x335)))+(((r00)*(r02)*(sj17)*(sj18)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x335))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									IKReal x336=(sj18)*(sj18);
																									IKReal x337=(cj18)*(cj18);
																									dummyeval[0]=((((x336)*((r00)*(r00))))+(((x336)*((r10)*(r10))))+(((x337)*((r11)*(r11))))+(((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((x337)*((r01)*(r01)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											IKReal x338=(sj18)*(sj18);
																											IKReal x339=(cj18)*(cj18);
																											dummyeval[0]=((((-1.00000000000000)*(cj17)*(r01)*(r10)*(x338)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x339)))+(((r02)*(r10)*(sj17)*(sj18)))+(((cj17)*(r00)*(r11)*(x338)))+(((cj17)*(r00)*(r11)*(x339)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												continue;

																											} else
																											{
																												{
																													IKReal j13array[1], cj13array[1], sj13array[1];
																													bool j13valid[1]={false};
																													IKReal x340=(sj18)*(sj18);
																													IKReal x341=(cj18)*(cj18);
																													IKReal x342=((cj17)*(r01)*(r10)*(x340));
																													IKReal x343=((cj18)*(r01)*(r12)*(sj17));
																													IKReal x344=((r00)*(r12)*(sj17)*(sj18));
																													IKReal x345=((cj17)*(r01)*(r10)*(x341));
																													IKReal x346=((x342)+(x343)+(x344)+(x345));
																													IKReal x347=((cj17)*(r00)*(r11)*(x340));
																													IKReal x348=((cj17)*(r00)*(r11)*(x341));
																													IKReal x349=((r02)*(r10)*(sj17)*(sj18));
																													IKReal x350=((cj18)*(r02)*(r11)*(sj17));
																													IKReal x351=((x350)+(x347)+(x348)+(x349));
																													j13array[0]=IKatan2(((((IKabs(((x351)+(((-1.00000000000000)*(x346))))) != 0)?((IKReal)1/(((x351)+(((-1.00000000000000)*(x346)))))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((((-1.00000000000000)*(x351)))+(x346))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x351)))+(x346)))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
																													sj13array[0]=IKsin(j13array[0]);
																													cj13array[0]=IKcos(j13array[0]);
																													if( j13array[0] > IKPI )
																													{
																														j13array[0]-=IK2PI;
																													}
																													else if( j13array[0] < -IKPI )
																													{
																														j13array[0]+=IK2PI;
																													}
																													j13valid[0] = true;
																													for(int ij13 = 0; ij13 < 1; ++ij13)
																													{
																														if( !j13valid[ij13] )
																														{
																															continue;
																														}
																														j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j13;
																															solution.basesol[1].foffset = j14;
																															solution.basesol[2].foffset = j15;
																															solution.basesol[3].foffset = j16;
																															solution.basesol[4].foffset = j17;
																															solution.basesol[5].foffset = j18;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j13array[1], cj13array[1], sj13array[1];
																											bool j13valid[1]={false};
																											IKReal x352=(sj18)*(sj18);
																											IKReal x353=(cj18)*(cj18);
																											IKReal x354=(r10)*(r10);
																											IKReal x355=((x352)*(x354));
																											IKReal x356=(r00)*(r00);
																											IKReal x357=((x352)*(x356));
																											IKReal x358=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
																											IKReal x359=(r01)*(r01);
																											IKReal x360=((x353)*(x359));
																											IKReal x361=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
																											IKReal x362=(r11)*(r11);
																											IKReal x363=((x353)*(x362));
																											IKReal x364=((x355)+(x357)+(x358)+(x360)+(x361)+(x363));
																											j13array[0]=IKatan2(((((IKabs(x364) != 0)?((IKReal)1/(x364)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((-1.00000000000000)*(((IKabs(x364) != 0)?((IKReal)1/(x364)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
																											sj13array[0]=IKsin(j13array[0]);
																											cj13array[0]=IKcos(j13array[0]);
																											if( j13array[0] > IKPI )
																											{
																												j13array[0]-=IK2PI;
																											}
																											else if( j13array[0] < -IKPI )
																											{
																												j13array[0]+=IK2PI;
																											}
																											j13valid[0] = true;
																											for(int ij13 = 0; ij13 < 1; ++ij13)
																											{
																												if( !j13valid[ij13] )
																												{
																													continue;
																												}
																												j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j13;
																													solution.basesol[1].foffset = j14;
																													solution.basesol[2].foffset = j15;
																													solution.basesol[3].foffset = j16;
																													solution.basesol[4].foffset = j17;
																													solution.basesol[5].foffset = j18;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j13array[1], cj13array[1], sj13array[1];
																									bool j13valid[1]={false};
																									j13array[0]=IKatan2(((gconst23)*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj14)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj15)*(r10)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj14)*(r10)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj14)*(cj18)*(r11)*(sj15)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))), ((gconst23)*(((((-1.00000000000000)*(cj14)*(r00)*(sj15)*(sj18)))+(((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj15)*(r00)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r01)*(sj14)))+(((cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj14)*(cj18)*(r01)*(sj15)))))));
																									sj13array[0]=IKsin(j13array[0]);
																									cj13array[0]=IKcos(j13array[0]);
																									if( j13array[0] > IKPI )
																									{
																										j13array[0]-=IK2PI;
																									}
																									else if( j13array[0] < -IKPI )
																									{
																										j13array[0]+=IK2PI;
																									}
																									j13valid[0] = true;
																									for(int ij13 = 0; ij13 < 1; ++ij13)
																									{
																										if( !j13valid[ij13] )
																										{
																											continue;
																										}
																										j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j13;
																											solution.basesol[1].foffset = j14;
																											solution.basesol[2].foffset = j15;
																											solution.basesol[3].foffset = j16;
																											solution.basesol[4].foffset = j17;
																											solution.basesol[5].foffset = j18;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}
																					}
																				}

																			}

																		}
																	}
																}

															} else
															{
																evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
																evalcond[1]=((0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
																if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
																{
																	{
																		IKReal j15array[1], cj15array[1], sj15array[1];
																		bool j15valid[1]={false};
																		j15array[0]=IKatan2(((0.120000000000000)+(((4.00000000000000)*(cj18)*(npx)*(sj17)))+(((-4.00000000000000)*(cj17)*(npz)))+(((-0.360000000000000)*(sj17)))+(((-4.00000000000000)*(npy)*(sj17)*(sj18)))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
																		sj15array[0]=IKsin(j15array[0]);
																		cj15array[0]=IKcos(j15array[0]);
																		if( j15array[0] > IKPI )
																		{
																			j15array[0]-=IK2PI;
																		}
																		else if( j15array[0] < -IKPI )
																		{
																			j15array[0]+=IK2PI;
																		}
																		j15valid[0] = true;
																		for(int ij15 = 0; ij15 < 1; ++ij15)
																		{
																			if( !j15valid[ij15] )
																			{
																				continue;
																			}
																			j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

																			{
																				IKReal dummyeval[1];
																				IKReal gconst24;
																				gconst24=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																				dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																				if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																				{
																					{
																						IKReal dummyeval[1];
																						IKReal x365=(sj18)*(sj18);
																						IKReal x366=(cj18)*(cj18);
																						dummyeval[0]=((((-2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((-2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((-1.00000000000000)*(x365)*((r10)*(r10))))+(((-1.00000000000000)*(x366)*((r11)*(r11))))+(((-1.00000000000000)*(x365)*((r00)*(r00))))+(((-1.00000000000000)*(x366)*((r01)*(r01)))));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							{
																								IKReal dummyeval[1];
																								IKReal x367=(sj18)*(sj18);
																								IKReal x368=(cj18)*(cj18);
																								dummyeval[0]=((((-1.00000000000000)*(r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x367)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x368)))+(((-1.00000000000000)*(cj18)*(r02)*(r11)*(sj17)))+(((cj17)*(r01)*(r10)*(x367)))+(((cj17)*(r01)*(r10)*(x368)))+(((cj18)*(r01)*(r12)*(sj17)))+(((r00)*(r12)*(sj17)*(sj18))));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									continue;

																								} else
																								{
																									{
																										IKReal j13array[1], cj13array[1], sj13array[1];
																										bool j13valid[1]={false};
																										IKReal x369=(sj18)*(sj18);
																										IKReal x370=(cj18)*(cj18);
																										IKReal x371=((cj17)*(r00)*(r11)*(x369));
																										IKReal x372=((cj17)*(r00)*(r11)*(x370));
																										IKReal x373=((r02)*(r10)*(sj17)*(sj18));
																										IKReal x374=((cj18)*(r02)*(r11)*(sj17));
																										IKReal x375=((x374)+(x373)+(x372)+(x371));
																										IKReal x376=((cj17)*(r01)*(r10)*(x369));
																										IKReal x377=((cj18)*(r01)*(r12)*(sj17));
																										IKReal x378=((r00)*(r12)*(sj17)*(sj18));
																										IKReal x379=((cj17)*(r01)*(r10)*(x370));
																										IKReal x380=((x379)+(x378)+(x377)+(x376));
																										j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x375)))+(x380))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x375)))+(x380)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((x375)+(((-1.00000000000000)*(x380))))) != 0)?((IKReal)1/(((x375)+(((-1.00000000000000)*(x380)))))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
																										sj13array[0]=IKsin(j13array[0]);
																										cj13array[0]=IKcos(j13array[0]);
																										if( j13array[0] > IKPI )
																										{
																											j13array[0]-=IK2PI;
																										}
																										else if( j13array[0] < -IKPI )
																										{
																											j13array[0]+=IK2PI;
																										}
																										j13valid[0] = true;
																										for(int ij13 = 0; ij13 < 1; ++ij13)
																										{
																											if( !j13valid[ij13] )
																											{
																												continue;
																											}
																											j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																											{
																												IKReal dummyeval[1];
																												IKReal gconst25;
																												gconst25=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																												dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																												if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																												{
																													continue;

																												} else
																												{
																													{
																														IKReal j14array[1], cj14array[1], sj14array[1];
																														bool j14valid[1]={false};
																														j14array[0]=IKatan2(((gconst25)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst25)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																														sj14array[0]=IKsin(j14array[0]);
																														cj14array[0]=IKcos(j14array[0]);
																														if( j14array[0] > IKPI )
																														{
																															j14array[0]-=IK2PI;
																														}
																														else if( j14array[0] < -IKPI )
																														{
																															j14array[0]+=IK2PI;
																														}
																														j14valid[0] = true;
																														for(int ij14 = 0; ij14 < 1; ++ij14)
																														{
																															if( !j14valid[ij14] )
																															{
																																continue;
																															}
																															j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																															{
																																vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																solution.basesol.resize(6);
																																solution.basesol[0].foffset = j13;
																																solution.basesol[1].foffset = j14;
																																solution.basesol[2].foffset = j15;
																																solution.basesol[3].foffset = j16;
																																solution.basesol[4].foffset = j17;
																																solution.basesol[5].foffset = j18;
																																solution.vfree.resize(0);
																															}
																														}
																													}

																												}

																											}
																										}
																									}

																								}

																							}

																						} else
																						{
																							{
																								IKReal j13array[1], cj13array[1], sj13array[1];
																								bool j13valid[1]={false};
																								IKReal x381=(sj18)*(sj18);
																								IKReal x382=(cj18)*(cj18);
																								IKReal x383=(r10)*(r10);
																								IKReal x384=((x381)*(x383));
																								IKReal x385=(r00)*(r00);
																								IKReal x386=((x381)*(x385));
																								IKReal x387=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
																								IKReal x388=(r01)*(r01);
																								IKReal x389=((x382)*(x388));
																								IKReal x390=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
																								IKReal x391=(r11)*(r11);
																								IKReal x392=((x382)*(x391));
																								IKReal x393=((x386)+(x387)+(x384)+(x389)+(x390)+(x392));
																								j13array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x393) != 0)?((IKReal)1/(x393)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((((IKabs(x393) != 0)?((IKReal)1/(x393)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
																								sj13array[0]=IKsin(j13array[0]);
																								cj13array[0]=IKcos(j13array[0]);
																								if( j13array[0] > IKPI )
																								{
																									j13array[0]-=IK2PI;
																								}
																								else if( j13array[0] < -IKPI )
																								{
																									j13array[0]+=IK2PI;
																								}
																								j13valid[0] = true;
																								for(int ij13 = 0; ij13 < 1; ++ij13)
																								{
																									if( !j13valid[ij13] )
																									{
																										continue;
																									}
																									j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																									{
																										IKReal dummyeval[1];
																										IKReal gconst25;
																										gconst25=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																										dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											continue;

																										} else
																										{
																											{
																												IKReal j14array[1], cj14array[1], sj14array[1];
																												bool j14valid[1]={false};
																												j14array[0]=IKatan2(((gconst25)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst25)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																												sj14array[0]=IKsin(j14array[0]);
																												cj14array[0]=IKcos(j14array[0]);
																												if( j14array[0] > IKPI )
																												{
																													j14array[0]-=IK2PI;
																												}
																												else if( j14array[0] < -IKPI )
																												{
																													j14array[0]+=IK2PI;
																												}
																												j14valid[0] = true;
																												for(int ij14 = 0; ij14 < 1; ++ij14)
																												{
																													if( !j14valid[ij14] )
																													{
																														continue;
																													}
																													j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j13;
																														solution.basesol[1].foffset = j14;
																														solution.basesol[2].foffset = j15;
																														solution.basesol[3].foffset = j16;
																														solution.basesol[4].foffset = j17;
																														solution.basesol[5].foffset = j18;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}
																								}
																							}

																						}

																					}

																				} else
																				{
																					{
																						IKReal j14array[1], cj14array[1], sj14array[1];
																						bool j14valid[1]={false};
																						j14array[0]=IKatan2(((gconst24)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst24)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																						sj14array[0]=IKsin(j14array[0]);
																						cj14array[0]=IKcos(j14array[0]);
																						if( j14array[0] > IKPI )
																						{
																							j14array[0]-=IK2PI;
																						}
																						else if( j14array[0] < -IKPI )
																						{
																							j14array[0]+=IK2PI;
																						}
																						j14valid[0] = true;
																						for(int ij14 = 0; ij14 < 1; ++ij14)
																						{
																							if( !j14valid[ij14] )
																							{
																								continue;
																							}
																							j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																							{
																								IKReal dummyeval[1];
																								IKReal gconst26;
																								IKReal x394=(cj18)*(cj18);
																								IKReal x395=(sj18)*(sj18);
																								gconst26=IKsign(((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x395)))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r10)*(r11)*(x394)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((cj17)*(r00)*(r01)*(x394)))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x395)))+(((r00)*(r02)*(sj17)*(sj18)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18)))));
																								IKReal x396=(cj18)*(cj18);
																								IKReal x397=(sj18)*(sj18);
																								dummyeval[0]=((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x397)))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r10)*(r11)*(x396)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((cj17)*(r00)*(r01)*(x396)))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x397)))+(((r00)*(r02)*(sj17)*(sj18)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18))));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									{
																										IKReal dummyeval[1];
																										IKReal x398=(sj18)*(sj18);
																										IKReal x399=(cj18)*(cj18);
																										dummyeval[0]=((((-2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((-2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((-1.00000000000000)*(x399)*((r11)*(r11))))+(((-1.00000000000000)*(x398)*((r00)*(r00))))+(((-1.00000000000000)*(x398)*((r10)*(r10))))+(((-1.00000000000000)*(x399)*((r01)*(r01)))));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											{
																												IKReal dummyeval[1];
																												IKReal x400=(sj18)*(sj18);
																												IKReal x401=(cj18)*(cj18);
																												dummyeval[0]=((((-1.00000000000000)*(cj17)*(r00)*(r11)*(x401)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x400)))+(((-1.00000000000000)*(r02)*(r10)*(sj17)*(sj18)))+(((cj17)*(r01)*(r10)*(x401)))+(((cj17)*(r01)*(r10)*(x400)))+(((-1.00000000000000)*(cj18)*(r02)*(r11)*(sj17)))+(((cj18)*(r01)*(r12)*(sj17)))+(((r00)*(r12)*(sj17)*(sj18))));
																												if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																												{
																													continue;

																												} else
																												{
																													{
																														IKReal j13array[1], cj13array[1], sj13array[1];
																														bool j13valid[1]={false};
																														IKReal x402=(sj18)*(sj18);
																														IKReal x403=(cj18)*(cj18);
																														IKReal x404=((cj17)*(r00)*(r11)*(x402));
																														IKReal x405=((cj17)*(r00)*(r11)*(x403));
																														IKReal x406=((r02)*(r10)*(sj17)*(sj18));
																														IKReal x407=((cj18)*(r02)*(r11)*(sj17));
																														IKReal x408=((x405)+(x404)+(x407)+(x406));
																														IKReal x409=((cj17)*(r01)*(r10)*(x402));
																														IKReal x410=((cj18)*(r01)*(r12)*(sj17));
																														IKReal x411=((r00)*(r12)*(sj17)*(sj18));
																														IKReal x412=((cj17)*(r01)*(r10)*(x403));
																														IKReal x413=((x409)+(x412)+(x410)+(x411));
																														j13array[0]=IKatan2(((((IKabs(((x413)+(((-1.00000000000000)*(x408))))) != 0)?((IKReal)1/(((x413)+(((-1.00000000000000)*(x408)))))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((x408)+(((-1.00000000000000)*(x413))))) != 0)?((IKReal)1/(((x408)+(((-1.00000000000000)*(x413)))))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
																														sj13array[0]=IKsin(j13array[0]);
																														cj13array[0]=IKcos(j13array[0]);
																														if( j13array[0] > IKPI )
																														{
																															j13array[0]-=IK2PI;
																														}
																														else if( j13array[0] < -IKPI )
																														{
																															j13array[0]+=IK2PI;
																														}
																														j13valid[0] = true;
																														for(int ij13 = 0; ij13 < 1; ++ij13)
																														{
																															if( !j13valid[ij13] )
																															{
																																continue;
																															}
																															j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																															{
																																vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																solution.basesol.resize(6);
																																solution.basesol[0].foffset = j13;
																																solution.basesol[1].foffset = j14;
																																solution.basesol[2].foffset = j15;
																																solution.basesol[3].foffset = j16;
																																solution.basesol[4].foffset = j17;
																																solution.basesol[5].foffset = j18;
																																solution.vfree.resize(0);
																															}
																														}
																													}

																												}

																											}

																										} else
																										{
																											{
																												IKReal j13array[1], cj13array[1], sj13array[1];
																												bool j13valid[1]={false};
																												IKReal x414=(sj18)*(sj18);
																												IKReal x415=(cj18)*(cj18);
																												IKReal x416=(r10)*(r10);
																												IKReal x417=((x414)*(x416));
																												IKReal x418=(r00)*(r00);
																												IKReal x419=((x414)*(x418));
																												IKReal x420=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
																												IKReal x421=(r01)*(r01);
																												IKReal x422=((x415)*(x421));
																												IKReal x423=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
																												IKReal x424=(r11)*(r11);
																												IKReal x425=((x415)*(x424));
																												IKReal x426=((x417)+(x419)+(x425)+(x423)+(x422)+(x420));
																												j13array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x426) != 0)?((IKReal)1/(x426)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((((IKabs(x426) != 0)?((IKReal)1/(x426)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
																												sj13array[0]=IKsin(j13array[0]);
																												cj13array[0]=IKcos(j13array[0]);
																												if( j13array[0] > IKPI )
																												{
																													j13array[0]-=IK2PI;
																												}
																												else if( j13array[0] < -IKPI )
																												{
																													j13array[0]+=IK2PI;
																												}
																												j13valid[0] = true;
																												for(int ij13 = 0; ij13 < 1; ++ij13)
																												{
																													if( !j13valid[ij13] )
																													{
																														continue;
																													}
																													j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j13;
																														solution.basesol[1].foffset = j14;
																														solution.basesol[2].foffset = j15;
																														solution.basesol[3].foffset = j16;
																														solution.basesol[4].foffset = j17;
																														solution.basesol[5].foffset = j18;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}

																								} else
																								{
																									{
																										IKReal j13array[1], cj13array[1], sj13array[1];
																										bool j13valid[1]={false};
																										j13array[0]=IKatan2(((gconst26)*(((((-1.00000000000000)*(cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj14)))+(((r02)*(sj17)))+(((-1.00000000000000)*(cj15)*(r10)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj14)*(r10)*(sj15)*(sj18)))+(((cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(cj14)*(cj18)*(r11)*(sj15)))))), ((gconst26)*(((((-1.00000000000000)*(cj14)*(r00)*(sj15)*(sj18)))+(((-1.00000000000000)*(r12)*(sj17)))+(((cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj15)*(r00)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r01)*(sj14)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj14)*(cj18)*(r01)*(sj15)))))));
																										sj13array[0]=IKsin(j13array[0]);
																										cj13array[0]=IKcos(j13array[0]);
																										if( j13array[0] > IKPI )
																										{
																											j13array[0]-=IK2PI;
																										}
																										else if( j13array[0] < -IKPI )
																										{
																											j13array[0]+=IK2PI;
																										}
																										j13valid[0] = true;
																										for(int ij13 = 0; ij13 < 1; ++ij13)
																										{
																											if( !j13valid[ij13] )
																											{
																												continue;
																											}
																											j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																											{
																												vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																												solution.basesol.resize(6);
																												solution.basesol[0].foffset = j13;
																												solution.basesol[1].foffset = j14;
																												solution.basesol[2].foffset = j15;
																												solution.basesol[3].foffset = j16;
																												solution.basesol[4].foffset = j17;
																												solution.basesol[5].foffset = j18;
																												solution.vfree.resize(0);
																											}
																										}
																									}

																								}

																							}
																						}
																					}

																				}

																			}
																		}
																	}

																} else
																{
																	if( 1 )
																	{
																		continue;

																	} else
																	{
																	}
																}
															}
														}
													}
												}

											} else
											{
												{
													IKReal j15array[1], cj15array[1], sj15array[1];
													bool j15valid[1]={false};
													j15array[0]=IKatan2(((((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((((4.00000000000000)*(npy)*(sj17)*(sj18)))+(((-0.380000000000000)*(sj16)))+(((-4.00000000000000)*(cj18)*(npx)*(sj17)))+(((0.120000000000000)*(cj16)))+(((4.00000000000000)*(cj17)*(npz)))+(((0.360000000000000)*(sj17)))))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
													sj15array[0]=IKsin(j15array[0]);
													cj15array[0]=IKcos(j15array[0]);
													if( j15array[0] > IKPI )
													{
														j15array[0]-=IK2PI;
													}
													else if( j15array[0] < -IKPI )
													{
														j15array[0]+=IK2PI;
													}
													j15valid[0] = true;
													for(int ij15 = 0; ij15 < 1; ++ij15)
													{
														if( !j15valid[ij15] )
														{
															continue;
														}
														j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

														{
															IKReal dummyeval[1];
															IKReal gconst2;
															gconst2=IKsign(((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15))))));
															dummyeval[0]=((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15)))));
															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
															{
																{
																	IKReal dummyeval[1];
																	IKReal gconst1;
																	IKReal x427=(cj18)*(cj18);
																	IKReal x428=(sj18)*(sj18);
																	gconst1=IKsign(((((r01)*(r10)*(sj17)*(x427)))+(((r01)*(r10)*(sj17)*(x428)))+(((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x427)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x428)))+(((cj17)*(cj18)*(r02)*(r11)))));
																	IKReal x429=(cj18)*(cj18);
																	IKReal x430=(sj18)*(sj18);
																	dummyeval[0]=((((r01)*(r10)*(sj17)*(x430)))+(((r01)*(r10)*(sj17)*(x429)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x430)))+(((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x429)))+(((cj17)*(cj18)*(r02)*(r11))));
																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																	{
																		{
																			IKReal dummyeval[1];
																			IKReal x431=(sj18)*(sj18);
																			IKReal x432=(cj18)*(cj18);
																			dummyeval[0]=((((-1.00000000000000)*(cj17)*(r01)*(r10)*(x432)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x431)))+(((cj17)*(r00)*(r11)*(x432)))+(((cj17)*(r00)*(r11)*(x431)))+(((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				{
																					IKReal evalcond[5];
																					evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
																					evalcond[1]=((-0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																					evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
																					evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																					evalcond[4]=((0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((-0.250000000000000)*(sj15)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																					if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									IKReal x433=(sj18)*(sj18);
																									IKReal x434=(cj18)*(cj18);
																									dummyeval[0]=((((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((x433)*((r00)*(r00))))+(((x434)*((r01)*(r01))))+(((x434)*((r11)*(r11))))+(((x433)*((r10)*(r10))))+(((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											IKReal x435=(sj18)*(sj18);
																											IKReal x436=(cj18)*(cj18);
																											dummyeval[0]=((((-1.00000000000000)*(cj17)*(r01)*(r10)*(x436)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x435)))+(((cj17)*(r00)*(r11)*(x436)))+(((cj17)*(r00)*(r11)*(x435)))+(((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												continue;

																											} else
																											{
																												{
																													IKReal j13array[1], cj13array[1], sj13array[1];
																													bool j13valid[1]={false};
																													IKReal x437=(sj18)*(sj18);
																													IKReal x438=(cj18)*(cj18);
																													IKReal x439=((cj17)*(r01)*(r10)*(x437));
																													IKReal x440=((cj18)*(r01)*(r12)*(sj17));
																													IKReal x441=((r00)*(r12)*(sj17)*(sj18));
																													IKReal x442=((cj17)*(r01)*(r10)*(x438));
																													IKReal x443=((x439)+(x441)+(x440)+(x442));
																													IKReal x444=((cj17)*(r00)*(r11)*(x437));
																													IKReal x445=((cj17)*(r00)*(r11)*(x438));
																													IKReal x446=((r02)*(r10)*(sj17)*(sj18));
																													IKReal x447=((cj18)*(r02)*(r11)*(sj17));
																													IKReal x448=((x445)+(x444)+(x447)+(x446));
																													j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x443)))+(x448))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x443)))+(x448)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((((-1.00000000000000)*(x448)))+(x443))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x448)))+(x443)))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
																													sj13array[0]=IKsin(j13array[0]);
																													cj13array[0]=IKcos(j13array[0]);
																													if( j13array[0] > IKPI )
																													{
																														j13array[0]-=IK2PI;
																													}
																													else if( j13array[0] < -IKPI )
																													{
																														j13array[0]+=IK2PI;
																													}
																													j13valid[0] = true;
																													for(int ij13 = 0; ij13 < 1; ++ij13)
																													{
																														if( !j13valid[ij13] )
																														{
																															continue;
																														}
																														j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																														{
																															IKReal dummyeval[1];
																															IKReal gconst7;
																															gconst7=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																															dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																															{
																																{
																																	IKReal dummyeval[1];
																																	dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																																	{
																																		{
																																			IKReal dummyeval[1];
																																			dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																																			{
																																				continue;

																																			} else
																																			{
																																				{
																																					IKReal j14array[1], cj14array[1], sj14array[1];
																																					bool j14valid[1]={false};
																																					IKReal x449=(cj15)*(cj15);
																																					IKReal x450=(sj15)*(sj15);
																																					IKReal x451=((x449)+(x450));
																																					j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x451) != 0)?((IKReal)1/(x451)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x451) != 0)?((IKReal)1/(x451)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																																					sj14array[0]=IKsin(j14array[0]);
																																					cj14array[0]=IKcos(j14array[0]);
																																					if( j14array[0] > IKPI )
																																					{
																																						j14array[0]-=IK2PI;
																																					}
																																					else if( j14array[0] < -IKPI )
																																					{
																																						j14array[0]+=IK2PI;
																																					}
																																					j14valid[0] = true;
																																					for(int ij14 = 0; ij14 < 1; ++ij14)
																																					{
																																						if( !j14valid[ij14] )
																																						{
																																							continue;
																																						}
																																						j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																						{
																																							vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																							solution.basesol.resize(6);
																																							solution.basesol[0].foffset = j13;
																																							solution.basesol[1].foffset = j14;
																																							solution.basesol[2].foffset = j15;
																																							solution.basesol[3].foffset = j16;
																																							solution.basesol[4].foffset = j17;
																																							solution.basesol[5].foffset = j18;
																																							solution.vfree.resize(0);
																																						}
																																					}
																																				}

																																			}

																																		}

																																	} else
																																	{
																																		{
																																			IKReal j14array[1], cj14array[1], sj14array[1];
																																			bool j14valid[1]={false};
																																			IKReal x452=(cj15)*(cj15);
																																			IKReal x453=(sj15)*(sj15);
																																			IKReal x454=((x452)+(x453));
																																			j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x454) != 0)?((IKReal)1/(x454)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x454) != 0)?((IKReal)1/(x454)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																																			sj14array[0]=IKsin(j14array[0]);
																																			cj14array[0]=IKcos(j14array[0]);
																																			if( j14array[0] > IKPI )
																																			{
																																				j14array[0]-=IK2PI;
																																			}
																																			else if( j14array[0] < -IKPI )
																																			{
																																				j14array[0]+=IK2PI;
																																			}
																																			j14valid[0] = true;
																																			for(int ij14 = 0; ij14 < 1; ++ij14)
																																			{
																																				if( !j14valid[ij14] )
																																				{
																																					continue;
																																				}
																																				j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																				{
																																					vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																					solution.basesol.resize(6);
																																					solution.basesol[0].foffset = j13;
																																					solution.basesol[1].foffset = j14;
																																					solution.basesol[2].foffset = j15;
																																					solution.basesol[3].foffset = j16;
																																					solution.basesol[4].foffset = j17;
																																					solution.basesol[5].foffset = j18;
																																					solution.vfree.resize(0);
																																				}
																																			}
																																		}

																																	}

																																}

																															} else
																															{
																																{
																																	IKReal j14array[1], cj14array[1], sj14array[1];
																																	bool j14valid[1]={false};
																																	j14array[0]=IKatan2(((gconst7)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst7)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																																	sj14array[0]=IKsin(j14array[0]);
																																	cj14array[0]=IKcos(j14array[0]);
																																	if( j14array[0] > IKPI )
																																	{
																																		j14array[0]-=IK2PI;
																																	}
																																	else if( j14array[0] < -IKPI )
																																	{
																																		j14array[0]+=IK2PI;
																																	}
																																	j14valid[0] = true;
																																	for(int ij14 = 0; ij14 < 1; ++ij14)
																																	{
																																		if( !j14valid[ij14] )
																																		{
																																			continue;
																																		}
																																		j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																		{
																																			vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																			solution.basesol.resize(6);
																																			solution.basesol[0].foffset = j13;
																																			solution.basesol[1].foffset = j14;
																																			solution.basesol[2].foffset = j15;
																																			solution.basesol[3].foffset = j16;
																																			solution.basesol[4].foffset = j17;
																																			solution.basesol[5].foffset = j18;
																																			solution.vfree.resize(0);
																																		}
																																	}
																																}

																															}

																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j13array[1], cj13array[1], sj13array[1];
																											bool j13valid[1]={false};
																											IKReal x455=(sj18)*(sj18);
																											IKReal x456=(cj18)*(cj18);
																											IKReal x457=(r10)*(r10);
																											IKReal x458=((x455)*(x457));
																											IKReal x459=(r00)*(r00);
																											IKReal x460=((x455)*(x459));
																											IKReal x461=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
																											IKReal x462=(r01)*(r01);
																											IKReal x463=((x456)*(x462));
																											IKReal x464=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
																											IKReal x465=(r11)*(r11);
																											IKReal x466=((x456)*(x465));
																											IKReal x467=((x458)+(x463)+(x461)+(x460)+(x466)+(x464));
																											j13array[0]=IKatan2(((((IKabs(x467) != 0)?((IKReal)1/(x467)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((-1.00000000000000)*(((IKabs(x467) != 0)?((IKReal)1/(x467)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
																											sj13array[0]=IKsin(j13array[0]);
																											cj13array[0]=IKcos(j13array[0]);
																											if( j13array[0] > IKPI )
																											{
																												j13array[0]-=IK2PI;
																											}
																											else if( j13array[0] < -IKPI )
																											{
																												j13array[0]+=IK2PI;
																											}
																											j13valid[0] = true;
																											for(int ij13 = 0; ij13 < 1; ++ij13)
																											{
																												if( !j13valid[ij13] )
																												{
																													continue;
																												}
																												j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																												{
																													IKReal dummyeval[1];
																													IKReal gconst7;
																													gconst7=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																													dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														{
																															IKReal dummyeval[1];
																															dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																															{
																																{
																																	IKReal dummyeval[1];
																																	dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																																	{
																																		continue;

																																	} else
																																	{
																																		{
																																			IKReal j14array[1], cj14array[1], sj14array[1];
																																			bool j14valid[1]={false};
																																			IKReal x468=(cj15)*(cj15);
																																			IKReal x469=(sj15)*(sj15);
																																			IKReal x470=((x469)+(x468));
																																			j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x470) != 0)?((IKReal)1/(x470)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x470) != 0)?((IKReal)1/(x470)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																																			sj14array[0]=IKsin(j14array[0]);
																																			cj14array[0]=IKcos(j14array[0]);
																																			if( j14array[0] > IKPI )
																																			{
																																				j14array[0]-=IK2PI;
																																			}
																																			else if( j14array[0] < -IKPI )
																																			{
																																				j14array[0]+=IK2PI;
																																			}
																																			j14valid[0] = true;
																																			for(int ij14 = 0; ij14 < 1; ++ij14)
																																			{
																																				if( !j14valid[ij14] )
																																				{
																																					continue;
																																				}
																																				j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																				{
																																					vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																					solution.basesol.resize(6);
																																					solution.basesol[0].foffset = j13;
																																					solution.basesol[1].foffset = j14;
																																					solution.basesol[2].foffset = j15;
																																					solution.basesol[3].foffset = j16;
																																					solution.basesol[4].foffset = j17;
																																					solution.basesol[5].foffset = j18;
																																					solution.vfree.resize(0);
																																				}
																																			}
																																		}

																																	}

																																}

																															} else
																															{
																																{
																																	IKReal j14array[1], cj14array[1], sj14array[1];
																																	bool j14valid[1]={false};
																																	IKReal x471=(cj15)*(cj15);
																																	IKReal x472=(sj15)*(sj15);
																																	IKReal x473=((x471)+(x472));
																																	j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x473) != 0)?((IKReal)1/(x473)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x473) != 0)?((IKReal)1/(x473)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																																	sj14array[0]=IKsin(j14array[0]);
																																	cj14array[0]=IKcos(j14array[0]);
																																	if( j14array[0] > IKPI )
																																	{
																																		j14array[0]-=IK2PI;
																																	}
																																	else if( j14array[0] < -IKPI )
																																	{
																																		j14array[0]+=IK2PI;
																																	}
																																	j14valid[0] = true;
																																	for(int ij14 = 0; ij14 < 1; ++ij14)
																																	{
																																		if( !j14valid[ij14] )
																																		{
																																			continue;
																																		}
																																		j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																		{
																																			vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																			solution.basesol.resize(6);
																																			solution.basesol[0].foffset = j13;
																																			solution.basesol[1].foffset = j14;
																																			solution.basesol[2].foffset = j15;
																																			solution.basesol[3].foffset = j16;
																																			solution.basesol[4].foffset = j17;
																																			solution.basesol[5].foffset = j18;
																																			solution.vfree.resize(0);
																																		}
																																	}
																																}

																															}

																														}

																													} else
																													{
																														{
																															IKReal j14array[1], cj14array[1], sj14array[1];
																															bool j14valid[1]={false};
																															j14array[0]=IKatan2(((gconst7)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst7)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																															sj14array[0]=IKsin(j14array[0]);
																															cj14array[0]=IKcos(j14array[0]);
																															if( j14array[0] > IKPI )
																															{
																																j14array[0]-=IK2PI;
																															}
																															else if( j14array[0] < -IKPI )
																															{
																																j14array[0]+=IK2PI;
																															}
																															j14valid[0] = true;
																															for(int ij14 = 0; ij14 < 1; ++ij14)
																															{
																																if( !j14valid[ij14] )
																																{
																																	continue;
																																}
																																j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j13;
																																	solution.basesol[1].foffset = j14;
																																	solution.basesol[2].foffset = j15;
																																	solution.basesol[3].foffset = j16;
																																	solution.basesol[4].foffset = j17;
																																	solution.basesol[5].foffset = j18;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j14array[1], cj14array[1], sj14array[1];
																									bool j14valid[1]={false};
																									IKReal x474=(cj15)*(cj15);
																									IKReal x475=(sj15)*(sj15);
																									IKReal x476=((x474)+(x475));
																									j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x476) != 0)?((IKReal)1/(x476)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x476) != 0)?((IKReal)1/(x476)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																									sj14array[0]=IKsin(j14array[0]);
																									cj14array[0]=IKcos(j14array[0]);
																									if( j14array[0] > IKPI )
																									{
																										j14array[0]-=IK2PI;
																									}
																									else if( j14array[0] < -IKPI )
																									{
																										j14array[0]+=IK2PI;
																									}
																									j14valid[0] = true;
																									for(int ij14 = 0; ij14 < 1; ++ij14)
																									{
																										if( !j14valid[ij14] )
																										{
																											continue;
																										}
																										j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																										{
																											IKReal dummyeval[1];
																											IKReal gconst8;
																											IKReal x477=(cj18)*(cj18);
																											IKReal x478=(sj18)*(sj18);
																											gconst8=IKsign(((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x478)))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r00)*(r01)*(x477)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((cj17)*(r10)*(r11)*(x477)))+(((r00)*(r02)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x478)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18)))));
																											IKReal x479=(cj18)*(cj18);
																											IKReal x480=(sj18)*(sj18);
																											dummyeval[0]=((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r00)*(r01)*(x479)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((cj17)*(r10)*(r11)*(x479)))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x480)))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x480)))+(((r00)*(r02)*(sj17)*(sj18)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												{
																													IKReal dummyeval[1];
																													IKReal x481=(sj18)*(sj18);
																													IKReal x482=(cj18)*(cj18);
																													dummyeval[0]=((((x481)*((r10)*(r10))))+(((x482)*((r01)*(r01))))+(((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((x482)*((r11)*(r11))))+(((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((x481)*((r00)*(r00)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														{
																															IKReal dummyeval[1];
																															IKReal x483=(sj18)*(sj18);
																															IKReal x484=(cj18)*(cj18);
																															dummyeval[0]=((((cj17)*(r00)*(r11)*(x483)))+(((cj17)*(r00)*(r11)*(x484)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x484)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x483)))+(((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18))));
																															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																															{
																																continue;

																															} else
																															{
																																{
																																	IKReal j13array[1], cj13array[1], sj13array[1];
																																	bool j13valid[1]={false};
																																	IKReal x485=(sj18)*(sj18);
																																	IKReal x486=(cj18)*(cj18);
																																	IKReal x487=((cj17)*(r01)*(r10)*(x485));
																																	IKReal x488=((cj18)*(r01)*(r12)*(sj17));
																																	IKReal x489=((r00)*(r12)*(sj17)*(sj18));
																																	IKReal x490=((cj17)*(r01)*(r10)*(x486));
																																	IKReal x491=((x489)+(x488)+(x487)+(x490));
																																	IKReal x492=((cj17)*(r00)*(r11)*(x485));
																																	IKReal x493=((cj17)*(r00)*(r11)*(x486));
																																	IKReal x494=((r02)*(r10)*(sj17)*(sj18));
																																	IKReal x495=((cj18)*(r02)*(r11)*(sj17));
																																	IKReal x496=((x492)+(x493)+(x494)+(x495));
																																	j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x491)))+(x496))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x491)))+(x496)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((((-1.00000000000000)*(x496)))+(x491))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x496)))+(x491)))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
																																	sj13array[0]=IKsin(j13array[0]);
																																	cj13array[0]=IKcos(j13array[0]);
																																	if( j13array[0] > IKPI )
																																	{
																																		j13array[0]-=IK2PI;
																																	}
																																	else if( j13array[0] < -IKPI )
																																	{
																																		j13array[0]+=IK2PI;
																																	}
																																	j13valid[0] = true;
																																	for(int ij13 = 0; ij13 < 1; ++ij13)
																																	{
																																		if( !j13valid[ij13] )
																																		{
																																			continue;
																																		}
																																		j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																																		{
																																			vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																			solution.basesol.resize(6);
																																			solution.basesol[0].foffset = j13;
																																			solution.basesol[1].foffset = j14;
																																			solution.basesol[2].foffset = j15;
																																			solution.basesol[3].foffset = j16;
																																			solution.basesol[4].foffset = j17;
																																			solution.basesol[5].foffset = j18;
																																			solution.vfree.resize(0);
																																		}
																																	}
																																}

																															}

																														}

																													} else
																													{
																														{
																															IKReal j13array[1], cj13array[1], sj13array[1];
																															bool j13valid[1]={false};
																															IKReal x497=(sj18)*(sj18);
																															IKReal x498=(cj18)*(cj18);
																															IKReal x499=(r10)*(r10);
																															IKReal x500=((x497)*(x499));
																															IKReal x501=(r00)*(r00);
																															IKReal x502=((x497)*(x501));
																															IKReal x503=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
																															IKReal x504=(r01)*(r01);
																															IKReal x505=((x498)*(x504));
																															IKReal x506=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
																															IKReal x507=(r11)*(r11);
																															IKReal x508=((x498)*(x507));
																															IKReal x509=((x508)+(x500)+(x502)+(x503)+(x505)+(x506));
																															j13array[0]=IKatan2(((((IKabs(x509) != 0)?((IKReal)1/(x509)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((-1.00000000000000)*(((IKabs(x509) != 0)?((IKReal)1/(x509)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
																															sj13array[0]=IKsin(j13array[0]);
																															cj13array[0]=IKcos(j13array[0]);
																															if( j13array[0] > IKPI )
																															{
																																j13array[0]-=IK2PI;
																															}
																															else if( j13array[0] < -IKPI )
																															{
																																j13array[0]+=IK2PI;
																															}
																															j13valid[0] = true;
																															for(int ij13 = 0; ij13 < 1; ++ij13)
																															{
																																if( !j13valid[ij13] )
																																{
																																	continue;
																																}
																																j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j13;
																																	solution.basesol[1].foffset = j14;
																																	solution.basesol[2].foffset = j15;
																																	solution.basesol[3].foffset = j16;
																																	solution.basesol[4].foffset = j17;
																																	solution.basesol[5].foffset = j18;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}

																											} else
																											{
																												{
																													IKReal j13array[1], cj13array[1], sj13array[1];
																													bool j13valid[1]={false};
																													j13array[0]=IKatan2(((gconst8)*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj14)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj15)*(r10)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj14)*(r10)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj14)*(cj18)*(r11)*(sj15)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))), ((gconst8)*(((((-1.00000000000000)*(cj14)*(r00)*(sj15)*(sj18)))+(((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj15)*(r00)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r01)*(sj14)))+(((cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj14)*(cj18)*(r01)*(sj15)))))));
																													sj13array[0]=IKsin(j13array[0]);
																													cj13array[0]=IKcos(j13array[0]);
																													if( j13array[0] > IKPI )
																													{
																														j13array[0]-=IK2PI;
																													}
																													else if( j13array[0] < -IKPI )
																													{
																														j13array[0]+=IK2PI;
																													}
																													j13valid[0] = true;
																													for(int ij13 = 0; ij13 < 1; ++ij13)
																													{
																														if( !j13valid[ij13] )
																														{
																															continue;
																														}
																														j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j13;
																															solution.basesol[1].foffset = j14;
																															solution.basesol[2].foffset = j15;
																															solution.basesol[3].foffset = j16;
																															solution.basesol[4].foffset = j17;
																															solution.basesol[5].foffset = j18;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
																						evalcond[1]=((0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																						evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
																						evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																						evalcond[4]=((-0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.250000000000000)*(sj15)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																						if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
																						{
																							{
																								IKReal dummyeval[1];
																								IKReal gconst9;
																								gconst9=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																								dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									{
																										IKReal dummyeval[1];
																										IKReal x510=(sj18)*(sj18);
																										IKReal x511=(cj18)*(cj18);
																										dummyeval[0]=((((-2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((-1.00000000000000)*(x511)*((r11)*(r11))))+(((-2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((-1.00000000000000)*(x511)*((r01)*(r01))))+(((-1.00000000000000)*(x510)*((r10)*(r10))))+(((-1.00000000000000)*(x510)*((r00)*(r00)))));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											{
																												IKReal dummyeval[1];
																												IKReal x512=(sj18)*(sj18);
																												IKReal x513=(cj18)*(cj18);
																												dummyeval[0]=((((-1.00000000000000)*(r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r02)*(r11)*(sj17)))+(((cj17)*(r01)*(r10)*(x513)))+(((cj17)*(r01)*(r10)*(x512)))+(((cj18)*(r01)*(r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x513)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x512)))+(((r00)*(r12)*(sj17)*(sj18))));
																												if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																												{
																													continue;

																												} else
																												{
																													{
																														IKReal j13array[1], cj13array[1], sj13array[1];
																														bool j13valid[1]={false};
																														IKReal x514=(sj18)*(sj18);
																														IKReal x515=(cj18)*(cj18);
																														IKReal x516=((cj17)*(r00)*(r11)*(x514));
																														IKReal x517=((cj17)*(r00)*(r11)*(x515));
																														IKReal x518=((r02)*(r10)*(sj17)*(sj18));
																														IKReal x519=((cj18)*(r02)*(r11)*(sj17));
																														IKReal x520=((x519)+(x518)+(x517)+(x516));
																														IKReal x521=((cj17)*(r01)*(r10)*(x514));
																														IKReal x522=((cj18)*(r01)*(r12)*(sj17));
																														IKReal x523=((r00)*(r12)*(sj17)*(sj18));
																														IKReal x524=((cj17)*(r01)*(r10)*(x515));
																														IKReal x525=((x522)+(x523)+(x521)+(x524));
																														j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x520)))+(x525))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x520)))+(x525)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((((-1.00000000000000)*(x525)))+(x520))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x525)))+(x520)))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
																														sj13array[0]=IKsin(j13array[0]);
																														cj13array[0]=IKcos(j13array[0]);
																														if( j13array[0] > IKPI )
																														{
																															j13array[0]-=IK2PI;
																														}
																														else if( j13array[0] < -IKPI )
																														{
																															j13array[0]+=IK2PI;
																														}
																														j13valid[0] = true;
																														for(int ij13 = 0; ij13 < 1; ++ij13)
																														{
																															if( !j13valid[ij13] )
																															{
																																continue;
																															}
																															j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																															{
																																IKReal dummyeval[1];
																																IKReal gconst10;
																																gconst10=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																																dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																																if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																																{
																																	continue;

																																} else
																																{
																																	{
																																		IKReal j14array[1], cj14array[1], sj14array[1];
																																		bool j14valid[1]={false};
																																		j14array[0]=IKatan2(((gconst10)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst10)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																																		sj14array[0]=IKsin(j14array[0]);
																																		cj14array[0]=IKcos(j14array[0]);
																																		if( j14array[0] > IKPI )
																																		{
																																			j14array[0]-=IK2PI;
																																		}
																																		else if( j14array[0] < -IKPI )
																																		{
																																			j14array[0]+=IK2PI;
																																		}
																																		j14valid[0] = true;
																																		for(int ij14 = 0; ij14 < 1; ++ij14)
																																		{
																																			if( !j14valid[ij14] )
																																			{
																																				continue;
																																			}
																																			j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																			{
																																				vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																				solution.basesol.resize(6);
																																				solution.basesol[0].foffset = j13;
																																				solution.basesol[1].foffset = j14;
																																				solution.basesol[2].foffset = j15;
																																				solution.basesol[3].foffset = j16;
																																				solution.basesol[4].foffset = j17;
																																				solution.basesol[5].foffset = j18;
																																				solution.vfree.resize(0);
																																			}
																																		}
																																	}

																																}

																															}
																														}
																													}

																												}

																											}

																										} else
																										{
																											{
																												IKReal j13array[1], cj13array[1], sj13array[1];
																												bool j13valid[1]={false};
																												IKReal x526=(sj18)*(sj18);
																												IKReal x527=(cj18)*(cj18);
																												IKReal x528=(r10)*(r10);
																												IKReal x529=((x526)*(x528));
																												IKReal x530=(r00)*(r00);
																												IKReal x531=((x526)*(x530));
																												IKReal x532=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
																												IKReal x533=(r01)*(r01);
																												IKReal x534=((x527)*(x533));
																												IKReal x535=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
																												IKReal x536=(r11)*(r11);
																												IKReal x537=((x527)*(x536));
																												IKReal x538=((x531)+(x532)+(x535)+(x534)+(x537)+(x529));
																												j13array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x538) != 0)?((IKReal)1/(x538)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((((IKabs(x538) != 0)?((IKReal)1/(x538)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
																												sj13array[0]=IKsin(j13array[0]);
																												cj13array[0]=IKcos(j13array[0]);
																												if( j13array[0] > IKPI )
																												{
																													j13array[0]-=IK2PI;
																												}
																												else if( j13array[0] < -IKPI )
																												{
																													j13array[0]+=IK2PI;
																												}
																												j13valid[0] = true;
																												for(int ij13 = 0; ij13 < 1; ++ij13)
																												{
																													if( !j13valid[ij13] )
																													{
																														continue;
																													}
																													j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																													{
																														IKReal dummyeval[1];
																														IKReal gconst10;
																														gconst10=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																														dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																														if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																														{
																															continue;

																														} else
																														{
																															{
																																IKReal j14array[1], cj14array[1], sj14array[1];
																																bool j14valid[1]={false};
																																j14array[0]=IKatan2(((gconst10)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst10)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																																sj14array[0]=IKsin(j14array[0]);
																																cj14array[0]=IKcos(j14array[0]);
																																if( j14array[0] > IKPI )
																																{
																																	j14array[0]-=IK2PI;
																																}
																																else if( j14array[0] < -IKPI )
																																{
																																	j14array[0]+=IK2PI;
																																}
																																j14valid[0] = true;
																																for(int ij14 = 0; ij14 < 1; ++ij14)
																																{
																																	if( !j14valid[ij14] )
																																	{
																																		continue;
																																	}
																																	j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																	{
																																		vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																		solution.basesol.resize(6);
																																		solution.basesol[0].foffset = j13;
																																		solution.basesol[1].foffset = j14;
																																		solution.basesol[2].foffset = j15;
																																		solution.basesol[3].foffset = j16;
																																		solution.basesol[4].foffset = j17;
																																		solution.basesol[5].foffset = j18;
																																		solution.vfree.resize(0);
																																	}
																																}
																															}

																														}

																													}
																												}
																											}

																										}

																									}

																								} else
																								{
																									{
																										IKReal j14array[1], cj14array[1], sj14array[1];
																										bool j14valid[1]={false};
																										j14array[0]=IKatan2(((gconst9)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst9)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																										sj14array[0]=IKsin(j14array[0]);
																										cj14array[0]=IKcos(j14array[0]);
																										if( j14array[0] > IKPI )
																										{
																											j14array[0]-=IK2PI;
																										}
																										else if( j14array[0] < -IKPI )
																										{
																											j14array[0]+=IK2PI;
																										}
																										j14valid[0] = true;
																										for(int ij14 = 0; ij14 < 1; ++ij14)
																										{
																											if( !j14valid[ij14] )
																											{
																												continue;
																											}
																											j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																											{
																												IKReal dummyeval[1];
																												IKReal gconst11;
																												IKReal x539=(cj18)*(cj18);
																												IKReal x540=(sj18)*(sj18);
																												gconst11=IKsign(((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((cj17)*(r10)*(r11)*(x539)))+(((cj17)*(r00)*(r01)*(x539)))+(((r00)*(r02)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x540)))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x540)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18)))));
																												IKReal x541=(cj18)*(cj18);
																												IKReal x542=(sj18)*(sj18);
																												dummyeval[0]=((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((cj17)*(r10)*(r11)*(x541)))+(((r00)*(r02)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x542)))+(((cj17)*(r00)*(r01)*(x541)))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x542)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18))));
																												if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																												{
																													{
																														IKReal dummyeval[1];
																														IKReal x543=(sj18)*(sj18);
																														IKReal x544=(cj18)*(cj18);
																														dummyeval[0]=((((-2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((-1.00000000000000)*(x544)*((r01)*(r01))))+(((-2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((-1.00000000000000)*(x543)*((r10)*(r10))))+(((-1.00000000000000)*(x543)*((r00)*(r00))))+(((-1.00000000000000)*(x544)*((r11)*(r11)))));
																														if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																														{
																															{
																																IKReal dummyeval[1];
																																IKReal x545=(sj18)*(sj18);
																																IKReal x546=(cj18)*(cj18);
																																dummyeval[0]=((((-1.00000000000000)*(r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r02)*(r11)*(sj17)))+(((cj18)*(r01)*(r12)*(sj17)))+(((cj17)*(r01)*(r10)*(x545)))+(((cj17)*(r01)*(r10)*(x546)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x545)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x546)))+(((r00)*(r12)*(sj17)*(sj18))));
																																if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																																{
																																	continue;

																																} else
																																{
																																	{
																																		IKReal j13array[1], cj13array[1], sj13array[1];
																																		bool j13valid[1]={false};
																																		IKReal x547=(sj18)*(sj18);
																																		IKReal x548=(cj18)*(cj18);
																																		IKReal x549=((cj17)*(r00)*(r11)*(x547));
																																		IKReal x550=((cj17)*(r00)*(r11)*(x548));
																																		IKReal x551=((r02)*(r10)*(sj17)*(sj18));
																																		IKReal x552=((cj18)*(r02)*(r11)*(sj17));
																																		IKReal x553=((x552)+(x551)+(x550)+(x549));
																																		IKReal x554=((cj17)*(r01)*(r10)*(x547));
																																		IKReal x555=((cj18)*(r01)*(r12)*(sj17));
																																		IKReal x556=((r00)*(r12)*(sj17)*(sj18));
																																		IKReal x557=((cj17)*(r01)*(r10)*(x548));
																																		IKReal x558=((x557)+(x556)+(x555)+(x554));
																																		j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x553)))+(x558))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x553)))+(x558)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((((-1.00000000000000)*(x558)))+(x553))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x558)))+(x553)))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
																																		sj13array[0]=IKsin(j13array[0]);
																																		cj13array[0]=IKcos(j13array[0]);
																																		if( j13array[0] > IKPI )
																																		{
																																			j13array[0]-=IK2PI;
																																		}
																																		else if( j13array[0] < -IKPI )
																																		{
																																			j13array[0]+=IK2PI;
																																		}
																																		j13valid[0] = true;
																																		for(int ij13 = 0; ij13 < 1; ++ij13)
																																		{
																																			if( !j13valid[ij13] )
																																			{
																																				continue;
																																			}
																																			j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																																			{
																																				vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																				solution.basesol.resize(6);
																																				solution.basesol[0].foffset = j13;
																																				solution.basesol[1].foffset = j14;
																																				solution.basesol[2].foffset = j15;
																																				solution.basesol[3].foffset = j16;
																																				solution.basesol[4].foffset = j17;
																																				solution.basesol[5].foffset = j18;
																																				solution.vfree.resize(0);
																																			}
																																		}
																																	}

																																}

																															}

																														} else
																														{
																															{
																																IKReal j13array[1], cj13array[1], sj13array[1];
																																bool j13valid[1]={false};
																																IKReal x559=(sj18)*(sj18);
																																IKReal x560=(cj18)*(cj18);
																																IKReal x561=(r10)*(r10);
																																IKReal x562=((x559)*(x561));
																																IKReal x563=(r00)*(r00);
																																IKReal x564=((x559)*(x563));
																																IKReal x565=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
																																IKReal x566=(r01)*(r01);
																																IKReal x567=((x560)*(x566));
																																IKReal x568=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
																																IKReal x569=(r11)*(r11);
																																IKReal x570=((x560)*(x569));
																																IKReal x571=((x570)+(x568)+(x567)+(x564)+(x565)+(x562));
																																j13array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x571) != 0)?((IKReal)1/(x571)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((((IKabs(x571) != 0)?((IKReal)1/(x571)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
																																sj13array[0]=IKsin(j13array[0]);
																																cj13array[0]=IKcos(j13array[0]);
																																if( j13array[0] > IKPI )
																																{
																																	j13array[0]-=IK2PI;
																																}
																																else if( j13array[0] < -IKPI )
																																{
																																	j13array[0]+=IK2PI;
																																}
																																j13valid[0] = true;
																																for(int ij13 = 0; ij13 < 1; ++ij13)
																																{
																																	if( !j13valid[ij13] )
																																	{
																																		continue;
																																	}
																																	j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																																	{
																																		vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																		solution.basesol.resize(6);
																																		solution.basesol[0].foffset = j13;
																																		solution.basesol[1].foffset = j14;
																																		solution.basesol[2].foffset = j15;
																																		solution.basesol[3].foffset = j16;
																																		solution.basesol[4].foffset = j17;
																																		solution.basesol[5].foffset = j18;
																																		solution.vfree.resize(0);
																																	}
																																}
																															}

																														}

																													}

																												} else
																												{
																													{
																														IKReal j13array[1], cj13array[1], sj13array[1];
																														bool j13valid[1]={false};
																														j13array[0]=IKatan2(((gconst11)*(((((-1.00000000000000)*(cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj14)))+(((r02)*(sj17)))+(((-1.00000000000000)*(cj15)*(r10)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj14)*(r10)*(sj15)*(sj18)))+(((cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(cj14)*(cj18)*(r11)*(sj15)))))), ((gconst11)*(((((-1.00000000000000)*(cj14)*(r00)*(sj15)*(sj18)))+(((-1.00000000000000)*(r12)*(sj17)))+(((cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj15)*(r00)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r01)*(sj14)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj14)*(cj18)*(r01)*(sj15)))))));
																														sj13array[0]=IKsin(j13array[0]);
																														cj13array[0]=IKcos(j13array[0]);
																														if( j13array[0] > IKPI )
																														{
																															j13array[0]-=IK2PI;
																														}
																														else if( j13array[0] < -IKPI )
																														{
																															j13array[0]+=IK2PI;
																														}
																														j13valid[0] = true;
																														for(int ij13 = 0; ij13 < 1; ++ij13)
																														{
																															if( !j13valid[ij13] )
																															{
																																continue;
																															}
																															j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																															{
																																vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																solution.basesol.resize(6);
																																solution.basesol[0].foffset = j13;
																																solution.basesol[1].foffset = j14;
																																solution.basesol[2].foffset = j15;
																																solution.basesol[3].foffset = j16;
																																solution.basesol[4].foffset = j17;
																																solution.basesol[5].foffset = j18;
																																solution.vfree.resize(0);
																															}
																														}
																													}

																												}

																											}
																										}
																									}

																								}

																							}

																						} else
																						{
																							if( 1 )
																							{
																								continue;

																							} else
																							{
																							}
																						}
																					}
																				}

																			} else
																			{
																				{
																					IKReal j13array[1], cj13array[1], sj13array[1];
																					bool j13valid[1]={false};
																					IKReal x572=(sj18)*(sj18);
																					IKReal x573=(cj18)*(cj18);
																					IKReal x574=((cj17)*(r01)*(r10)*(x572));
																					IKReal x575=((cj18)*(r01)*(r12)*(sj17));
																					IKReal x576=((r00)*(r12)*(sj17)*(sj18));
																					IKReal x577=((cj17)*(r01)*(r10)*(x573));
																					IKReal x578=((x575)+(x574)+(x577)+(x576));
																					IKReal x579=((cj17)*(r00)*(r11)*(x572));
																					IKReal x580=((cj17)*(r00)*(r11)*(x573));
																					IKReal x581=((r02)*(r10)*(sj17)*(sj18));
																					IKReal x582=((cj18)*(r02)*(r11)*(sj17));
																					IKReal x583=((x579)+(x580)+(x581)+(x582));
																					j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x578)))+(x583))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x578)))+(x583)))):(IKReal)1.0e30))*(((((cj16)*(r12)*(sj17)))+(((cj16)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj16)*(cj17)*(r11)*(sj18)))))), ((((IKabs(((x578)+(((-1.00000000000000)*(x583))))) != 0)?((IKReal)1/(((x578)+(((-1.00000000000000)*(x583)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj16)*(r02)*(sj17)))+(((cj16)*(cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj16)*(cj17)*(cj18)*(r00)))))));
																					sj13array[0]=IKsin(j13array[0]);
																					cj13array[0]=IKcos(j13array[0]);
																					if( j13array[0] > IKPI )
																					{
																						j13array[0]-=IK2PI;
																					}
																					else if( j13array[0] < -IKPI )
																					{
																						j13array[0]+=IK2PI;
																					}
																					j13valid[0] = true;
																					for(int ij13 = 0; ij13 < 1; ++ij13)
																					{
																						if( !j13valid[ij13] )
																						{
																							continue;
																						}
																						j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																						{
																							IKReal dummyeval[1];
																							IKReal gconst3;
																							gconst3=IKsign(((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15))))));
																							dummyeval[0]=((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal evalcond[9];
																									evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
																									evalcond[1]=((-0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																									evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
																									evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																									evalcond[4]=((1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																									evalcond[5]=((0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((-0.250000000000000)*(sj15)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																									evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																									evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																									evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																									if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											IKReal gconst4;
																											gconst4=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																											dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												{
																													IKReal dummyeval[1];
																													dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														{
																															IKReal dummyeval[1];
																															dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																															{
																																continue;

																															} else
																															{
																																{
																																	IKReal j14array[1], cj14array[1], sj14array[1];
																																	bool j14valid[1]={false};
																																	IKReal x584=(cj15)*(cj15);
																																	IKReal x585=(sj15)*(sj15);
																																	IKReal x586=((x584)+(x585));
																																	j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x586) != 0)?((IKReal)1/(x586)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x586) != 0)?((IKReal)1/(x586)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																																	sj14array[0]=IKsin(j14array[0]);
																																	cj14array[0]=IKcos(j14array[0]);
																																	if( j14array[0] > IKPI )
																																	{
																																		j14array[0]-=IK2PI;
																																	}
																																	else if( j14array[0] < -IKPI )
																																	{
																																		j14array[0]+=IK2PI;
																																	}
																																	j14valid[0] = true;
																																	for(int ij14 = 0; ij14 < 1; ++ij14)
																																	{
																																		if( !j14valid[ij14] )
																																		{
																																			continue;
																																		}
																																		j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																		{
																																			vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																			solution.basesol.resize(6);
																																			solution.basesol[0].foffset = j13;
																																			solution.basesol[1].foffset = j14;
																																			solution.basesol[2].foffset = j15;
																																			solution.basesol[3].foffset = j16;
																																			solution.basesol[4].foffset = j17;
																																			solution.basesol[5].foffset = j18;
																																			solution.vfree.resize(0);
																																		}
																																	}
																																}

																															}

																														}

																													} else
																													{
																														{
																															IKReal j14array[1], cj14array[1], sj14array[1];
																															bool j14valid[1]={false};
																															IKReal x587=(cj15)*(cj15);
																															IKReal x588=(sj15)*(sj15);
																															IKReal x589=((x587)+(x588));
																															j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x589) != 0)?((IKReal)1/(x589)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x589) != 0)?((IKReal)1/(x589)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																															sj14array[0]=IKsin(j14array[0]);
																															cj14array[0]=IKcos(j14array[0]);
																															if( j14array[0] > IKPI )
																															{
																																j14array[0]-=IK2PI;
																															}
																															else if( j14array[0] < -IKPI )
																															{
																																j14array[0]+=IK2PI;
																															}
																															j14valid[0] = true;
																															for(int ij14 = 0; ij14 < 1; ++ij14)
																															{
																																if( !j14valid[ij14] )
																																{
																																	continue;
																																}
																																j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j13;
																																	solution.basesol[1].foffset = j14;
																																	solution.basesol[2].foffset = j15;
																																	solution.basesol[3].foffset = j16;
																																	solution.basesol[4].foffset = j17;
																																	solution.basesol[5].foffset = j18;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}

																											} else
																											{
																												{
																													IKReal j14array[1], cj14array[1], sj14array[1];
																													bool j14valid[1]={false};
																													j14array[0]=IKatan2(((gconst4)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst4)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																													sj14array[0]=IKsin(j14array[0]);
																													cj14array[0]=IKcos(j14array[0]);
																													if( j14array[0] > IKPI )
																													{
																														j14array[0]-=IK2PI;
																													}
																													else if( j14array[0] < -IKPI )
																													{
																														j14array[0]+=IK2PI;
																													}
																													j14valid[0] = true;
																													for(int ij14 = 0; ij14 < 1; ++ij14)
																													{
																														if( !j14valid[ij14] )
																														{
																															continue;
																														}
																														j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j13;
																															solution.basesol[1].foffset = j14;
																															solution.basesol[2].foffset = j15;
																															solution.basesol[3].foffset = j16;
																															solution.basesol[4].foffset = j17;
																															solution.basesol[5].foffset = j18;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
																										evalcond[1]=((0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																										evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
																										evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																										evalcond[4]=((-1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																										evalcond[5]=((-0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.250000000000000)*(sj15)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																										evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																										evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																										evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																										if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																										{
																											{
																												IKReal dummyeval[1];
																												IKReal gconst5;
																												gconst5=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																												dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																												if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																												{
																													continue;

																												} else
																												{
																													{
																														IKReal j14array[1], cj14array[1], sj14array[1];
																														bool j14valid[1]={false};
																														j14array[0]=IKatan2(((gconst5)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst5)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																														sj14array[0]=IKsin(j14array[0]);
																														cj14array[0]=IKcos(j14array[0]);
																														if( j14array[0] > IKPI )
																														{
																															j14array[0]-=IK2PI;
																														}
																														else if( j14array[0] < -IKPI )
																														{
																															j14array[0]+=IK2PI;
																														}
																														j14valid[0] = true;
																														for(int ij14 = 0; ij14 < 1; ++ij14)
																														{
																															if( !j14valid[ij14] )
																															{
																																continue;
																															}
																															j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																															{
																																vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																solution.basesol.resize(6);
																																solution.basesol[0].foffset = j13;
																																solution.basesol[1].foffset = j14;
																																solution.basesol[2].foffset = j15;
																																solution.basesol[3].foffset = j16;
																																solution.basesol[4].foffset = j17;
																																solution.basesol[5].foffset = j18;
																																solution.vfree.resize(0);
																															}
																														}
																													}

																												}

																											}

																										} else
																										{
																											if( 1 )
																											{
																												continue;

																											} else
																											{
																											}
																										}
																									}
																								}

																							} else
																							{
																								{
																									IKReal j14array[1], cj14array[1], sj14array[1];
																									bool j14valid[1]={false};
																									j14array[0]=IKatan2(((gconst3)*(((((r22)*(sj15)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj16)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((cj17)*(cj18)*(r20)*(sj15)*(sj16)))))), ((gconst3)*(((((cj15)*(cj17)*(r21)*(sj16)*(sj18)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)*(sj16)))))));
																									sj14array[0]=IKsin(j14array[0]);
																									cj14array[0]=IKcos(j14array[0]);
																									if( j14array[0] > IKPI )
																									{
																										j14array[0]-=IK2PI;
																									}
																									else if( j14array[0] < -IKPI )
																									{
																										j14array[0]+=IK2PI;
																									}
																									j14valid[0] = true;
																									for(int ij14 = 0; ij14 < 1; ++ij14)
																									{
																										if( !j14valid[ij14] )
																										{
																											continue;
																										}
																										j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j13;
																											solution.basesol[1].foffset = j14;
																											solution.basesol[2].foffset = j15;
																											solution.basesol[3].foffset = j16;
																											solution.basesol[4].foffset = j17;
																											solution.basesol[5].foffset = j18;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}
																					}
																				}

																			}

																		}

																	} else
																	{
																		{
																			IKReal j13array[1], cj13array[1], sj13array[1];
																			bool j13valid[1]={false};
																			j13array[0]=IKatan2(((gconst1)*(((((cj16)*(r11)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj16)))+(((cj16)*(cj17)*(r12)))+(((-1.00000000000000)*(cj16)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(r10)*(sj16)*(sj18)))))), ((gconst1)*(((((-1.00000000000000)*(cj16)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj18)*(r01)*(sj16)))+(((-1.00000000000000)*(r00)*(sj16)*(sj18)))+(((cj16)*(r01)*(sj17)*(sj18)))+(((cj16)*(cj17)*(r02)))))));
																			sj13array[0]=IKsin(j13array[0]);
																			cj13array[0]=IKcos(j13array[0]);
																			if( j13array[0] > IKPI )
																			{
																				j13array[0]-=IK2PI;
																			}
																			else if( j13array[0] < -IKPI )
																			{
																				j13array[0]+=IK2PI;
																			}
																			j13valid[0] = true;
																			for(int ij13 = 0; ij13 < 1; ++ij13)
																			{
																				if( !j13valid[ij13] )
																				{
																					continue;
																				}
																				j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																				{
																					IKReal dummyeval[1];
																					IKReal gconst3;
																					gconst3=IKsign(((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15))))));
																					dummyeval[0]=((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15)))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal evalcond[9];
																							evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
																							evalcond[1]=((-0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																							evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
																							evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																							evalcond[4]=((1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																							evalcond[5]=((0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((-0.250000000000000)*(sj15)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																							evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																							evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																							evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																							if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									IKReal gconst4;
																									gconst4=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																									dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												{
																													IKReal dummyeval[1];
																													dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														continue;

																													} else
																													{
																														{
																															IKReal j14array[1], cj14array[1], sj14array[1];
																															bool j14valid[1]={false};
																															IKReal x590=(cj15)*(cj15);
																															IKReal x591=(sj15)*(sj15);
																															IKReal x592=((x591)+(x590));
																															j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x592) != 0)?((IKReal)1/(x592)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x592) != 0)?((IKReal)1/(x592)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																															sj14array[0]=IKsin(j14array[0]);
																															cj14array[0]=IKcos(j14array[0]);
																															if( j14array[0] > IKPI )
																															{
																																j14array[0]-=IK2PI;
																															}
																															else if( j14array[0] < -IKPI )
																															{
																																j14array[0]+=IK2PI;
																															}
																															j14valid[0] = true;
																															for(int ij14 = 0; ij14 < 1; ++ij14)
																															{
																																if( !j14valid[ij14] )
																																{
																																	continue;
																																}
																																j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j13;
																																	solution.basesol[1].foffset = j14;
																																	solution.basesol[2].foffset = j15;
																																	solution.basesol[3].foffset = j16;
																																	solution.basesol[4].foffset = j17;
																																	solution.basesol[5].foffset = j18;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}

																											} else
																											{
																												{
																													IKReal j14array[1], cj14array[1], sj14array[1];
																													bool j14valid[1]={false};
																													IKReal x593=(cj15)*(cj15);
																													IKReal x594=(sj15)*(sj15);
																													IKReal x595=((x594)+(x593));
																													j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x595) != 0)?((IKReal)1/(x595)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x595) != 0)?((IKReal)1/(x595)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																													sj14array[0]=IKsin(j14array[0]);
																													cj14array[0]=IKcos(j14array[0]);
																													if( j14array[0] > IKPI )
																													{
																														j14array[0]-=IK2PI;
																													}
																													else if( j14array[0] < -IKPI )
																													{
																														j14array[0]+=IK2PI;
																													}
																													j14valid[0] = true;
																													for(int ij14 = 0; ij14 < 1; ++ij14)
																													{
																														if( !j14valid[ij14] )
																														{
																															continue;
																														}
																														j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j13;
																															solution.basesol[1].foffset = j14;
																															solution.basesol[2].foffset = j15;
																															solution.basesol[3].foffset = j16;
																															solution.basesol[4].foffset = j17;
																															solution.basesol[5].foffset = j18;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j14array[1], cj14array[1], sj14array[1];
																											bool j14valid[1]={false};
																											j14array[0]=IKatan2(((gconst4)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst4)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																											sj14array[0]=IKsin(j14array[0]);
																											cj14array[0]=IKcos(j14array[0]);
																											if( j14array[0] > IKPI )
																											{
																												j14array[0]-=IK2PI;
																											}
																											else if( j14array[0] < -IKPI )
																											{
																												j14array[0]+=IK2PI;
																											}
																											j14valid[0] = true;
																											for(int ij14 = 0; ij14 < 1; ++ij14)
																											{
																												if( !j14valid[ij14] )
																												{
																													continue;
																												}
																												j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j13;
																													solution.basesol[1].foffset = j14;
																													solution.basesol[2].foffset = j15;
																													solution.basesol[3].foffset = j16;
																													solution.basesol[4].foffset = j17;
																													solution.basesol[5].foffset = j18;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
																								evalcond[1]=((0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																								evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
																								evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																								evalcond[4]=((-1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																								evalcond[5]=((-0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.250000000000000)*(sj15)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																								evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																								evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																								evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																								if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																								{
																									{
																										IKReal dummyeval[1];
																										IKReal gconst5;
																										gconst5=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																										dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											continue;

																										} else
																										{
																											{
																												IKReal j14array[1], cj14array[1], sj14array[1];
																												bool j14valid[1]={false};
																												j14array[0]=IKatan2(((gconst5)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst5)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																												sj14array[0]=IKsin(j14array[0]);
																												cj14array[0]=IKcos(j14array[0]);
																												if( j14array[0] > IKPI )
																												{
																													j14array[0]-=IK2PI;
																												}
																												else if( j14array[0] < -IKPI )
																												{
																													j14array[0]+=IK2PI;
																												}
																												j14valid[0] = true;
																												for(int ij14 = 0; ij14 < 1; ++ij14)
																												{
																													if( !j14valid[ij14] )
																													{
																														continue;
																													}
																													j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j13;
																														solution.basesol[1].foffset = j14;
																														solution.basesol[2].foffset = j15;
																														solution.basesol[3].foffset = j16;
																														solution.basesol[4].foffset = j17;
																														solution.basesol[5].foffset = j18;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}

																								} else
																								{
																									if( 1 )
																									{
																										continue;

																									} else
																									{
																									}
																								}
																							}
																						}

																					} else
																					{
																						{
																							IKReal j14array[1], cj14array[1], sj14array[1];
																							bool j14valid[1]={false};
																							j14array[0]=IKatan2(((gconst3)*(((((r22)*(sj15)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj16)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((cj17)*(cj18)*(r20)*(sj15)*(sj16)))))), ((gconst3)*(((((cj15)*(cj17)*(r21)*(sj16)*(sj18)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)*(sj16)))))));
																							sj14array[0]=IKsin(j14array[0]);
																							cj14array[0]=IKcos(j14array[0]);
																							if( j14array[0] > IKPI )
																							{
																								j14array[0]-=IK2PI;
																							}
																							else if( j14array[0] < -IKPI )
																							{
																								j14array[0]+=IK2PI;
																							}
																							j14valid[0] = true;
																							for(int ij14 = 0; ij14 < 1; ++ij14)
																							{
																								if( !j14valid[ij14] )
																								{
																									continue;
																								}
																								j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j13;
																									solution.basesol[1].foffset = j14;
																									solution.basesol[2].foffset = j15;
																									solution.basesol[3].foffset = j16;
																									solution.basesol[4].foffset = j17;
																									solution.basesol[5].foffset = j18;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}
																			}
																		}

																	}

																}

															} else
															{
																{
																	IKReal j14array[1], cj14array[1], sj14array[1];
																	bool j14valid[1]={false};
																	j14array[0]=IKatan2(((gconst2)*(((((r22)*(sj15)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj16)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((cj17)*(cj18)*(r20)*(sj15)*(sj16)))))), ((gconst2)*(((((cj15)*(cj17)*(r21)*(sj16)*(sj18)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)*(sj16)))))));
																	sj14array[0]=IKsin(j14array[0]);
																	cj14array[0]=IKcos(j14array[0]);
																	if( j14array[0] > IKPI )
																	{
																		j14array[0]-=IK2PI;
																	}
																	else if( j14array[0] < -IKPI )
																	{
																		j14array[0]+=IK2PI;
																	}
																	j14valid[0] = true;
																	for(int ij14 = 0; ij14 < 1; ++ij14)
																	{
																		if( !j14valid[ij14] )
																		{
																			continue;
																		}
																		j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																		{
																			IKReal dummyeval[1];
																			IKReal gconst6;
																			IKReal x596=(cj18)*(cj18);
																			IKReal x597=(sj18)*(sj18);
																			gconst6=IKsign(((((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x597)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x596)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11)))+(((r01)*(r10)*(sj17)*(x597)))+(((r01)*(r10)*(sj17)*(x596)))));
																			IKReal x598=(cj18)*(cj18);
																			IKReal x599=(sj18)*(sj18);
																			dummyeval[0]=((((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x599)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x598)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11)))+(((r01)*(r10)*(sj17)*(x599)))+(((r01)*(r10)*(sj17)*(x598))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				{
																					IKReal dummyeval[1];
																					IKReal x600=(sj18)*(sj18);
																					IKReal x601=(cj18)*(cj18);
																					dummyeval[0]=((((-1.00000000000000)*(cj17)*(r01)*(r10)*(x600)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x601)))+(((cj17)*(r00)*(r11)*(x600)))+(((cj17)*(r00)*(r11)*(x601)))+(((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						continue;

																					} else
																					{
																						{
																							IKReal j13array[1], cj13array[1], sj13array[1];
																							bool j13valid[1]={false};
																							IKReal x602=(sj18)*(sj18);
																							IKReal x603=(cj18)*(cj18);
																							IKReal x604=((cj17)*(r01)*(r10)*(x602));
																							IKReal x605=((cj18)*(r01)*(r12)*(sj17));
																							IKReal x606=((r00)*(r12)*(sj17)*(sj18));
																							IKReal x607=((cj17)*(r01)*(r10)*(x603));
																							IKReal x608=((x607)+(x606)+(x605)+(x604));
																							IKReal x609=((cj17)*(r00)*(r11)*(x602));
																							IKReal x610=((cj17)*(r00)*(r11)*(x603));
																							IKReal x611=((r02)*(r10)*(sj17)*(sj18));
																							IKReal x612=((cj18)*(r02)*(r11)*(sj17));
																							IKReal x613=((x609)+(x610)+(x611)+(x612));
																							j13array[0]=IKatan2(((((IKabs(((x613)+(((-1.00000000000000)*(x608))))) != 0)?((IKReal)1/(((x613)+(((-1.00000000000000)*(x608)))))):(IKReal)1.0e30))*(((((cj16)*(r12)*(sj17)))+(((cj16)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj16)*(cj17)*(r11)*(sj18)))))), ((((IKabs(((((-1.00000000000000)*(x613)))+(x608))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x613)))+(x608)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj16)*(r02)*(sj17)))+(((cj16)*(cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj16)*(cj17)*(cj18)*(r00)))))));
																							sj13array[0]=IKsin(j13array[0]);
																							cj13array[0]=IKcos(j13array[0]);
																							if( j13array[0] > IKPI )
																							{
																								j13array[0]-=IK2PI;
																							}
																							else if( j13array[0] < -IKPI )
																							{
																								j13array[0]+=IK2PI;
																							}
																							j13valid[0] = true;
																							for(int ij13 = 0; ij13 < 1; ++ij13)
																							{
																								if( !j13valid[ij13] )
																								{
																									continue;
																								}
																								j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j13;
																									solution.basesol[1].foffset = j14;
																									solution.basesol[2].foffset = j15;
																									solution.basesol[3].foffset = j16;
																									solution.basesol[4].foffset = j17;
																									solution.basesol[5].foffset = j18;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}

																			} else
																			{
																				{
																					IKReal j13array[1], cj13array[1], sj13array[1];
																					bool j13valid[1]={false};
																					j13array[0]=IKatan2(((gconst6)*(((((cj16)*(r11)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj16)))+(((cj16)*(cj17)*(r12)))+(((-1.00000000000000)*(cj16)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(r10)*(sj16)*(sj18)))))), ((gconst6)*(((((-1.00000000000000)*(cj16)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj18)*(r01)*(sj16)))+(((-1.00000000000000)*(r00)*(sj16)*(sj18)))+(((cj16)*(r01)*(sj17)*(sj18)))+(((cj16)*(cj17)*(r02)))))));
																					sj13array[0]=IKsin(j13array[0]);
																					cj13array[0]=IKcos(j13array[0]);
																					if( j13array[0] > IKPI )
																					{
																						j13array[0]-=IK2PI;
																					}
																					else if( j13array[0] < -IKPI )
																					{
																						j13array[0]+=IK2PI;
																					}
																					j13valid[0] = true;
																					for(int ij13 = 0; ij13 < 1; ++ij13)
																					{
																						if( !j13valid[ij13] )
																						{
																							continue;
																						}
																						j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																						{
																							vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																							solution.basesol.resize(6);
																							solution.basesol[0].foffset = j13;
																							solution.basesol[1].foffset = j14;
																							solution.basesol[2].foffset = j15;
																							solution.basesol[3].foffset = j16;
																							solution.basesol[4].foffset = j17;
																							solution.basesol[5].foffset = j18;
																							solution.vfree.resize(0);
																						}
																					}
																				}

																			}

																		}
																	}
																}

															}

														}
													}
												}

											}

										}

									} else
									{
										{
											IKReal j15array[1], cj15array[1], sj15array[1];
											bool j15valid[1]={false};
											j15array[0]=IKatan2(((((IKabs(sj16) != 0)?((IKReal)1/(sj16)):(IKReal)1.0e30))*(((((0.120000000000000)*(sj16)))+(((-4.00000000000000)*(cj18)*(npy)))+(((0.380000000000000)*(cj16)))+(((-4.00000000000000)*(npx)*(sj18)))))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
											sj15array[0]=IKsin(j15array[0]);
											cj15array[0]=IKcos(j15array[0]);
											if( j15array[0] > IKPI )
											{
												j15array[0]-=IK2PI;
											}
											else if( j15array[0] < -IKPI )
											{
												j15array[0]+=IK2PI;
											}
											j15valid[0] = true;
											for(int ij15 = 0; ij15 < 1; ++ij15)
											{
												if( !j15valid[ij15] )
												{
													continue;
												}
												j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

												{
													IKReal dummyeval[1];
													IKReal gconst2;
													gconst2=IKsign(((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15))))));
													dummyeval[0]=((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15)))));
													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
													{
														{
															IKReal dummyeval[1];
															IKReal gconst1;
															IKReal x614=(cj18)*(cj18);
															IKReal x615=(sj18)*(sj18);
															gconst1=IKsign(((((r01)*(r10)*(sj17)*(x614)))+(((r01)*(r10)*(sj17)*(x615)))+(((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x614)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x615)))));
															IKReal x616=(cj18)*(cj18);
															IKReal x617=(sj18)*(sj18);
															dummyeval[0]=((((r01)*(r10)*(sj17)*(x616)))+(((r01)*(r10)*(sj17)*(x617)))+(((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x616)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x617))));
															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
															{
																{
																	IKReal dummyeval[1];
																	IKReal x618=(sj18)*(sj18);
																	IKReal x619=(cj18)*(cj18);
																	dummyeval[0]=((((-1.00000000000000)*(cj17)*(r01)*(r10)*(x619)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x618)))+(((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj17)*(r00)*(r11)*(x619)))+(((cj17)*(r00)*(r11)*(x618)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18))));
																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																	{
																		{
																			IKReal evalcond[5];
																			evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
																			evalcond[1]=((-0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																			evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
																			evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																			evalcond[4]=((0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((-0.250000000000000)*(sj15)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																			if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
																			{
																				{
																					IKReal dummyeval[1];
																					dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							IKReal x620=(sj18)*(sj18);
																							IKReal x621=(cj18)*(cj18);
																							dummyeval[0]=((((x620)*((r10)*(r10))))+(((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((x620)*((r00)*(r00))))+(((x621)*((r11)*(r11))))+(((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((x621)*((r01)*(r01)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									IKReal x622=(sj18)*(sj18);
																									IKReal x623=(cj18)*(cj18);
																									dummyeval[0]=((((cj17)*(r00)*(r11)*(x622)))+(((cj17)*(r00)*(r11)*(x623)))+(((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x622)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x623)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										continue;

																									} else
																									{
																										{
																											IKReal j13array[1], cj13array[1], sj13array[1];
																											bool j13valid[1]={false};
																											IKReal x624=(sj18)*(sj18);
																											IKReal x625=(cj18)*(cj18);
																											IKReal x626=((cj17)*(r01)*(r10)*(x624));
																											IKReal x627=((cj18)*(r01)*(r12)*(sj17));
																											IKReal x628=((r00)*(r12)*(sj17)*(sj18));
																											IKReal x629=((cj17)*(r01)*(r10)*(x625));
																											IKReal x630=((x627)+(x626)+(x629)+(x628));
																											IKReal x631=((cj17)*(r00)*(r11)*(x624));
																											IKReal x632=((cj17)*(r00)*(r11)*(x625));
																											IKReal x633=((r02)*(r10)*(sj17)*(sj18));
																											IKReal x634=((cj18)*(r02)*(r11)*(sj17));
																											IKReal x635=((x634)+(x632)+(x633)+(x631));
																											j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x630)))+(x635))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x630)))+(x635)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((((-1.00000000000000)*(x635)))+(x630))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x635)))+(x630)))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
																											sj13array[0]=IKsin(j13array[0]);
																											cj13array[0]=IKcos(j13array[0]);
																											if( j13array[0] > IKPI )
																											{
																												j13array[0]-=IK2PI;
																											}
																											else if( j13array[0] < -IKPI )
																											{
																												j13array[0]+=IK2PI;
																											}
																											j13valid[0] = true;
																											for(int ij13 = 0; ij13 < 1; ++ij13)
																											{
																												if( !j13valid[ij13] )
																												{
																													continue;
																												}
																												j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																												{
																													IKReal dummyeval[1];
																													IKReal gconst7;
																													gconst7=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																													dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														{
																															IKReal dummyeval[1];
																															dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																															{
																																{
																																	IKReal dummyeval[1];
																																	dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																																	{
																																		continue;

																																	} else
																																	{
																																		{
																																			IKReal j14array[1], cj14array[1], sj14array[1];
																																			bool j14valid[1]={false};
																																			IKReal x636=(cj15)*(cj15);
																																			IKReal x637=(sj15)*(sj15);
																																			IKReal x638=((x636)+(x637));
																																			j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x638) != 0)?((IKReal)1/(x638)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x638) != 0)?((IKReal)1/(x638)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																																			sj14array[0]=IKsin(j14array[0]);
																																			cj14array[0]=IKcos(j14array[0]);
																																			if( j14array[0] > IKPI )
																																			{
																																				j14array[0]-=IK2PI;
																																			}
																																			else if( j14array[0] < -IKPI )
																																			{
																																				j14array[0]+=IK2PI;
																																			}
																																			j14valid[0] = true;
																																			for(int ij14 = 0; ij14 < 1; ++ij14)
																																			{
																																				if( !j14valid[ij14] )
																																				{
																																					continue;
																																				}
																																				j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																				{
																																					vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																					solution.basesol.resize(6);
																																					solution.basesol[0].foffset = j13;
																																					solution.basesol[1].foffset = j14;
																																					solution.basesol[2].foffset = j15;
																																					solution.basesol[3].foffset = j16;
																																					solution.basesol[4].foffset = j17;
																																					solution.basesol[5].foffset = j18;
																																					solution.vfree.resize(0);
																																				}
																																			}
																																		}

																																	}

																																}

																															} else
																															{
																																{
																																	IKReal j14array[1], cj14array[1], sj14array[1];
																																	bool j14valid[1]={false};
																																	IKReal x639=(cj15)*(cj15);
																																	IKReal x640=(sj15)*(sj15);
																																	IKReal x641=((x640)+(x639));
																																	j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x641) != 0)?((IKReal)1/(x641)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x641) != 0)?((IKReal)1/(x641)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																																	sj14array[0]=IKsin(j14array[0]);
																																	cj14array[0]=IKcos(j14array[0]);
																																	if( j14array[0] > IKPI )
																																	{
																																		j14array[0]-=IK2PI;
																																	}
																																	else if( j14array[0] < -IKPI )
																																	{
																																		j14array[0]+=IK2PI;
																																	}
																																	j14valid[0] = true;
																																	for(int ij14 = 0; ij14 < 1; ++ij14)
																																	{
																																		if( !j14valid[ij14] )
																																		{
																																			continue;
																																		}
																																		j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																		{
																																			vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																			solution.basesol.resize(6);
																																			solution.basesol[0].foffset = j13;
																																			solution.basesol[1].foffset = j14;
																																			solution.basesol[2].foffset = j15;
																																			solution.basesol[3].foffset = j16;
																																			solution.basesol[4].foffset = j17;
																																			solution.basesol[5].foffset = j18;
																																			solution.vfree.resize(0);
																																		}
																																	}
																																}

																															}

																														}

																													} else
																													{
																														{
																															IKReal j14array[1], cj14array[1], sj14array[1];
																															bool j14valid[1]={false};
																															j14array[0]=IKatan2(((gconst7)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst7)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																															sj14array[0]=IKsin(j14array[0]);
																															cj14array[0]=IKcos(j14array[0]);
																															if( j14array[0] > IKPI )
																															{
																																j14array[0]-=IK2PI;
																															}
																															else if( j14array[0] < -IKPI )
																															{
																																j14array[0]+=IK2PI;
																															}
																															j14valid[0] = true;
																															for(int ij14 = 0; ij14 < 1; ++ij14)
																															{
																																if( !j14valid[ij14] )
																																{
																																	continue;
																																}
																																j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j13;
																																	solution.basesol[1].foffset = j14;
																																	solution.basesol[2].foffset = j15;
																																	solution.basesol[3].foffset = j16;
																																	solution.basesol[4].foffset = j17;
																																	solution.basesol[5].foffset = j18;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j13array[1], cj13array[1], sj13array[1];
																									bool j13valid[1]={false};
																									IKReal x642=(sj18)*(sj18);
																									IKReal x643=(cj18)*(cj18);
																									IKReal x644=(r10)*(r10);
																									IKReal x645=((x642)*(x644));
																									IKReal x646=(r00)*(r00);
																									IKReal x647=((x642)*(x646));
																									IKReal x648=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
																									IKReal x649=(r01)*(r01);
																									IKReal x650=((x643)*(x649));
																									IKReal x651=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
																									IKReal x652=(r11)*(r11);
																									IKReal x653=((x643)*(x652));
																									IKReal x654=((x647)+(x645)+(x648)+(x650)+(x651)+(x653));
																									j13array[0]=IKatan2(((((IKabs(x654) != 0)?((IKReal)1/(x654)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((-1.00000000000000)*(((IKabs(x654) != 0)?((IKReal)1/(x654)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
																									sj13array[0]=IKsin(j13array[0]);
																									cj13array[0]=IKcos(j13array[0]);
																									if( j13array[0] > IKPI )
																									{
																										j13array[0]-=IK2PI;
																									}
																									else if( j13array[0] < -IKPI )
																									{
																										j13array[0]+=IK2PI;
																									}
																									j13valid[0] = true;
																									for(int ij13 = 0; ij13 < 1; ++ij13)
																									{
																										if( !j13valid[ij13] )
																										{
																											continue;
																										}
																										j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																										{
																											IKReal dummyeval[1];
																											IKReal gconst7;
																											gconst7=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																											dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												{
																													IKReal dummyeval[1];
																													dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														{
																															IKReal dummyeval[1];
																															dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																															{
																																continue;

																															} else
																															{
																																{
																																	IKReal j14array[1], cj14array[1], sj14array[1];
																																	bool j14valid[1]={false};
																																	IKReal x655=(cj15)*(cj15);
																																	IKReal x656=(sj15)*(sj15);
																																	IKReal x657=((x655)+(x656));
																																	j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x657) != 0)?((IKReal)1/(x657)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x657) != 0)?((IKReal)1/(x657)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																																	sj14array[0]=IKsin(j14array[0]);
																																	cj14array[0]=IKcos(j14array[0]);
																																	if( j14array[0] > IKPI )
																																	{
																																		j14array[0]-=IK2PI;
																																	}
																																	else if( j14array[0] < -IKPI )
																																	{
																																		j14array[0]+=IK2PI;
																																	}
																																	j14valid[0] = true;
																																	for(int ij14 = 0; ij14 < 1; ++ij14)
																																	{
																																		if( !j14valid[ij14] )
																																		{
																																			continue;
																																		}
																																		j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																		{
																																			vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																			solution.basesol.resize(6);
																																			solution.basesol[0].foffset = j13;
																																			solution.basesol[1].foffset = j14;
																																			solution.basesol[2].foffset = j15;
																																			solution.basesol[3].foffset = j16;
																																			solution.basesol[4].foffset = j17;
																																			solution.basesol[5].foffset = j18;
																																			solution.vfree.resize(0);
																																		}
																																	}
																																}

																															}

																														}

																													} else
																													{
																														{
																															IKReal j14array[1], cj14array[1], sj14array[1];
																															bool j14valid[1]={false};
																															IKReal x658=(cj15)*(cj15);
																															IKReal x659=(sj15)*(sj15);
																															IKReal x660=((x658)+(x659));
																															j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x660) != 0)?((IKReal)1/(x660)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x660) != 0)?((IKReal)1/(x660)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																															sj14array[0]=IKsin(j14array[0]);
																															cj14array[0]=IKcos(j14array[0]);
																															if( j14array[0] > IKPI )
																															{
																																j14array[0]-=IK2PI;
																															}
																															else if( j14array[0] < -IKPI )
																															{
																																j14array[0]+=IK2PI;
																															}
																															j14valid[0] = true;
																															for(int ij14 = 0; ij14 < 1; ++ij14)
																															{
																																if( !j14valid[ij14] )
																																{
																																	continue;
																																}
																																j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j13;
																																	solution.basesol[1].foffset = j14;
																																	solution.basesol[2].foffset = j15;
																																	solution.basesol[3].foffset = j16;
																																	solution.basesol[4].foffset = j17;
																																	solution.basesol[5].foffset = j18;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}

																											} else
																											{
																												{
																													IKReal j14array[1], cj14array[1], sj14array[1];
																													bool j14valid[1]={false};
																													j14array[0]=IKatan2(((gconst7)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst7)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																													sj14array[0]=IKsin(j14array[0]);
																													cj14array[0]=IKcos(j14array[0]);
																													if( j14array[0] > IKPI )
																													{
																														j14array[0]-=IK2PI;
																													}
																													else if( j14array[0] < -IKPI )
																													{
																														j14array[0]+=IK2PI;
																													}
																													j14valid[0] = true;
																													for(int ij14 = 0; ij14 < 1; ++ij14)
																													{
																														if( !j14valid[ij14] )
																														{
																															continue;
																														}
																														j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j13;
																															solution.basesol[1].foffset = j14;
																															solution.basesol[2].foffset = j15;
																															solution.basesol[3].foffset = j16;
																															solution.basesol[4].foffset = j17;
																															solution.basesol[5].foffset = j18;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j14array[1], cj14array[1], sj14array[1];
																							bool j14valid[1]={false};
																							IKReal x661=(cj15)*(cj15);
																							IKReal x662=(sj15)*(sj15);
																							IKReal x663=((x661)+(x662));
																							j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x663) != 0)?((IKReal)1/(x663)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x663) != 0)?((IKReal)1/(x663)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																							sj14array[0]=IKsin(j14array[0]);
																							cj14array[0]=IKcos(j14array[0]);
																							if( j14array[0] > IKPI )
																							{
																								j14array[0]-=IK2PI;
																							}
																							else if( j14array[0] < -IKPI )
																							{
																								j14array[0]+=IK2PI;
																							}
																							j14valid[0] = true;
																							for(int ij14 = 0; ij14 < 1; ++ij14)
																							{
																								if( !j14valid[ij14] )
																								{
																									continue;
																								}
																								j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																								{
																									IKReal dummyeval[1];
																									IKReal gconst8;
																									IKReal x664=(cj18)*(cj18);
																									IKReal x665=(sj18)*(sj18);
																									gconst8=IKsign(((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r00)*(r01)*(x664)))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x665)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((cj17)*(r10)*(r11)*(x664)))+(((r00)*(r02)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x665)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18)))));
																									IKReal x666=(cj18)*(cj18);
																									IKReal x667=(sj18)*(sj18);
																									dummyeval[0]=((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r00)*(r01)*(x666)))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x667)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((cj17)*(r10)*(r11)*(x666)))+(((r00)*(r02)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x667)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											IKReal x668=(sj18)*(sj18);
																											IKReal x669=(cj18)*(cj18);
																											dummyeval[0]=((((x668)*((r10)*(r10))))+(((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((x669)*((r11)*(r11))))+(((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((x668)*((r00)*(r00))))+(((x669)*((r01)*(r01)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												{
																													IKReal dummyeval[1];
																													IKReal x670=(sj18)*(sj18);
																													IKReal x671=(cj18)*(cj18);
																													dummyeval[0]=((((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x671)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x670)))+(((cj18)*(r02)*(r11)*(sj17)))+(((cj17)*(r00)*(r11)*(x670)))+(((cj17)*(r00)*(r11)*(x671)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														continue;

																													} else
																													{
																														{
																															IKReal j13array[1], cj13array[1], sj13array[1];
																															bool j13valid[1]={false};
																															IKReal x672=(sj18)*(sj18);
																															IKReal x673=(cj18)*(cj18);
																															IKReal x674=((cj17)*(r01)*(r10)*(x672));
																															IKReal x675=((cj18)*(r01)*(r12)*(sj17));
																															IKReal x676=((r00)*(r12)*(sj17)*(sj18));
																															IKReal x677=((cj17)*(r01)*(r10)*(x673));
																															IKReal x678=((x676)+(x677)+(x674)+(x675));
																															IKReal x679=((cj17)*(r00)*(r11)*(x672));
																															IKReal x680=((cj17)*(r00)*(r11)*(x673));
																															IKReal x681=((r02)*(r10)*(sj17)*(sj18));
																															IKReal x682=((cj18)*(r02)*(r11)*(sj17));
																															IKReal x683=((x679)+(x682)+(x681)+(x680));
																															j13array[0]=IKatan2(((((IKabs(((x683)+(((-1.00000000000000)*(x678))))) != 0)?((IKReal)1/(((x683)+(((-1.00000000000000)*(x678)))))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((((-1.00000000000000)*(x683)))+(x678))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x683)))+(x678)))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
																															sj13array[0]=IKsin(j13array[0]);
																															cj13array[0]=IKcos(j13array[0]);
																															if( j13array[0] > IKPI )
																															{
																																j13array[0]-=IK2PI;
																															}
																															else if( j13array[0] < -IKPI )
																															{
																																j13array[0]+=IK2PI;
																															}
																															j13valid[0] = true;
																															for(int ij13 = 0; ij13 < 1; ++ij13)
																															{
																																if( !j13valid[ij13] )
																																{
																																	continue;
																																}
																																j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j13;
																																	solution.basesol[1].foffset = j14;
																																	solution.basesol[2].foffset = j15;
																																	solution.basesol[3].foffset = j16;
																																	solution.basesol[4].foffset = j17;
																																	solution.basesol[5].foffset = j18;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}

																											} else
																											{
																												{
																													IKReal j13array[1], cj13array[1], sj13array[1];
																													bool j13valid[1]={false};
																													IKReal x684=(sj18)*(sj18);
																													IKReal x685=(cj18)*(cj18);
																													IKReal x686=(r10)*(r10);
																													IKReal x687=((x684)*(x686));
																													IKReal x688=(r00)*(r00);
																													IKReal x689=((x684)*(x688));
																													IKReal x690=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
																													IKReal x691=(r01)*(r01);
																													IKReal x692=((x685)*(x691));
																													IKReal x693=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
																													IKReal x694=(r11)*(r11);
																													IKReal x695=((x685)*(x694));
																													IKReal x696=((x689)+(x687)+(x695)+(x690)+(x692)+(x693));
																													j13array[0]=IKatan2(((((IKabs(x696) != 0)?((IKReal)1/(x696)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((-1.00000000000000)*(((IKabs(x696) != 0)?((IKReal)1/(x696)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
																													sj13array[0]=IKsin(j13array[0]);
																													cj13array[0]=IKcos(j13array[0]);
																													if( j13array[0] > IKPI )
																													{
																														j13array[0]-=IK2PI;
																													}
																													else if( j13array[0] < -IKPI )
																													{
																														j13array[0]+=IK2PI;
																													}
																													j13valid[0] = true;
																													for(int ij13 = 0; ij13 < 1; ++ij13)
																													{
																														if( !j13valid[ij13] )
																														{
																															continue;
																														}
																														j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j13;
																															solution.basesol[1].foffset = j14;
																															solution.basesol[2].foffset = j15;
																															solution.basesol[3].foffset = j16;
																															solution.basesol[4].foffset = j17;
																															solution.basesol[5].foffset = j18;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j13array[1], cj13array[1], sj13array[1];
																											bool j13valid[1]={false};
																											j13array[0]=IKatan2(((gconst8)*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj14)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj15)*(r10)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj14)*(r10)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj14)*(cj18)*(r11)*(sj15)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))), ((gconst8)*(((((-1.00000000000000)*(cj14)*(r00)*(sj15)*(sj18)))+(((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj15)*(r00)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r01)*(sj14)))+(((cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj14)*(cj18)*(r01)*(sj15)))))));
																											sj13array[0]=IKsin(j13array[0]);
																											cj13array[0]=IKcos(j13array[0]);
																											if( j13array[0] > IKPI )
																											{
																												j13array[0]-=IK2PI;
																											}
																											else if( j13array[0] < -IKPI )
																											{
																												j13array[0]+=IK2PI;
																											}
																											j13valid[0] = true;
																											for(int ij13 = 0; ij13 < 1; ++ij13)
																											{
																												if( !j13valid[ij13] )
																												{
																													continue;
																												}
																												j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j13;
																													solution.basesol[1].foffset = j14;
																													solution.basesol[2].foffset = j15;
																													solution.basesol[3].foffset = j16;
																													solution.basesol[4].foffset = j17;
																													solution.basesol[5].foffset = j18;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}
																							}
																						}

																					}

																				}

																			} else
																			{
																				evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
																				evalcond[1]=((0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																				evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
																				evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																				evalcond[4]=((-0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.250000000000000)*(sj15)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																				if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
																				{
																					{
																						IKReal dummyeval[1];
																						IKReal gconst9;
																						gconst9=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																						dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							{
																								IKReal dummyeval[1];
																								IKReal x697=(sj18)*(sj18);
																								IKReal x698=(cj18)*(cj18);
																								dummyeval[0]=((((-2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((-1.00000000000000)*(x697)*((r00)*(r00))))+(((-2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((-1.00000000000000)*(x697)*((r10)*(r10))))+(((-1.00000000000000)*(x698)*((r01)*(r01))))+(((-1.00000000000000)*(x698)*((r11)*(r11)))));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									{
																										IKReal dummyeval[1];
																										IKReal x699=(sj18)*(sj18);
																										IKReal x700=(cj18)*(cj18);
																										dummyeval[0]=((((-1.00000000000000)*(r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x700)))+(((-1.00000000000000)*(cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x699)))+(((cj18)*(r01)*(r12)*(sj17)))+(((cj17)*(r01)*(r10)*(x699)))+(((cj17)*(r01)*(r10)*(x700)))+(((r00)*(r12)*(sj17)*(sj18))));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											continue;

																										} else
																										{
																											{
																												IKReal j13array[1], cj13array[1], sj13array[1];
																												bool j13valid[1]={false};
																												IKReal x701=(sj18)*(sj18);
																												IKReal x702=(cj18)*(cj18);
																												IKReal x703=((cj17)*(r00)*(r11)*(x701));
																												IKReal x704=((cj17)*(r00)*(r11)*(x702));
																												IKReal x705=((r02)*(r10)*(sj17)*(sj18));
																												IKReal x706=((cj18)*(r02)*(r11)*(sj17));
																												IKReal x707=((x703)+(x706)+(x704)+(x705));
																												IKReal x708=((cj17)*(r01)*(r10)*(x701));
																												IKReal x709=((cj18)*(r01)*(r12)*(sj17));
																												IKReal x710=((r00)*(r12)*(sj17)*(sj18));
																												IKReal x711=((cj17)*(r01)*(r10)*(x702));
																												IKReal x712=((x711)+(x710)+(x708)+(x709));
																												j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x707)))+(x712))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x707)))+(x712)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((((-1.00000000000000)*(x712)))+(x707))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x712)))+(x707)))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
																												sj13array[0]=IKsin(j13array[0]);
																												cj13array[0]=IKcos(j13array[0]);
																												if( j13array[0] > IKPI )
																												{
																													j13array[0]-=IK2PI;
																												}
																												else if( j13array[0] < -IKPI )
																												{
																													j13array[0]+=IK2PI;
																												}
																												j13valid[0] = true;
																												for(int ij13 = 0; ij13 < 1; ++ij13)
																												{
																													if( !j13valid[ij13] )
																													{
																														continue;
																													}
																													j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																													{
																														IKReal dummyeval[1];
																														IKReal gconst10;
																														gconst10=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																														dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																														if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																														{
																															continue;

																														} else
																														{
																															{
																																IKReal j14array[1], cj14array[1], sj14array[1];
																																bool j14valid[1]={false};
																																j14array[0]=IKatan2(((gconst10)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst10)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																																sj14array[0]=IKsin(j14array[0]);
																																cj14array[0]=IKcos(j14array[0]);
																																if( j14array[0] > IKPI )
																																{
																																	j14array[0]-=IK2PI;
																																}
																																else if( j14array[0] < -IKPI )
																																{
																																	j14array[0]+=IK2PI;
																																}
																																j14valid[0] = true;
																																for(int ij14 = 0; ij14 < 1; ++ij14)
																																{
																																	if( !j14valid[ij14] )
																																	{
																																		continue;
																																	}
																																	j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																	{
																																		vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																		solution.basesol.resize(6);
																																		solution.basesol[0].foffset = j13;
																																		solution.basesol[1].foffset = j14;
																																		solution.basesol[2].foffset = j15;
																																		solution.basesol[3].foffset = j16;
																																		solution.basesol[4].foffset = j17;
																																		solution.basesol[5].foffset = j18;
																																		solution.vfree.resize(0);
																																	}
																																}
																															}

																														}

																													}
																												}
																											}

																										}

																									}

																								} else
																								{
																									{
																										IKReal j13array[1], cj13array[1], sj13array[1];
																										bool j13valid[1]={false};
																										IKReal x713=(sj18)*(sj18);
																										IKReal x714=(cj18)*(cj18);
																										IKReal x715=(r10)*(r10);
																										IKReal x716=((x713)*(x715));
																										IKReal x717=(r00)*(r00);
																										IKReal x718=((x713)*(x717));
																										IKReal x719=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
																										IKReal x720=(r01)*(r01);
																										IKReal x721=((x714)*(x720));
																										IKReal x722=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
																										IKReal x723=(r11)*(r11);
																										IKReal x724=((x714)*(x723));
																										IKReal x725=((x719)+(x718)+(x716)+(x721)+(x722)+(x724));
																										j13array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x725) != 0)?((IKReal)1/(x725)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((((IKabs(x725) != 0)?((IKReal)1/(x725)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
																										sj13array[0]=IKsin(j13array[0]);
																										cj13array[0]=IKcos(j13array[0]);
																										if( j13array[0] > IKPI )
																										{
																											j13array[0]-=IK2PI;
																										}
																										else if( j13array[0] < -IKPI )
																										{
																											j13array[0]+=IK2PI;
																										}
																										j13valid[0] = true;
																										for(int ij13 = 0; ij13 < 1; ++ij13)
																										{
																											if( !j13valid[ij13] )
																											{
																												continue;
																											}
																											j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																											{
																												IKReal dummyeval[1];
																												IKReal gconst10;
																												gconst10=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																												dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																												if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																												{
																													continue;

																												} else
																												{
																													{
																														IKReal j14array[1], cj14array[1], sj14array[1];
																														bool j14valid[1]={false};
																														j14array[0]=IKatan2(((gconst10)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst10)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																														sj14array[0]=IKsin(j14array[0]);
																														cj14array[0]=IKcos(j14array[0]);
																														if( j14array[0] > IKPI )
																														{
																															j14array[0]-=IK2PI;
																														}
																														else if( j14array[0] < -IKPI )
																														{
																															j14array[0]+=IK2PI;
																														}
																														j14valid[0] = true;
																														for(int ij14 = 0; ij14 < 1; ++ij14)
																														{
																															if( !j14valid[ij14] )
																															{
																																continue;
																															}
																															j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																															{
																																vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																solution.basesol.resize(6);
																																solution.basesol[0].foffset = j13;
																																solution.basesol[1].foffset = j14;
																																solution.basesol[2].foffset = j15;
																																solution.basesol[3].foffset = j16;
																																solution.basesol[4].foffset = j17;
																																solution.basesol[5].foffset = j18;
																																solution.vfree.resize(0);
																															}
																														}
																													}

																												}

																											}
																										}
																									}

																								}

																							}

																						} else
																						{
																							{
																								IKReal j14array[1], cj14array[1], sj14array[1];
																								bool j14valid[1]={false};
																								j14array[0]=IKatan2(((gconst9)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst9)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																								sj14array[0]=IKsin(j14array[0]);
																								cj14array[0]=IKcos(j14array[0]);
																								if( j14array[0] > IKPI )
																								{
																									j14array[0]-=IK2PI;
																								}
																								else if( j14array[0] < -IKPI )
																								{
																									j14array[0]+=IK2PI;
																								}
																								j14valid[0] = true;
																								for(int ij14 = 0; ij14 < 1; ++ij14)
																								{
																									if( !j14valid[ij14] )
																									{
																										continue;
																									}
																									j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																									{
																										IKReal dummyeval[1];
																										IKReal gconst11;
																										IKReal x726=(cj18)*(cj18);
																										IKReal x727=(sj18)*(sj18);
																										gconst11=IKsign(((((-1.00000000000000)*(cj17)*(r00)*(r01)*(x727)))+(((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r00)*(r01)*(x726)))+(((cj17)*(r10)*(r11)*(x726)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((r00)*(r02)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x727)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18)))));
																										IKReal x728=(cj18)*(cj18);
																										IKReal x729=(sj18)*(sj18);
																										dummyeval[0]=((((-1.00000000000000)*(cj17)*(r00)*(r01)*(x729)))+(((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r00)*(r01)*(x728)))+(((cj17)*(r10)*(r11)*(x728)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((r00)*(r02)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x729)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18))));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											{
																												IKReal dummyeval[1];
																												IKReal x730=(sj18)*(sj18);
																												IKReal x731=(cj18)*(cj18);
																												dummyeval[0]=((((-2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((-2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((-1.00000000000000)*(x731)*((r01)*(r01))))+(((-1.00000000000000)*(x730)*((r10)*(r10))))+(((-1.00000000000000)*(x731)*((r11)*(r11))))+(((-1.00000000000000)*(x730)*((r00)*(r00)))));
																												if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																												{
																													{
																														IKReal dummyeval[1];
																														IKReal x732=(sj18)*(sj18);
																														IKReal x733=(cj18)*(cj18);
																														dummyeval[0]=((((cj17)*(r01)*(r10)*(x733)))+(((cj17)*(r01)*(r10)*(x732)))+(((-1.00000000000000)*(r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r02)*(r11)*(sj17)))+(((cj18)*(r01)*(r12)*(sj17)))+(((r00)*(r12)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x732)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x733))));
																														if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																														{
																															continue;

																														} else
																														{
																															{
																																IKReal j13array[1], cj13array[1], sj13array[1];
																																bool j13valid[1]={false};
																																IKReal x734=(sj18)*(sj18);
																																IKReal x735=(cj18)*(cj18);
																																IKReal x736=((cj17)*(r00)*(r11)*(x734));
																																IKReal x737=((cj17)*(r00)*(r11)*(x735));
																																IKReal x738=((r02)*(r10)*(sj17)*(sj18));
																																IKReal x739=((cj18)*(r02)*(r11)*(sj17));
																																IKReal x740=((x737)+(x736)+(x739)+(x738));
																																IKReal x741=((cj17)*(r01)*(r10)*(x734));
																																IKReal x742=((cj18)*(r01)*(r12)*(sj17));
																																IKReal x743=((r00)*(r12)*(sj17)*(sj18));
																																IKReal x744=((cj17)*(r01)*(r10)*(x735));
																																IKReal x745=((x744)+(x742)+(x743)+(x741));
																																j13array[0]=IKatan2(((((IKabs(((x745)+(((-1.00000000000000)*(x740))))) != 0)?((IKReal)1/(((x745)+(((-1.00000000000000)*(x740)))))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((x740)+(((-1.00000000000000)*(x745))))) != 0)?((IKReal)1/(((x740)+(((-1.00000000000000)*(x745)))))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
																																sj13array[0]=IKsin(j13array[0]);
																																cj13array[0]=IKcos(j13array[0]);
																																if( j13array[0] > IKPI )
																																{
																																	j13array[0]-=IK2PI;
																																}
																																else if( j13array[0] < -IKPI )
																																{
																																	j13array[0]+=IK2PI;
																																}
																																j13valid[0] = true;
																																for(int ij13 = 0; ij13 < 1; ++ij13)
																																{
																																	if( !j13valid[ij13] )
																																	{
																																		continue;
																																	}
																																	j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																																	{
																																		vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																		solution.basesol.resize(6);
																																		solution.basesol[0].foffset = j13;
																																		solution.basesol[1].foffset = j14;
																																		solution.basesol[2].foffset = j15;
																																		solution.basesol[3].foffset = j16;
																																		solution.basesol[4].foffset = j17;
																																		solution.basesol[5].foffset = j18;
																																		solution.vfree.resize(0);
																																	}
																																}
																															}

																														}

																													}

																												} else
																												{
																													{
																														IKReal j13array[1], cj13array[1], sj13array[1];
																														bool j13valid[1]={false};
																														IKReal x746=(sj18)*(sj18);
																														IKReal x747=(cj18)*(cj18);
																														IKReal x748=(r10)*(r10);
																														IKReal x749=((x746)*(x748));
																														IKReal x750=(r00)*(r00);
																														IKReal x751=((x746)*(x750));
																														IKReal x752=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
																														IKReal x753=(r01)*(r01);
																														IKReal x754=((x747)*(x753));
																														IKReal x755=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
																														IKReal x756=(r11)*(r11);
																														IKReal x757=((x747)*(x756));
																														IKReal x758=((x755)+(x754)+(x757)+(x751)+(x752)+(x749));
																														j13array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x758) != 0)?((IKReal)1/(x758)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((((IKabs(x758) != 0)?((IKReal)1/(x758)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
																														sj13array[0]=IKsin(j13array[0]);
																														cj13array[0]=IKcos(j13array[0]);
																														if( j13array[0] > IKPI )
																														{
																															j13array[0]-=IK2PI;
																														}
																														else if( j13array[0] < -IKPI )
																														{
																															j13array[0]+=IK2PI;
																														}
																														j13valid[0] = true;
																														for(int ij13 = 0; ij13 < 1; ++ij13)
																														{
																															if( !j13valid[ij13] )
																															{
																																continue;
																															}
																															j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																															{
																																vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																solution.basesol.resize(6);
																																solution.basesol[0].foffset = j13;
																																solution.basesol[1].foffset = j14;
																																solution.basesol[2].foffset = j15;
																																solution.basesol[3].foffset = j16;
																																solution.basesol[4].foffset = j17;
																																solution.basesol[5].foffset = j18;
																																solution.vfree.resize(0);
																															}
																														}
																													}

																												}

																											}

																										} else
																										{
																											{
																												IKReal j13array[1], cj13array[1], sj13array[1];
																												bool j13valid[1]={false};
																												j13array[0]=IKatan2(((gconst11)*(((((-1.00000000000000)*(cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj14)))+(((r02)*(sj17)))+(((-1.00000000000000)*(cj15)*(r10)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj14)*(r10)*(sj15)*(sj18)))+(((cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(cj14)*(cj18)*(r11)*(sj15)))))), ((gconst11)*(((((-1.00000000000000)*(cj14)*(r00)*(sj15)*(sj18)))+(((-1.00000000000000)*(r12)*(sj17)))+(((cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj15)*(r00)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r01)*(sj14)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj14)*(cj18)*(r01)*(sj15)))))));
																												sj13array[0]=IKsin(j13array[0]);
																												cj13array[0]=IKcos(j13array[0]);
																												if( j13array[0] > IKPI )
																												{
																													j13array[0]-=IK2PI;
																												}
																												else if( j13array[0] < -IKPI )
																												{
																													j13array[0]+=IK2PI;
																												}
																												j13valid[0] = true;
																												for(int ij13 = 0; ij13 < 1; ++ij13)
																												{
																													if( !j13valid[ij13] )
																													{
																														continue;
																													}
																													j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j13;
																														solution.basesol[1].foffset = j14;
																														solution.basesol[2].foffset = j15;
																														solution.basesol[3].foffset = j16;
																														solution.basesol[4].foffset = j17;
																														solution.basesol[5].foffset = j18;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}
																								}
																							}

																						}

																					}

																				} else
																				{
																					if( 1 )
																					{
																						continue;

																					} else
																					{
																					}
																				}
																			}
																		}

																	} else
																	{
																		{
																			IKReal j13array[1], cj13array[1], sj13array[1];
																			bool j13valid[1]={false};
																			IKReal x759=(sj18)*(sj18);
																			IKReal x760=(cj18)*(cj18);
																			IKReal x761=((cj17)*(r01)*(r10)*(x759));
																			IKReal x762=((cj18)*(r01)*(r12)*(sj17));
																			IKReal x763=((r00)*(r12)*(sj17)*(sj18));
																			IKReal x764=((cj17)*(r01)*(r10)*(x760));
																			IKReal x765=((x764)+(x761)+(x762)+(x763));
																			IKReal x766=((cj17)*(r00)*(r11)*(x759));
																			IKReal x767=((cj17)*(r00)*(r11)*(x760));
																			IKReal x768=((r02)*(r10)*(sj17)*(sj18));
																			IKReal x769=((cj18)*(r02)*(r11)*(sj17));
																			IKReal x770=((x768)+(x769)+(x766)+(x767));
																			j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x765)))+(x770))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x765)))+(x770)))):(IKReal)1.0e30))*(((((cj16)*(r12)*(sj17)))+(((cj16)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj16)*(cj17)*(r11)*(sj18)))))), ((((IKabs(((x765)+(((-1.00000000000000)*(x770))))) != 0)?((IKReal)1/(((x765)+(((-1.00000000000000)*(x770)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj16)*(r02)*(sj17)))+(((cj16)*(cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj16)*(cj17)*(cj18)*(r00)))))));
																			sj13array[0]=IKsin(j13array[0]);
																			cj13array[0]=IKcos(j13array[0]);
																			if( j13array[0] > IKPI )
																			{
																				j13array[0]-=IK2PI;
																			}
																			else if( j13array[0] < -IKPI )
																			{
																				j13array[0]+=IK2PI;
																			}
																			j13valid[0] = true;
																			for(int ij13 = 0; ij13 < 1; ++ij13)
																			{
																				if( !j13valid[ij13] )
																				{
																					continue;
																				}
																				j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																				{
																					IKReal dummyeval[1];
																					IKReal gconst3;
																					gconst3=IKsign(((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15))))));
																					dummyeval[0]=((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15)))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal evalcond[9];
																							evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
																							evalcond[1]=((-0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																							evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
																							evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																							evalcond[4]=((1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																							evalcond[5]=((0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((-0.250000000000000)*(sj15)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																							evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																							evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																							evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																							if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									IKReal gconst4;
																									gconst4=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																									dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												{
																													IKReal dummyeval[1];
																													dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														continue;

																													} else
																													{
																														{
																															IKReal j14array[1], cj14array[1], sj14array[1];
																															bool j14valid[1]={false};
																															IKReal x771=(cj15)*(cj15);
																															IKReal x772=(sj15)*(sj15);
																															IKReal x773=((x772)+(x771));
																															j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x773) != 0)?((IKReal)1/(x773)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x773) != 0)?((IKReal)1/(x773)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																															sj14array[0]=IKsin(j14array[0]);
																															cj14array[0]=IKcos(j14array[0]);
																															if( j14array[0] > IKPI )
																															{
																																j14array[0]-=IK2PI;
																															}
																															else if( j14array[0] < -IKPI )
																															{
																																j14array[0]+=IK2PI;
																															}
																															j14valid[0] = true;
																															for(int ij14 = 0; ij14 < 1; ++ij14)
																															{
																																if( !j14valid[ij14] )
																																{
																																	continue;
																																}
																																j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j13;
																																	solution.basesol[1].foffset = j14;
																																	solution.basesol[2].foffset = j15;
																																	solution.basesol[3].foffset = j16;
																																	solution.basesol[4].foffset = j17;
																																	solution.basesol[5].foffset = j18;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}

																											} else
																											{
																												{
																													IKReal j14array[1], cj14array[1], sj14array[1];
																													bool j14valid[1]={false};
																													IKReal x774=(cj15)*(cj15);
																													IKReal x775=(sj15)*(sj15);
																													IKReal x776=((x775)+(x774));
																													j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x776) != 0)?((IKReal)1/(x776)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x776) != 0)?((IKReal)1/(x776)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																													sj14array[0]=IKsin(j14array[0]);
																													cj14array[0]=IKcos(j14array[0]);
																													if( j14array[0] > IKPI )
																													{
																														j14array[0]-=IK2PI;
																													}
																													else if( j14array[0] < -IKPI )
																													{
																														j14array[0]+=IK2PI;
																													}
																													j14valid[0] = true;
																													for(int ij14 = 0; ij14 < 1; ++ij14)
																													{
																														if( !j14valid[ij14] )
																														{
																															continue;
																														}
																														j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j13;
																															solution.basesol[1].foffset = j14;
																															solution.basesol[2].foffset = j15;
																															solution.basesol[3].foffset = j16;
																															solution.basesol[4].foffset = j17;
																															solution.basesol[5].foffset = j18;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j14array[1], cj14array[1], sj14array[1];
																											bool j14valid[1]={false};
																											j14array[0]=IKatan2(((gconst4)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst4)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																											sj14array[0]=IKsin(j14array[0]);
																											cj14array[0]=IKcos(j14array[0]);
																											if( j14array[0] > IKPI )
																											{
																												j14array[0]-=IK2PI;
																											}
																											else if( j14array[0] < -IKPI )
																											{
																												j14array[0]+=IK2PI;
																											}
																											j14valid[0] = true;
																											for(int ij14 = 0; ij14 < 1; ++ij14)
																											{
																												if( !j14valid[ij14] )
																												{
																													continue;
																												}
																												j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j13;
																													solution.basesol[1].foffset = j14;
																													solution.basesol[2].foffset = j15;
																													solution.basesol[3].foffset = j16;
																													solution.basesol[4].foffset = j17;
																													solution.basesol[5].foffset = j18;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
																								evalcond[1]=((0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																								evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
																								evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																								evalcond[4]=((-1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																								evalcond[5]=((-0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.250000000000000)*(sj15)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																								evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																								evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																								evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																								if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																								{
																									{
																										IKReal dummyeval[1];
																										IKReal gconst5;
																										gconst5=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																										dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											continue;

																										} else
																										{
																											{
																												IKReal j14array[1], cj14array[1], sj14array[1];
																												bool j14valid[1]={false};
																												j14array[0]=IKatan2(((gconst5)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst5)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																												sj14array[0]=IKsin(j14array[0]);
																												cj14array[0]=IKcos(j14array[0]);
																												if( j14array[0] > IKPI )
																												{
																													j14array[0]-=IK2PI;
																												}
																												else if( j14array[0] < -IKPI )
																												{
																													j14array[0]+=IK2PI;
																												}
																												j14valid[0] = true;
																												for(int ij14 = 0; ij14 < 1; ++ij14)
																												{
																													if( !j14valid[ij14] )
																													{
																														continue;
																													}
																													j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j13;
																														solution.basesol[1].foffset = j14;
																														solution.basesol[2].foffset = j15;
																														solution.basesol[3].foffset = j16;
																														solution.basesol[4].foffset = j17;
																														solution.basesol[5].foffset = j18;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}

																								} else
																								{
																									if( 1 )
																									{
																										continue;

																									} else
																									{
																									}
																								}
																							}
																						}

																					} else
																					{
																						{
																							IKReal j14array[1], cj14array[1], sj14array[1];
																							bool j14valid[1]={false};
																							j14array[0]=IKatan2(((gconst3)*(((((r22)*(sj15)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj16)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((cj17)*(cj18)*(r20)*(sj15)*(sj16)))))), ((gconst3)*(((((cj15)*(cj17)*(r21)*(sj16)*(sj18)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)*(sj16)))))));
																							sj14array[0]=IKsin(j14array[0]);
																							cj14array[0]=IKcos(j14array[0]);
																							if( j14array[0] > IKPI )
																							{
																								j14array[0]-=IK2PI;
																							}
																							else if( j14array[0] < -IKPI )
																							{
																								j14array[0]+=IK2PI;
																							}
																							j14valid[0] = true;
																							for(int ij14 = 0; ij14 < 1; ++ij14)
																							{
																								if( !j14valid[ij14] )
																								{
																									continue;
																								}
																								j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j13;
																									solution.basesol[1].foffset = j14;
																									solution.basesol[2].foffset = j15;
																									solution.basesol[3].foffset = j16;
																									solution.basesol[4].foffset = j17;
																									solution.basesol[5].foffset = j18;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}
																			}
																		}

																	}

																}

															} else
															{
																{
																	IKReal j13array[1], cj13array[1], sj13array[1];
																	bool j13valid[1]={false};
																	j13array[0]=IKatan2(((gconst1)*(((((cj16)*(r11)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj16)))+(((cj16)*(cj17)*(r12)))+(((-1.00000000000000)*(cj16)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(r10)*(sj16)*(sj18)))))), ((gconst1)*(((((-1.00000000000000)*(cj16)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj18)*(r01)*(sj16)))+(((-1.00000000000000)*(r00)*(sj16)*(sj18)))+(((cj16)*(r01)*(sj17)*(sj18)))+(((cj16)*(cj17)*(r02)))))));
																	sj13array[0]=IKsin(j13array[0]);
																	cj13array[0]=IKcos(j13array[0]);
																	if( j13array[0] > IKPI )
																	{
																		j13array[0]-=IK2PI;
																	}
																	else if( j13array[0] < -IKPI )
																	{
																		j13array[0]+=IK2PI;
																	}
																	j13valid[0] = true;
																	for(int ij13 = 0; ij13 < 1; ++ij13)
																	{
																		if( !j13valid[ij13] )
																		{
																			continue;
																		}
																		j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																		{
																			IKReal dummyeval[1];
																			IKReal gconst3;
																			gconst3=IKsign(((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15))))));
																			dummyeval[0]=((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15)))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				{
																					IKReal evalcond[9];
																					evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
																					evalcond[1]=((-0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																					evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
																					evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																					evalcond[4]=((1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																					evalcond[5]=((0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((-0.250000000000000)*(sj15)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																					evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																					evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																					evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																					if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							IKReal gconst4;
																							gconst4=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																							dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												continue;

																											} else
																											{
																												{
																													IKReal j14array[1], cj14array[1], sj14array[1];
																													bool j14valid[1]={false};
																													IKReal x777=(cj15)*(cj15);
																													IKReal x778=(sj15)*(sj15);
																													IKReal x779=((x777)+(x778));
																													j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x779) != 0)?((IKReal)1/(x779)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x779) != 0)?((IKReal)1/(x779)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																													sj14array[0]=IKsin(j14array[0]);
																													cj14array[0]=IKcos(j14array[0]);
																													if( j14array[0] > IKPI )
																													{
																														j14array[0]-=IK2PI;
																													}
																													else if( j14array[0] < -IKPI )
																													{
																														j14array[0]+=IK2PI;
																													}
																													j14valid[0] = true;
																													for(int ij14 = 0; ij14 < 1; ++ij14)
																													{
																														if( !j14valid[ij14] )
																														{
																															continue;
																														}
																														j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j13;
																															solution.basesol[1].foffset = j14;
																															solution.basesol[2].foffset = j15;
																															solution.basesol[3].foffset = j16;
																															solution.basesol[4].foffset = j17;
																															solution.basesol[5].foffset = j18;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j14array[1], cj14array[1], sj14array[1];
																											bool j14valid[1]={false};
																											IKReal x780=(cj15)*(cj15);
																											IKReal x781=(sj15)*(sj15);
																											IKReal x782=((x780)+(x781));
																											j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x782) != 0)?((IKReal)1/(x782)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x782) != 0)?((IKReal)1/(x782)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																											sj14array[0]=IKsin(j14array[0]);
																											cj14array[0]=IKcos(j14array[0]);
																											if( j14array[0] > IKPI )
																											{
																												j14array[0]-=IK2PI;
																											}
																											else if( j14array[0] < -IKPI )
																											{
																												j14array[0]+=IK2PI;
																											}
																											j14valid[0] = true;
																											for(int ij14 = 0; ij14 < 1; ++ij14)
																											{
																												if( !j14valid[ij14] )
																												{
																													continue;
																												}
																												j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j13;
																													solution.basesol[1].foffset = j14;
																													solution.basesol[2].foffset = j15;
																													solution.basesol[3].foffset = j16;
																													solution.basesol[4].foffset = j17;
																													solution.basesol[5].foffset = j18;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j14array[1], cj14array[1], sj14array[1];
																									bool j14valid[1]={false};
																									j14array[0]=IKatan2(((gconst4)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst4)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																									sj14array[0]=IKsin(j14array[0]);
																									cj14array[0]=IKcos(j14array[0]);
																									if( j14array[0] > IKPI )
																									{
																										j14array[0]-=IK2PI;
																									}
																									else if( j14array[0] < -IKPI )
																									{
																										j14array[0]+=IK2PI;
																									}
																									j14valid[0] = true;
																									for(int ij14 = 0; ij14 < 1; ++ij14)
																									{
																										if( !j14valid[ij14] )
																										{
																											continue;
																										}
																										j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j13;
																											solution.basesol[1].foffset = j14;
																											solution.basesol[2].foffset = j15;
																											solution.basesol[3].foffset = j16;
																											solution.basesol[4].foffset = j17;
																											solution.basesol[5].foffset = j18;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
																						evalcond[1]=((0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																						evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
																						evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																						evalcond[4]=((-1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																						evalcond[5]=((-0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.250000000000000)*(sj15)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																						evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																						evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																						evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																						if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																						{
																							{
																								IKReal dummyeval[1];
																								IKReal gconst5;
																								gconst5=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																								dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									continue;

																								} else
																								{
																									{
																										IKReal j14array[1], cj14array[1], sj14array[1];
																										bool j14valid[1]={false};
																										j14array[0]=IKatan2(((gconst5)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst5)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																										sj14array[0]=IKsin(j14array[0]);
																										cj14array[0]=IKcos(j14array[0]);
																										if( j14array[0] > IKPI )
																										{
																											j14array[0]-=IK2PI;
																										}
																										else if( j14array[0] < -IKPI )
																										{
																											j14array[0]+=IK2PI;
																										}
																										j14valid[0] = true;
																										for(int ij14 = 0; ij14 < 1; ++ij14)
																										{
																											if( !j14valid[ij14] )
																											{
																												continue;
																											}
																											j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																											{
																												vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																												solution.basesol.resize(6);
																												solution.basesol[0].foffset = j13;
																												solution.basesol[1].foffset = j14;
																												solution.basesol[2].foffset = j15;
																												solution.basesol[3].foffset = j16;
																												solution.basesol[4].foffset = j17;
																												solution.basesol[5].foffset = j18;
																												solution.vfree.resize(0);
																											}
																										}
																									}

																								}

																							}

																						} else
																						{
																							if( 1 )
																							{
																								continue;

																							} else
																							{
																							}
																						}
																					}
																				}

																			} else
																			{
																				{
																					IKReal j14array[1], cj14array[1], sj14array[1];
																					bool j14valid[1]={false};
																					j14array[0]=IKatan2(((gconst3)*(((((r22)*(sj15)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj16)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((cj17)*(cj18)*(r20)*(sj15)*(sj16)))))), ((gconst3)*(((((cj15)*(cj17)*(r21)*(sj16)*(sj18)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)*(sj16)))))));
																					sj14array[0]=IKsin(j14array[0]);
																					cj14array[0]=IKcos(j14array[0]);
																					if( j14array[0] > IKPI )
																					{
																						j14array[0]-=IK2PI;
																					}
																					else if( j14array[0] < -IKPI )
																					{
																						j14array[0]+=IK2PI;
																					}
																					j14valid[0] = true;
																					for(int ij14 = 0; ij14 < 1; ++ij14)
																					{
																						if( !j14valid[ij14] )
																						{
																							continue;
																						}
																						j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																						{
																							vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																							solution.basesol.resize(6);
																							solution.basesol[0].foffset = j13;
																							solution.basesol[1].foffset = j14;
																							solution.basesol[2].foffset = j15;
																							solution.basesol[3].foffset = j16;
																							solution.basesol[4].foffset = j17;
																							solution.basesol[5].foffset = j18;
																							solution.vfree.resize(0);
																						}
																					}
																				}

																			}

																		}
																	}
																}

															}

														}

													} else
													{
														{
															IKReal j14array[1], cj14array[1], sj14array[1];
															bool j14valid[1]={false};
															j14array[0]=IKatan2(((gconst2)*(((((r22)*(sj15)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj16)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((cj17)*(cj18)*(r20)*(sj15)*(sj16)))))), ((gconst2)*(((((cj15)*(cj17)*(r21)*(sj16)*(sj18)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)*(sj16)))))));
															sj14array[0]=IKsin(j14array[0]);
															cj14array[0]=IKcos(j14array[0]);
															if( j14array[0] > IKPI )
															{
																j14array[0]-=IK2PI;
															}
															else if( j14array[0] < -IKPI )
															{
																j14array[0]+=IK2PI;
															}
															j14valid[0] = true;
															for(int ij14 = 0; ij14 < 1; ++ij14)
															{
																if( !j14valid[ij14] )
																{
																	continue;
																}
																j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																{
																	IKReal dummyeval[1];
																	IKReal gconst6;
																	IKReal x783=(cj18)*(cj18);
																	IKReal x784=(sj18)*(sj18);
																	gconst6=IKsign(((((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x783)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x784)))+(((r01)*(r10)*(sj17)*(x783)))+(((r01)*(r10)*(sj17)*(x784)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11)))));
																	IKReal x785=(cj18)*(cj18);
																	IKReal x786=(sj18)*(sj18);
																	dummyeval[0]=((((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x786)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x785)))+(((r01)*(r10)*(sj17)*(x786)))+(((r01)*(r10)*(sj17)*(x785)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11))));
																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																	{
																		{
																			IKReal dummyeval[1];
																			IKReal x787=(sj18)*(sj18);
																			IKReal x788=(cj18)*(cj18);
																			dummyeval[0]=((((-1.00000000000000)*(cj17)*(r01)*(r10)*(x787)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x788)))+(((cj17)*(r00)*(r11)*(x788)))+(((cj17)*(r00)*(r11)*(x787)))+(((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				continue;

																			} else
																			{
																				{
																					IKReal j13array[1], cj13array[1], sj13array[1];
																					bool j13valid[1]={false};
																					IKReal x789=(sj18)*(sj18);
																					IKReal x790=(cj18)*(cj18);
																					IKReal x791=((cj17)*(r01)*(r10)*(x789));
																					IKReal x792=((cj18)*(r01)*(r12)*(sj17));
																					IKReal x793=((r00)*(r12)*(sj17)*(sj18));
																					IKReal x794=((cj17)*(r01)*(r10)*(x790));
																					IKReal x795=((x791)+(x793)+(x792)+(x794));
																					IKReal x796=((cj17)*(r00)*(r11)*(x789));
																					IKReal x797=((cj17)*(r00)*(r11)*(x790));
																					IKReal x798=((r02)*(r10)*(sj17)*(sj18));
																					IKReal x799=((cj18)*(r02)*(r11)*(sj17));
																					IKReal x800=((x797)+(x796)+(x799)+(x798));
																					j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x795)))+(x800))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x795)))+(x800)))):(IKReal)1.0e30))*(((((cj16)*(r12)*(sj17)))+(((cj16)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj16)*(cj17)*(r11)*(sj18)))))), ((((IKabs(((x795)+(((-1.00000000000000)*(x800))))) != 0)?((IKReal)1/(((x795)+(((-1.00000000000000)*(x800)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj16)*(r02)*(sj17)))+(((cj16)*(cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj16)*(cj17)*(cj18)*(r00)))))));
																					sj13array[0]=IKsin(j13array[0]);
																					cj13array[0]=IKcos(j13array[0]);
																					if( j13array[0] > IKPI )
																					{
																						j13array[0]-=IK2PI;
																					}
																					else if( j13array[0] < -IKPI )
																					{
																						j13array[0]+=IK2PI;
																					}
																					j13valid[0] = true;
																					for(int ij13 = 0; ij13 < 1; ++ij13)
																					{
																						if( !j13valid[ij13] )
																						{
																							continue;
																						}
																						j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																						{
																							vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																							solution.basesol.resize(6);
																							solution.basesol[0].foffset = j13;
																							solution.basesol[1].foffset = j14;
																							solution.basesol[2].foffset = j15;
																							solution.basesol[3].foffset = j16;
																							solution.basesol[4].foffset = j17;
																							solution.basesol[5].foffset = j18;
																							solution.vfree.resize(0);
																						}
																					}
																				}

																			}

																		}

																	} else
																	{
																		{
																			IKReal j13array[1], cj13array[1], sj13array[1];
																			bool j13valid[1]={false};
																			j13array[0]=IKatan2(((gconst6)*(((((cj16)*(r11)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj16)))+(((cj16)*(cj17)*(r12)))+(((-1.00000000000000)*(cj16)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(r10)*(sj16)*(sj18)))))), ((gconst6)*(((((-1.00000000000000)*(cj16)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj18)*(r01)*(sj16)))+(((-1.00000000000000)*(r00)*(sj16)*(sj18)))+(((cj16)*(r01)*(sj17)*(sj18)))+(((cj16)*(cj17)*(r02)))))));
																			sj13array[0]=IKsin(j13array[0]);
																			cj13array[0]=IKcos(j13array[0]);
																			if( j13array[0] > IKPI )
																			{
																				j13array[0]-=IK2PI;
																			}
																			else if( j13array[0] < -IKPI )
																			{
																				j13array[0]+=IK2PI;
																			}
																			j13valid[0] = true;
																			for(int ij13 = 0; ij13 < 1; ++ij13)
																			{
																				if( !j13valid[ij13] )
																				{
																					continue;
																				}
																				j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

																				{
																					vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																					solution.basesol.resize(6);
																					solution.basesol[0].foffset = j13;
																					solution.basesol[1].foffset = j14;
																					solution.basesol[2].foffset = j15;
																					solution.basesol[3].foffset = j16;
																					solution.basesol[4].foffset = j17;
																					solution.basesol[5].foffset = j18;
																					solution.vfree.resize(0);
																				}
																			}
																		}

																	}

																}
															}
														}

													}

												}
											}
										}

									}

								}

							} else
							{
								{
									IKReal j13array[1], cj13array[1], sj13array[1];
									bool j13valid[1]={false};
									j13array[0]=IKatan2(((gconst0)*(((((cj16)*(r11)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj16)))+(((cj16)*(cj17)*(r12)))+(((-1.00000000000000)*(cj16)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(r10)*(sj16)*(sj18)))))), ((gconst0)*(((((-1.00000000000000)*(cj16)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj18)*(r01)*(sj16)))+(((-1.00000000000000)*(r00)*(sj16)*(sj18)))+(((cj16)*(r01)*(sj17)*(sj18)))+(((cj16)*(cj17)*(r02)))))));
									sj13array[0]=IKsin(j13array[0]);
									cj13array[0]=IKcos(j13array[0]);
									if( j13array[0] > IKPI )
									{
										j13array[0]-=IK2PI;
									}
									else if( j13array[0] < -IKPI )
									{
										j13array[0]+=IK2PI;
									}
									j13valid[0] = true;
									for(int ij13 = 0; ij13 < 1; ++ij13)
									{
										if( !j13valid[ij13] )
										{
											continue;
										}
										j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

										{
											IKReal dummyeval[1];
											dummyeval[0]=sj16;
											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
											{
												{
													IKReal dummyeval[1];
													dummyeval[0]=cj16;
													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
													{
														{
															IKReal evalcond[7];
															evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j16)), 6.28318530717959)));
															evalcond[1]=((((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
															evalcond[2]=((((-1.00000000000000)*(cj18)*(r20)*(sj17)))+(((cj17)*(r22)))+(((r21)*(sj17)*(sj18))));
															evalcond[3]=((-0.0950000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
															evalcond[4]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
															evalcond[5]=((1.00000000000000)+(((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
															evalcond[6]=((((-1.00000000000000)*(cj13)*(r01)*(sj17)*(sj18)))+(((cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj17)*(r12)*(sj13)))+(((cj13)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj17)*(sj18))));
															if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
															{
																{
																	IKReal j15array[1], cj15array[1], sj15array[1];
																	bool j15valid[1]={false};
																	j15array[0]=IKatan2(((0.120000000000000)+(((-4.00000000000000)*(cj18)*(npy)))+(((-4.00000000000000)*(npx)*(sj18)))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
																	sj15array[0]=IKsin(j15array[0]);
																	cj15array[0]=IKcos(j15array[0]);
																	if( j15array[0] > IKPI )
																	{
																		j15array[0]-=IK2PI;
																	}
																	else if( j15array[0] < -IKPI )
																	{
																		j15array[0]+=IK2PI;
																	}
																	j15valid[0] = true;
																	for(int ij15 = 0; ij15 < 1; ++ij15)
																	{
																		if( !j15valid[ij15] )
																		{
																			continue;
																		}
																		j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

																		{
																			IKReal dummyeval[1];
																			IKReal gconst15;
																			gconst15=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																			dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				continue;

																			} else
																			{
																				{
																					IKReal j14array[1], cj14array[1], sj14array[1];
																					bool j14valid[1]={false};
																					j14array[0]=IKatan2(((gconst15)*(((((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst15)*(((((r20)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r21)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																					sj14array[0]=IKsin(j14array[0]);
																					cj14array[0]=IKcos(j14array[0]);
																					if( j14array[0] > IKPI )
																					{
																						j14array[0]-=IK2PI;
																					}
																					else if( j14array[0] < -IKPI )
																					{
																						j14array[0]+=IK2PI;
																					}
																					j14valid[0] = true;
																					for(int ij14 = 0; ij14 < 1; ++ij14)
																					{
																						if( !j14valid[ij14] )
																						{
																							continue;
																						}
																						j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																						{
																							vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																							solution.basesol.resize(6);
																							solution.basesol[0].foffset = j13;
																							solution.basesol[1].foffset = j14;
																							solution.basesol[2].foffset = j15;
																							solution.basesol[3].foffset = j16;
																							solution.basesol[4].foffset = j17;
																							solution.basesol[5].foffset = j18;
																							solution.vfree.resize(0);
																						}
																					}
																				}

																			}

																		}
																	}
																}

															} else
															{
																evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j16)), 6.28318530717959)));
																evalcond[1]=((((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																evalcond[2]=((((-1.00000000000000)*(cj18)*(r20)*(sj17)))+(((cj17)*(r22)))+(((r21)*(sj17)*(sj18))));
																evalcond[3]=((0.0950000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																evalcond[4]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																evalcond[5]=((-1.00000000000000)+(((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																evalcond[6]=((((-1.00000000000000)*(cj13)*(r01)*(sj17)*(sj18)))+(((cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj17)*(r12)*(sj13)))+(((cj13)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj17)*(sj18))));
																if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
																{
																	{
																		IKReal j15array[1], cj15array[1], sj15array[1];
																		bool j15valid[1]={false};
																		j15array[0]=IKatan2(((0.120000000000000)+(((4.00000000000000)*(cj18)*(npy)))+(((4.00000000000000)*(npx)*(sj18)))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
																		sj15array[0]=IKsin(j15array[0]);
																		cj15array[0]=IKcos(j15array[0]);
																		if( j15array[0] > IKPI )
																		{
																			j15array[0]-=IK2PI;
																		}
																		else if( j15array[0] < -IKPI )
																		{
																			j15array[0]+=IK2PI;
																		}
																		j15valid[0] = true;
																		for(int ij15 = 0; ij15 < 1; ++ij15)
																		{
																			if( !j15valid[ij15] )
																			{
																				continue;
																			}
																			j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

																			{
																				IKReal dummyeval[1];
																				IKReal gconst16;
																				gconst16=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																				dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																				if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																				{
																					{
																						IKReal dummyeval[1];
																						dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							continue;

																						} else
																						{
																							{
																								IKReal j14array[1], cj14array[1], sj14array[1];
																								bool j14valid[1]={false};
																								IKReal x801=(cj15)*(cj15);
																								IKReal x802=(sj15)*(sj15);
																								IKReal x803=((x801)+(x802));
																								j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x803) != 0)?((IKReal)1/(x803)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x803) != 0)?((IKReal)1/(x803)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r20)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																								sj14array[0]=IKsin(j14array[0]);
																								cj14array[0]=IKcos(j14array[0]);
																								if( j14array[0] > IKPI )
																								{
																									j14array[0]-=IK2PI;
																								}
																								else if( j14array[0] < -IKPI )
																								{
																									j14array[0]+=IK2PI;
																								}
																								j14valid[0] = true;
																								for(int ij14 = 0; ij14 < 1; ++ij14)
																								{
																									if( !j14valid[ij14] )
																									{
																										continue;
																									}
																									j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																									{
																										vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																										solution.basesol.resize(6);
																										solution.basesol[0].foffset = j13;
																										solution.basesol[1].foffset = j14;
																										solution.basesol[2].foffset = j15;
																										solution.basesol[3].foffset = j16;
																										solution.basesol[4].foffset = j17;
																										solution.basesol[5].foffset = j18;
																										solution.vfree.resize(0);
																									}
																								}
																							}

																						}

																					}

																				} else
																				{
																					{
																						IKReal j14array[1], cj14array[1], sj14array[1];
																						bool j14valid[1]={false};
																						j14array[0]=IKatan2(((gconst16)*(((((r10)*(sj13)*(sj15)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj13)*(r00)*(sj15)*(sj18)))+(((cj15)*(r20)*(sj18)))+(((cj13)*(cj18)*(r01)*(sj15)))+(((cj18)*(r11)*(sj13)*(sj15)))))), ((gconst16)*(((((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj13)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(r00)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj18)*(r01)))))));
																						sj14array[0]=IKsin(j14array[0]);
																						cj14array[0]=IKcos(j14array[0]);
																						if( j14array[0] > IKPI )
																						{
																							j14array[0]-=IK2PI;
																						}
																						else if( j14array[0] < -IKPI )
																						{
																							j14array[0]+=IK2PI;
																						}
																						j14valid[0] = true;
																						for(int ij14 = 0; ij14 < 1; ++ij14)
																						{
																							if( !j14valid[ij14] )
																							{
																								continue;
																							}
																							j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																							{
																								vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																								solution.basesol.resize(6);
																								solution.basesol[0].foffset = j13;
																								solution.basesol[1].foffset = j14;
																								solution.basesol[2].foffset = j15;
																								solution.basesol[3].foffset = j16;
																								solution.basesol[4].foffset = j17;
																								solution.basesol[5].foffset = j18;
																								solution.vfree.resize(0);
																							}
																						}
																					}

																				}

																			}
																		}
																	}

																} else
																{
																	evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
																	evalcond[1]=((-0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																	evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
																	evalcond[3]=((1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																	evalcond[4]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																	evalcond[5]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																	evalcond[6]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																	if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
																	{
																		{
																			IKReal j15array[1], cj15array[1], sj15array[1];
																			bool j15valid[1]={false};
																			j15array[0]=IKatan2(((0.120000000000000)+(((4.00000000000000)*(npy)*(sj17)*(sj18)))+(((-4.00000000000000)*(cj18)*(npx)*(sj17)))+(((4.00000000000000)*(cj17)*(npz)))+(((0.360000000000000)*(sj17)))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
																			sj15array[0]=IKsin(j15array[0]);
																			cj15array[0]=IKcos(j15array[0]);
																			if( j15array[0] > IKPI )
																			{
																				j15array[0]-=IK2PI;
																			}
																			else if( j15array[0] < -IKPI )
																			{
																				j15array[0]+=IK2PI;
																			}
																			j15valid[0] = true;
																			for(int ij15 = 0; ij15 < 1; ++ij15)
																			{
																				if( !j15valid[ij15] )
																				{
																					continue;
																				}
																				j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

																				{
																					IKReal dummyeval[1];
																					IKReal gconst17;
																					gconst17=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																					dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										continue;

																									} else
																									{
																										{
																											IKReal j14array[1], cj14array[1], sj14array[1];
																											bool j14valid[1]={false};
																											IKReal x804=(cj15)*(cj15);
																											IKReal x805=(sj15)*(sj15);
																											IKReal x806=((x805)+(x804));
																											j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x806) != 0)?((IKReal)1/(x806)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x806) != 0)?((IKReal)1/(x806)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																											sj14array[0]=IKsin(j14array[0]);
																											cj14array[0]=IKcos(j14array[0]);
																											if( j14array[0] > IKPI )
																											{
																												j14array[0]-=IK2PI;
																											}
																											else if( j14array[0] < -IKPI )
																											{
																												j14array[0]+=IK2PI;
																											}
																											j14valid[0] = true;
																											for(int ij14 = 0; ij14 < 1; ++ij14)
																											{
																												if( !j14valid[ij14] )
																												{
																													continue;
																												}
																												j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j13;
																													solution.basesol[1].foffset = j14;
																													solution.basesol[2].foffset = j15;
																													solution.basesol[3].foffset = j16;
																													solution.basesol[4].foffset = j17;
																													solution.basesol[5].foffset = j18;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j14array[1], cj14array[1], sj14array[1];
																									bool j14valid[1]={false};
																									IKReal x807=(cj15)*(cj15);
																									IKReal x808=(sj15)*(sj15);
																									IKReal x809=((x808)+(x807));
																									j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x809) != 0)?((IKReal)1/(x809)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x809) != 0)?((IKReal)1/(x809)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																									sj14array[0]=IKsin(j14array[0]);
																									cj14array[0]=IKcos(j14array[0]);
																									if( j14array[0] > IKPI )
																									{
																										j14array[0]-=IK2PI;
																									}
																									else if( j14array[0] < -IKPI )
																									{
																										j14array[0]+=IK2PI;
																									}
																									j14valid[0] = true;
																									for(int ij14 = 0; ij14 < 1; ++ij14)
																									{
																										if( !j14valid[ij14] )
																										{
																											continue;
																										}
																										j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j13;
																											solution.basesol[1].foffset = j14;
																											solution.basesol[2].foffset = j15;
																											solution.basesol[3].foffset = j16;
																											solution.basesol[4].foffset = j17;
																											solution.basesol[5].foffset = j18;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j14array[1], cj14array[1], sj14array[1];
																							bool j14valid[1]={false};
																							j14array[0]=IKatan2(((gconst17)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst17)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																							sj14array[0]=IKsin(j14array[0]);
																							cj14array[0]=IKcos(j14array[0]);
																							if( j14array[0] > IKPI )
																							{
																								j14array[0]-=IK2PI;
																							}
																							else if( j14array[0] < -IKPI )
																							{
																								j14array[0]+=IK2PI;
																							}
																							j14valid[0] = true;
																							for(int ij14 = 0; ij14 < 1; ++ij14)
																							{
																								if( !j14valid[ij14] )
																								{
																									continue;
																								}
																								j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j13;
																									solution.basesol[1].foffset = j14;
																									solution.basesol[2].foffset = j15;
																									solution.basesol[3].foffset = j16;
																									solution.basesol[4].foffset = j17;
																									solution.basesol[5].foffset = j18;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}
																			}
																		}

																	} else
																	{
																		evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
																		evalcond[1]=((0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																		evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
																		evalcond[3]=((-1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																		evalcond[4]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																		evalcond[5]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																		evalcond[6]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																		if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
																		{
																			{
																				IKReal j15array[1], cj15array[1], sj15array[1];
																				bool j15valid[1]={false};
																				j15array[0]=IKatan2(((0.120000000000000)+(((4.00000000000000)*(cj18)*(npx)*(sj17)))+(((-4.00000000000000)*(cj17)*(npz)))+(((-0.360000000000000)*(sj17)))+(((-4.00000000000000)*(npy)*(sj17)*(sj18)))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
																				sj15array[0]=IKsin(j15array[0]);
																				cj15array[0]=IKcos(j15array[0]);
																				if( j15array[0] > IKPI )
																				{
																					j15array[0]-=IK2PI;
																				}
																				else if( j15array[0] < -IKPI )
																				{
																					j15array[0]+=IK2PI;
																				}
																				j15valid[0] = true;
																				for(int ij15 = 0; ij15 < 1; ++ij15)
																				{
																					if( !j15valid[ij15] )
																					{
																						continue;
																					}
																					j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

																					{
																						IKReal dummyeval[1];
																						IKReal gconst18;
																						gconst18=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																						dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							continue;

																						} else
																						{
																							{
																								IKReal j14array[1], cj14array[1], sj14array[1];
																								bool j14valid[1]={false};
																								j14array[0]=IKatan2(((gconst18)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst18)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																								sj14array[0]=IKsin(j14array[0]);
																								cj14array[0]=IKcos(j14array[0]);
																								if( j14array[0] > IKPI )
																								{
																									j14array[0]-=IK2PI;
																								}
																								else if( j14array[0] < -IKPI )
																								{
																									j14array[0]+=IK2PI;
																								}
																								j14valid[0] = true;
																								for(int ij14 = 0; ij14 < 1; ++ij14)
																								{
																									if( !j14valid[ij14] )
																									{
																										continue;
																									}
																									j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																									{
																										vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																										solution.basesol.resize(6);
																										solution.basesol[0].foffset = j13;
																										solution.basesol[1].foffset = j14;
																										solution.basesol[2].foffset = j15;
																										solution.basesol[3].foffset = j16;
																										solution.basesol[4].foffset = j17;
																										solution.basesol[5].foffset = j18;
																										solution.vfree.resize(0);
																									}
																								}
																							}

																						}

																					}
																				}
																			}

																		} else
																		{
																			if( 1 )
																			{
																				continue;

																			} else
																			{
																			}
																		}
																	}
																}
															}
														}

													} else
													{
														{
															IKReal j15array[1], cj15array[1], sj15array[1];
															bool j15valid[1]={false};
															j15array[0]=IKatan2(((((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((((4.00000000000000)*(npy)*(sj17)*(sj18)))+(((-0.380000000000000)*(sj16)))+(((-4.00000000000000)*(cj18)*(npx)*(sj17)))+(((0.120000000000000)*(cj16)))+(((4.00000000000000)*(cj17)*(npz)))+(((0.360000000000000)*(sj17)))))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
															sj15array[0]=IKsin(j15array[0]);
															cj15array[0]=IKcos(j15array[0]);
															if( j15array[0] > IKPI )
															{
																j15array[0]-=IK2PI;
															}
															else if( j15array[0] < -IKPI )
															{
																j15array[0]+=IK2PI;
															}
															j15valid[0] = true;
															for(int ij15 = 0; ij15 < 1; ++ij15)
															{
																if( !j15valid[ij15] )
																{
																	continue;
																}
																j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

																{
																	IKReal dummyeval[1];
																	IKReal gconst12;
																	gconst12=IKsign(((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15))))));
																	dummyeval[0]=((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15)))));
																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																	{
																		{
																			IKReal evalcond[9];
																			evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
																			evalcond[1]=((-0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																			evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
																			evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																			evalcond[4]=((1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																			evalcond[5]=((0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((-0.250000000000000)*(sj15)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																			evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																			evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																			evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																			if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																			{
																				{
																					IKReal dummyeval[1];
																					IKReal gconst13;
																					gconst13=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																					dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										continue;

																									} else
																									{
																										{
																											IKReal j14array[1], cj14array[1], sj14array[1];
																											bool j14valid[1]={false};
																											IKReal x810=(cj15)*(cj15);
																											IKReal x811=(sj15)*(sj15);
																											IKReal x812=((x810)+(x811));
																											j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x812) != 0)?((IKReal)1/(x812)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x812) != 0)?((IKReal)1/(x812)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																											sj14array[0]=IKsin(j14array[0]);
																											cj14array[0]=IKcos(j14array[0]);
																											if( j14array[0] > IKPI )
																											{
																												j14array[0]-=IK2PI;
																											}
																											else if( j14array[0] < -IKPI )
																											{
																												j14array[0]+=IK2PI;
																											}
																											j14valid[0] = true;
																											for(int ij14 = 0; ij14 < 1; ++ij14)
																											{
																												if( !j14valid[ij14] )
																												{
																													continue;
																												}
																												j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j13;
																													solution.basesol[1].foffset = j14;
																													solution.basesol[2].foffset = j15;
																													solution.basesol[3].foffset = j16;
																													solution.basesol[4].foffset = j17;
																													solution.basesol[5].foffset = j18;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j14array[1], cj14array[1], sj14array[1];
																									bool j14valid[1]={false};
																									IKReal x813=(cj15)*(cj15);
																									IKReal x814=(sj15)*(sj15);
																									IKReal x815=((x814)+(x813));
																									j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x815) != 0)?((IKReal)1/(x815)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x815) != 0)?((IKReal)1/(x815)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																									sj14array[0]=IKsin(j14array[0]);
																									cj14array[0]=IKcos(j14array[0]);
																									if( j14array[0] > IKPI )
																									{
																										j14array[0]-=IK2PI;
																									}
																									else if( j14array[0] < -IKPI )
																									{
																										j14array[0]+=IK2PI;
																									}
																									j14valid[0] = true;
																									for(int ij14 = 0; ij14 < 1; ++ij14)
																									{
																										if( !j14valid[ij14] )
																										{
																											continue;
																										}
																										j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j13;
																											solution.basesol[1].foffset = j14;
																											solution.basesol[2].foffset = j15;
																											solution.basesol[3].foffset = j16;
																											solution.basesol[4].foffset = j17;
																											solution.basesol[5].foffset = j18;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j14array[1], cj14array[1], sj14array[1];
																							bool j14valid[1]={false};
																							j14array[0]=IKatan2(((gconst13)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst13)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																							sj14array[0]=IKsin(j14array[0]);
																							cj14array[0]=IKcos(j14array[0]);
																							if( j14array[0] > IKPI )
																							{
																								j14array[0]-=IK2PI;
																							}
																							else if( j14array[0] < -IKPI )
																							{
																								j14array[0]+=IK2PI;
																							}
																							j14valid[0] = true;
																							for(int ij14 = 0; ij14 < 1; ++ij14)
																							{
																								if( !j14valid[ij14] )
																								{
																									continue;
																								}
																								j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j13;
																									solution.basesol[1].foffset = j14;
																									solution.basesol[2].foffset = j15;
																									solution.basesol[3].foffset = j16;
																									solution.basesol[4].foffset = j17;
																									solution.basesol[5].foffset = j18;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}

																			} else
																			{
																				evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
																				evalcond[1]=((0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																				evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
																				evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																				evalcond[4]=((-1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																				evalcond[5]=((-0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.250000000000000)*(sj15)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																				evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																				evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																				evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																				if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																				{
																					{
																						IKReal dummyeval[1];
																						IKReal gconst14;
																						gconst14=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																						dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							continue;

																						} else
																						{
																							{
																								IKReal j14array[1], cj14array[1], sj14array[1];
																								bool j14valid[1]={false};
																								j14array[0]=IKatan2(((gconst14)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst14)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																								sj14array[0]=IKsin(j14array[0]);
																								cj14array[0]=IKcos(j14array[0]);
																								if( j14array[0] > IKPI )
																								{
																									j14array[0]-=IK2PI;
																								}
																								else if( j14array[0] < -IKPI )
																								{
																									j14array[0]+=IK2PI;
																								}
																								j14valid[0] = true;
																								for(int ij14 = 0; ij14 < 1; ++ij14)
																								{
																									if( !j14valid[ij14] )
																									{
																										continue;
																									}
																									j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																									{
																										vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																										solution.basesol.resize(6);
																										solution.basesol[0].foffset = j13;
																										solution.basesol[1].foffset = j14;
																										solution.basesol[2].foffset = j15;
																										solution.basesol[3].foffset = j16;
																										solution.basesol[4].foffset = j17;
																										solution.basesol[5].foffset = j18;
																										solution.vfree.resize(0);
																									}
																								}
																							}

																						}

																					}

																				} else
																				{
																					if( 1 )
																					{
																						continue;

																					} else
																					{
																					}
																				}
																			}
																		}

																	} else
																	{
																		{
																			IKReal j14array[1], cj14array[1], sj14array[1];
																			bool j14valid[1]={false};
																			j14array[0]=IKatan2(((gconst12)*(((((r22)*(sj15)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj16)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((cj17)*(cj18)*(r20)*(sj15)*(sj16)))))), ((gconst12)*(((((cj15)*(cj17)*(r21)*(sj16)*(sj18)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)*(sj16)))))));
																			sj14array[0]=IKsin(j14array[0]);
																			cj14array[0]=IKcos(j14array[0]);
																			if( j14array[0] > IKPI )
																			{
																				j14array[0]-=IK2PI;
																			}
																			else if( j14array[0] < -IKPI )
																			{
																				j14array[0]+=IK2PI;
																			}
																			j14valid[0] = true;
																			for(int ij14 = 0; ij14 < 1; ++ij14)
																			{
																				if( !j14valid[ij14] )
																				{
																					continue;
																				}
																				j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																				{
																					vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																					solution.basesol.resize(6);
																					solution.basesol[0].foffset = j13;
																					solution.basesol[1].foffset = j14;
																					solution.basesol[2].foffset = j15;
																					solution.basesol[3].foffset = j16;
																					solution.basesol[4].foffset = j17;
																					solution.basesol[5].foffset = j18;
																					solution.vfree.resize(0);
																				}
																			}
																		}

																	}

																}
															}
														}

													}

												}

											} else
											{
												{
													IKReal j15array[1], cj15array[1], sj15array[1];
													bool j15valid[1]={false};
													j15array[0]=IKatan2(((((IKabs(sj16) != 0)?((IKReal)1/(sj16)):(IKReal)1.0e30))*(((((0.120000000000000)*(sj16)))+(((-4.00000000000000)*(cj18)*(npy)))+(((0.380000000000000)*(cj16)))+(((-4.00000000000000)*(npx)*(sj18)))))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
													sj15array[0]=IKsin(j15array[0]);
													cj15array[0]=IKcos(j15array[0]);
													if( j15array[0] > IKPI )
													{
														j15array[0]-=IK2PI;
													}
													else if( j15array[0] < -IKPI )
													{
														j15array[0]+=IK2PI;
													}
													j15valid[0] = true;
													for(int ij15 = 0; ij15 < 1; ++ij15)
													{
														if( !j15valid[ij15] )
														{
															continue;
														}
														j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

														{
															IKReal dummyeval[1];
															IKReal gconst12;
															gconst12=IKsign(((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15))))));
															dummyeval[0]=((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15)))));
															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
															{
																{
																	IKReal evalcond[9];
																	evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
																	evalcond[1]=((-0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																	evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
																	evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																	evalcond[4]=((1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																	evalcond[5]=((0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((-0.250000000000000)*(sj15)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																	evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																	evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																	evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																	if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																	{
																		{
																			IKReal dummyeval[1];
																			IKReal gconst13;
																			gconst13=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
																			dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				{
																					IKReal dummyeval[1];
																					dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								continue;

																							} else
																							{
																								{
																									IKReal j14array[1], cj14array[1], sj14array[1];
																									bool j14valid[1]={false};
																									IKReal x816=(cj15)*(cj15);
																									IKReal x817=(sj15)*(sj15);
																									IKReal x818=((x816)+(x817));
																									j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x818) != 0)?((IKReal)1/(x818)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x818) != 0)?((IKReal)1/(x818)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
																									sj14array[0]=IKsin(j14array[0]);
																									cj14array[0]=IKcos(j14array[0]);
																									if( j14array[0] > IKPI )
																									{
																										j14array[0]-=IK2PI;
																									}
																									else if( j14array[0] < -IKPI )
																									{
																										j14array[0]+=IK2PI;
																									}
																									j14valid[0] = true;
																									for(int ij14 = 0; ij14 < 1; ++ij14)
																									{
																										if( !j14valid[ij14] )
																										{
																											continue;
																										}
																										j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j13;
																											solution.basesol[1].foffset = j14;
																											solution.basesol[2].foffset = j15;
																											solution.basesol[3].foffset = j16;
																											solution.basesol[4].foffset = j17;
																											solution.basesol[5].foffset = j18;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j14array[1], cj14array[1], sj14array[1];
																							bool j14valid[1]={false};
																							IKReal x819=(cj15)*(cj15);
																							IKReal x820=(sj15)*(sj15);
																							IKReal x821=((x819)+(x820));
																							j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x821) != 0)?((IKReal)1/(x821)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x821) != 0)?((IKReal)1/(x821)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																							sj14array[0]=IKsin(j14array[0]);
																							cj14array[0]=IKcos(j14array[0]);
																							if( j14array[0] > IKPI )
																							{
																								j14array[0]-=IK2PI;
																							}
																							else if( j14array[0] < -IKPI )
																							{
																								j14array[0]+=IK2PI;
																							}
																							j14valid[0] = true;
																							for(int ij14 = 0; ij14 < 1; ++ij14)
																							{
																								if( !j14valid[ij14] )
																								{
																									continue;
																								}
																								j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j13;
																									solution.basesol[1].foffset = j14;
																									solution.basesol[2].foffset = j15;
																									solution.basesol[3].foffset = j16;
																									solution.basesol[4].foffset = j17;
																									solution.basesol[5].foffset = j18;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}

																			} else
																			{
																				{
																					IKReal j14array[1], cj14array[1], sj14array[1];
																					bool j14valid[1]={false};
																					j14array[0]=IKatan2(((gconst13)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst13)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
																					sj14array[0]=IKsin(j14array[0]);
																					cj14array[0]=IKcos(j14array[0]);
																					if( j14array[0] > IKPI )
																					{
																						j14array[0]-=IK2PI;
																					}
																					else if( j14array[0] < -IKPI )
																					{
																						j14array[0]+=IK2PI;
																					}
																					j14valid[0] = true;
																					for(int ij14 = 0; ij14 < 1; ++ij14)
																					{
																						if( !j14valid[ij14] )
																						{
																							continue;
																						}
																						j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																						{
																							vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																							solution.basesol.resize(6);
																							solution.basesol[0].foffset = j13;
																							solution.basesol[1].foffset = j14;
																							solution.basesol[2].foffset = j15;
																							solution.basesol[3].foffset = j16;
																							solution.basesol[4].foffset = j17;
																							solution.basesol[5].foffset = j18;
																							solution.vfree.resize(0);
																						}
																					}
																				}

																			}

																		}

																	} else
																	{
																		evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
																		evalcond[1]=((0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
																		evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
																		evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
																		evalcond[4]=((-1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
																		evalcond[5]=((-0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.250000000000000)*(sj15)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
																		evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
																		evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
																		evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
																		if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																		{
																			{
																				IKReal dummyeval[1];
																				IKReal gconst14;
																				gconst14=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
																				dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
																				if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																				{
																					continue;

																				} else
																				{
																					{
																						IKReal j14array[1], cj14array[1], sj14array[1];
																						bool j14valid[1]={false};
																						j14array[0]=IKatan2(((gconst14)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst14)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
																						sj14array[0]=IKsin(j14array[0]);
																						cj14array[0]=IKcos(j14array[0]);
																						if( j14array[0] > IKPI )
																						{
																							j14array[0]-=IK2PI;
																						}
																						else if( j14array[0] < -IKPI )
																						{
																							j14array[0]+=IK2PI;
																						}
																						j14valid[0] = true;
																						for(int ij14 = 0; ij14 < 1; ++ij14)
																						{
																							if( !j14valid[ij14] )
																							{
																								continue;
																							}
																							j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																							{
																								vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																								solution.basesol.resize(6);
																								solution.basesol[0].foffset = j13;
																								solution.basesol[1].foffset = j14;
																								solution.basesol[2].foffset = j15;
																								solution.basesol[3].foffset = j16;
																								solution.basesol[4].foffset = j17;
																								solution.basesol[5].foffset = j18;
																								solution.vfree.resize(0);
																							}
																						}
																					}

																				}

																			}

																		} else
																		{
																			if( 1 )
																			{
																				continue;

																			} else
																			{
																			}
																		}
																	}
																}

															} else
															{
																{
																	IKReal j14array[1], cj14array[1], sj14array[1];
																	bool j14valid[1]={false};
																	j14array[0]=IKatan2(((gconst12)*(((((r22)*(sj15)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj16)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((cj17)*(cj18)*(r20)*(sj15)*(sj16)))))), ((gconst12)*(((((cj15)*(cj17)*(r21)*(sj16)*(sj18)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)*(sj16)))))));
																	sj14array[0]=IKsin(j14array[0]);
																	cj14array[0]=IKcos(j14array[0]);
																	if( j14array[0] > IKPI )
																	{
																		j14array[0]-=IK2PI;
																	}
																	else if( j14array[0] < -IKPI )
																	{
																		j14array[0]+=IK2PI;
																	}
																	j14valid[0] = true;
																	for(int ij14 = 0; ij14 < 1; ++ij14)
																	{
																		if( !j14valid[ij14] )
																		{
																			continue;
																		}
																		j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

																		{
																			vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																			solution.basesol.resize(6);
																			solution.basesol[0].foffset = j13;
																			solution.basesol[1].foffset = j14;
																			solution.basesol[2].foffset = j15;
																			solution.basesol[3].foffset = j16;
																			solution.basesol[4].foffset = j17;
																			solution.basesol[5].foffset = j18;
																			solution.vfree.resize(0);
																		}
																	}
																}

															}

														}
													}
												}

											}

										}
									}
								}

							}

						}
					}
				}
				return vsolutions.size()>0;
			}

			static inline bool checkconsistency8(const IKReal* Breal)
			{
				IKReal norm = 0.1;
				for(int i = 0; i < 7; ++i)
				{
					norm += IKabs(Breal[i]);
				}
								 // have to increase the threshold since many computations are involved
				IKReal tol = 1e-5*norm;
				return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
			}
			/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
			///
			/// matcoeffs is of length 54*3, for 3 matrices
			static inline void solvedialyticpoly8qep(const IKReal* matcoeffs, IKReal* rawroots, int& numroots)
			{
				const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
				IKReal IKFAST_ALIGNED16(M[16*16]) = {0};
				IKReal IKFAST_ALIGNED16(A[8*8]);
				IKReal IKFAST_ALIGNED16(work[16*16*15]);
				int ipiv[8];
				int info, coeffindex;
				const int worksize=16*16*15;
				const int matrixdim = 8;
				const int matrixdim2 = 16;
				numroots = 0;
				// first setup M = [0 I; -C -B] and A
				coeffindex = 0;
				for(int j = 0; j < 4; ++j)
				{
					for(int k = 0; k < 6; ++k)
					{
						M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
					}
				}
				for(int j = 0; j < 4; ++j)
				{
					for(int k = 0; k < 6; ++k)
					{
						M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
					}
				}
				for(int j = 0; j < 4; ++j)
				{
					for(int k = 0; k < 6; ++k)
					{
						A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
					}
					for(int k = 0; k < 2; ++k)
					{
						A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
					}
				}
				const IKReal lfpossibilities[4][4] =
				{
					{
						1,-1,1,1
					}
					,
					{
						1,0,-2,1
					}
					,
					{
						1,1,2,0
					}
					,
					{
						1,-1,4,1
					}
				};
				int lfindex = -1;
				bool bsingular = true;
				do
				{
					dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
					if( info == 0 )
					{
						bsingular = false;
						for(int j = 0; j < matrixdim; ++j)
						{
							if( IKabs(A[j*matrixdim+j]) < 100*tol )
							{
								bsingular = true;
								break;
							}
						}
						if( !bsingular )
						{
							break;
						}
					}
					if( lfindex == 3 )
					{
						break;
					}
					// transform by the linear functional
					lfindex++;
					const IKReal* lf = lfpossibilities[lfindex];
					// have to reinitialize A
					coeffindex = 0;
					for(int j = 0; j < 4; ++j)
					{
						for(int k = 0; k < 6; ++k)
						{
							IKReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
							A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
							M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
							M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
							coeffindex++;
						}
						for(int k = 0; k < 2; ++k)
						{
							A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
						}
					}
				} while(lfindex<4);

				if( bsingular )
				{
					return;
				}
				dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
				if( info != 0 )
				{
					return;
				}

				// set identity in upper corner
				for(int j = 0; j < matrixdim; ++j)
				{
					M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
				}
				IKReal IKFAST_ALIGNED16(wr[16]);
				IKReal IKFAST_ALIGNED16(wi[16]);
				IKReal IKFAST_ALIGNED16(vr[16*16]);
				int one=1;
				dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
				if( info != 0 )
				{
					return;
				}
				IKReal Breal[matrixdim-1];
				for(int i = 0; i < matrixdim2; ++i)
				{
					if( IKabs(wi[i]) < tol*100 )
					{
						IKReal* ev = vr+matrixdim2*i;
						if( IKabs(wr[i]) > 1 )
						{
							ev += matrixdim;
						}
						// consistency has to be checked!!
						if( IKabs(ev[0]) < tol )
						{
							continue;
						}
						IKReal iconst = 1/ev[0];
						for(int j = 1; j < matrixdim; ++j)
						{
							Breal[j-1] = ev[j]*iconst;
						}
						if( checkconsistency8(Breal) )
						{
							if( lfindex >= 0 )
							{
								const IKReal* lf = lfpossibilities[lfindex];
								rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
							}
							else
							{
								rawroots[numroots++] = wr[i];
							}
							bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
							bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
							if( bsmall0 && bsmall1 )
							{
								rawroots[numroots++] = ev[2]/ev[0];
								rawroots[numroots++] = ev[1]/ev[0];
							}
							else if( bsmall0 && !bsmall1 )
							{
								rawroots[numroots++] = ev[3]/ev[1];
								rawroots[numroots++] = ev[1]/ev[0];
							}
							else if( !bsmall0 && bsmall1 )
							{
								rawroots[numroots++] = ev[6]/ev[4];
								rawroots[numroots++] = ev[7]/ev[6];
							}
							else if( !bsmall0 && !bsmall1 )
							{
								rawroots[numroots++] = ev[7]/ev[5];
								rawroots[numroots++] = ev[7]/ev[6];
							}
						}
					}
				}
			}
	};

	/// solves the inverse kinematics equations.
	/// \param pfree is an array specifying the free joints of the chain.
	IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions)
	{
		IKSolver solver;
		return solver.ik(eetrans,eerot,pfree,vsolutions);
	}

	IKFAST_API const char* getKinematicsHash() { return "45c5d1eba8da6ee193605312c24e7209"; }

	#ifdef IKFAST_NAMESPACE
}								 // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
	if( argc != 12+getNumFreeParameters()+1 )
	{
		printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
			"Returns the ik solutions given the transformation of the end effector specified by\n"
			"a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
			"There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
		return 1;
	}

	std::vector<IKSolution> vsolutions;
	std::vector<IKReal> vfree(getNumFreeParameters());
	IKReal eerot[9],eetrans[3];
	eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
	eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
	eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
	for(std::size_t i = 0; i < vfree.size(); ++i)
		vfree[i] = atof(argv[13+i]);
	bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

	if( !bSuccess )
	{
		fprintf(stderr,"Failed to get ik solution\n");
		return -1;
	}

	printf("Found %d ik solutions:\n", (int)vsolutions.size());
	std::vector<IKReal> sol(getNumJoints());
	for(std::size_t i = 0; i < vsolutions.size(); ++i)
	{
		printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
		std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
		vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
		for( std::size_t j = 0; j < sol.size(); ++j)
			printf("%.15f, ", sol[j]);
		printf("\n");
	}
	return 0;
}
#endif
