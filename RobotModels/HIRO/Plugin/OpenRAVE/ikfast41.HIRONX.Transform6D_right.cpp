/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 41 generated on 2011-04-28 15:32:49.133098
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }
#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IKReal)6.28318530717959)
#define IKPI  ((IKReal)3.14159265358979)
#define IKPI_2  ((IKReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif							 // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C"
{
	void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
	void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
	void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
	void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
	void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
	void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}


using namespace std;			 // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
	#endif

	#ifdef IKFAST_REAL
	typedef IKFAST_REAL IKReal;
	#else
	typedef double IKReal;
	#endif

	class IKSolution
	{
		public:
			/// Gets a solution given its free parameters
			/// \param pfree The free parameters required, range is in [-pi,pi]
			void GetSolution(IKReal* psolution, const IKReal* pfree) const
			{
				for(std::size_t i = 0; i < basesol.size(); ++i)
				{
					if( basesol[i].freeind < 0 )
						psolution[i] = basesol[i].foffset;
					else
					{
						IKFAST_ASSERT(pfree != NULL);
						psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
						if( psolution[i] > IKPI )
						{
							psolution[i] -= IK2PI;
						}
						else if( psolution[i] < -IKPI )
						{
							psolution[i] += IK2PI;
						}
					}
				}
			}

			/// Gets the free parameters the solution requires to be set before a full solution can be returned
			/// \return vector of indices indicating the free parameters
			const std::vector<int>& GetFree() const { return vfree; }

			struct VARIABLE
			{
				VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
				VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
				int freeind;
								 ///< joint value is fmul*sol[freeind]+foffset
				IKReal fmul, foffset;
			};

								 ///< solution and their offsets if joints are mimiced
			std::vector<VARIABLE> basesol;
			std::vector<int> vfree;
	};

	inline float IKabs(float f) { return fabsf(f); }
	inline double IKabs(double f) { return fabs(f); }

	inline float IKlog(float f) { return logf(f); }
	inline double IKlog(double f) { return log(f); }

	#ifndef IKFAST_SINCOS_THRESH
	#define IKFAST_SINCOS_THRESH ((IKReal)0.000001)
	#endif

	inline float IKasin(float f)
	{
								 // any more error implies something is wrong with the solver
		IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH );
		if( f <= -1 ) return -IKPI_2;
		else if( f >= 1 ) return IKPI_2;
		return asinf(f);
	}
	inline double IKasin(double f)
	{
								 // any more error implies something is wrong with the solver
		IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH );
		if( f <= -1 ) return -IKPI_2;
		else if( f >= 1 ) return IKPI_2;
		return asin(f);
	}

	// return positive value in [0,y)
	inline float IKfmod(float x, float y)
	{
		while(x < 0)
		{
			x += y;
		}
		return fmodf(x,y);
	}

	// return positive value in [0,y)
	inline float IKfmod(double x, double y)
	{
		while(x < 0)
		{
			x += y;
		}
		return fmod(x,y);
	}

	inline float IKacos(float f)
	{
								 // any more error implies something is wrong with the solver
		IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH );
		if( f <= -1 ) return IKPI;
		else if( f >= 1 ) return 0;
		return acosf(f);
	}
	inline double IKacos(double f)
	{
								 // any more error implies something is wrong with the solver
		IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH );
		if( f <= -1 ) return IKPI;
		else if( f >= 1 ) return 0;
		return acos(f);
	}
	inline float IKsin(float f) { return sinf(f); }
	inline double IKsin(double f) { return sin(f); }
	inline float IKcos(float f) { return cosf(f); }
	inline double IKcos(double f) { return cos(f); }
	inline float IKtan(float f) { return tanf(f); }
	inline double IKtan(double f) { return tan(f); }
	inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
	inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
	inline float IKatan2(float fy, float fx)
	{
		if( isnan(fy) )
		{
								 // if both are nan, probably wrong value will be returned
			IKFAST_ASSERT(!isnan(fx));
			return IKPI_2;
		}
		else if( isnan(fx) )
		{
			return 0;
		}
		return atan2f(fy,fx);
	}
	inline double IKatan2(double fy, double fx)
	{
		if( isnan(fy) )
		{
								 // if both are nan, probably wrong value will be returned
			IKFAST_ASSERT(!isnan(fx));
			return IKPI_2;
		}
		else if( isnan(fx) )
		{
			return 0;
		}
		return atan2(fy,fx);
	}

	inline float IKsign(float f)
	{
		if( f > 0 )
		{
			return 1.0f;
		}
		else if( f < 0 )
		{
			return -1.0f;
		}
		return 0;
	}

	inline double IKsign(double f)
	{
		if( f > 0 )
		{
			return 1.0;
		}
		else if( f < 0 )
		{
			return -1.0;
		}
		return 0;
	}

	/// solves the forward kinematics equations.
	/// \param pfree is an array specifying the free joints of the chain.
	IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot)
	{
		IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80;
		x0=IKcos(j[0]);
		x1=IKcos(j[1]);
		x2=IKsin(j[2]);
		x3=IKcos(j[2]);
		x4=IKsin(j[1]);
		x5=IKsin(j[4]);
		x6=IKsin(j[0]);
		x7=IKsin(j[3]);
		x8=((x6)*(x7));
		x9=IKcos(j[3]);
		x10=((x0)*(x1)*(x3));
		x11=((x0)*(x2)*(x4));
		x12=((((-1.00000000000000)*(x11)))+(x10));
		x13=((x12)*(x9));
		x14=IKcos(j[4]);
		x15=((x0)*(x1)*(x2));
		x16=((x0)*(x3)*(x4));
		x17=((x15)+(x16));
		x18=((-1.00000000000000)*(x17));
		x19=IKsin(j[5]);
		x20=((x6)*(x9));
		x21=((((-1.00000000000000)*(x10)))+(x11));
		x22=((x21)*(x7));
		x23=IKcos(j[5]);
		x24=((((-1.00000000000000)*(x13)))+(x8));
		x25=((x24)*(x5));
		x26=((x14)*(x18));
		x27=((x25)+(x26));
		x28=((-1.00000000000000)*(x27));
		x29=((0.0900000000000000)*(x16));
		x30=((0.0900000000000000)*(x15));
		x31=((x30)+(x29));
		x32=((0.0900000000000000)*(x8));
		x33=((0.0900000000000000)*(x13));
		x34=((((-1.00000000000000)*(x33)))+(x32));
		x35=((x2)*(x4)*(x6));
		x36=((x1)*(x3)*(x6));
		x37=((x0)*(x7));
		x38=((((-1.00000000000000)*(x35)))+(x36));
		x39=((x38)*(x9));
		x40=((x39)+(x37));
		x41=((x1)*(x2)*(x6));
		x42=((x3)*(x4)*(x6));
		x43=((x42)+(x41));
		x44=((-1.00000000000000)*(x43));
		x45=((x1)*(x2));
		x46=((x3)*(x4));
		x47=((x46)+(x45));
		x48=((x2)*(x4));
		x49=((x1)*(x3));
		x50=((((-1.00000000000000)*(x49)))+(x48));
		x51=((((-1.00000000000000)*(x36)))+(x35));
		x52=((x51)*(x7));
		x53=((x0)*(x9));
		x54=((x53)+(x52));
		x55=((-1.00000000000000)*(x40));
		x56=((x5)*(x55));
		x57=((x14)*(x44));
		x58=((x57)+(x56));
		x59=((-1.00000000000000)*(x58));
		x60=((x14)*(x50));
		x61=((x47)*(x5)*(x9));
		x62=((x60)+(x61));
		x63=((-1.00000000000000)*(x62));
		x64=((-1.00000000000000)*(x47));
		x65=((0.0900000000000000)*(x37));
		x66=((0.0900000000000000)*(x39));
		x67=((x65)+(x66));
		x68=((-1.00000000000000)*(x67));
		x69=((0.0900000000000000)*(x41));
		x70=((0.0900000000000000)*(x42));
		x71=((x70)+(x69));
		x72=((0.0900000000000000)*(x48));
		x73=((0.0900000000000000)*(x49));
		x74=((0.0900000000000000)*(x46));
		x75=((0.0900000000000000)*(x45));
		x76=((x75)+(x74));
		x77=((-1.00000000000000)*(x54));
		x78=((((-1.00000000000000)*(x72)))+(x73));
		x79=((-1.00000000000000)*(x71));
		x80=((((-1.00000000000000)*(x73)))+(x72));
		eerot[0]=((((x18)*(x5)))+(((x14)*(((x13)+(((-1.00000000000000)*(x8))))))));
		eerot[1]=((((x19)*(x28)))+(((x23)*(((((-1.00000000000000)*(x20)))+(x22))))));
		eerot[2]=((((x23)*(x28)))+(((x19)*(((((-1.00000000000000)*(x22)))+(x20))))));
		eetrans[0]=((((-0.250000000000000)*(x0)*(x4)))+(((x31)*(x5)))+(((0.0300000000000000)*(x11)))+(((-0.0300000000000000)*(x10)))+(((0.0950000000000000)*(x6)))+(((x34)*(x5)))+(((x14)*(x34)))+(((-0.235000000000000)*(x16)))+(((-0.235000000000000)*(x15)))+(((-1.00000000000000)*(x14)*(x31))));
		eerot[3]=((((-0.258820142606703)*(x14)*(x64)*(x9)))+(((0.965925532213041)*(x14)*(x40)))+(((0.965925532213041)*(x44)*(x5)))+(((-0.258820142606703)*(x5)*(x50))));
		eerot[4]=((((-0.258820142606703)*(x23)*(x47)*(x7)))+(((0.965925532213041)*(x19)*(x59)))+(((-0.258820142606703)*(x19)*(x63)))+(((0.965925532213041)*(x23)*(x54))));
		eerot[5]=((((0.965925532213041)*(x19)*(x77)))+(((-0.258820142606703)*(x19)*(x64)*(x7)))+(((-0.258820142606703)*(x23)*(x63)))+(((0.965925532213041)*(x23)*(x59))));
		eetrans[1]=((-0.145000000000000)+(((-0.0608227335125751)*(x48)))+(((0.0647050356516757)*(x1)))+(((-0.226992500070065)*(x42)))+(((-0.226992500070065)*(x41)))+(((0.0608227335125751)*(x49)))+(((0.965925532213041)*(x14)*(x68)))+(((0.965925532213041)*(x14)*(x79)))+(((-0.258820142606703)*(x14)*(x80)))+(((-0.0917629255602389)*(x0)))+(((0.965925532213041)*(x5)*(x71)))+(((-0.258820142606703)*(x14)*(x76)*(x9)))+(((-0.258820142606703)*(x5)*(x76)*(x9)))+(((-0.241481383053260)*(x4)*(x6)))+(((0.0289777659663912)*(x35)))+(((-0.00776460427820108)*(x45)))+(((-0.00776460427820108)*(x46)))+(((0.965925532213041)*(x5)*(x68)))+(((-0.258820142606703)*(x5)*(x78)))+(((-0.0289777659663912)*(x36))));
		eerot[6]=((((0.258820142606703)*(x44)*(x5)))+(((0.965925532213041)*(x14)*(x64)*(x9)))+(((0.258820142606703)*(x14)*(x40)))+(((0.965925532213041)*(x5)*(x50))));
		eerot[7]=((((0.965925532213041)*(x23)*(x47)*(x7)))+(((0.965925532213041)*(x19)*(x63)))+(((0.258820142606703)*(x19)*(x59)))+(((0.258820142606703)*(x23)*(x54))));
		eerot[8]=((((0.258820142606703)*(x19)*(x77)))+(((0.965925532213041)*(x23)*(x63)))+(((0.965925532213041)*(x19)*(x64)*(x7)))+(((0.258820142606703)*(x23)*(x59))));
		eetrans[2]=((0.370296000000000)+(((-0.0608227335125751)*(x42)))+(((-0.0608227335125751)*(x41)))+(((0.965925532213041)*(x14)*(x80)))+(((0.226992500070065)*(x48)))+(((-0.226992500070065)*(x49)))+(((0.258820142606703)*(x5)*(x71)))+(((0.258820142606703)*(x5)*(x68)))+(((0.00776460427820108)*(x35)))+(((-0.0245879135476367)*(x0)))+(((0.965925532213041)*(x5)*(x76)*(x9)))+(((0.965925532213041)*(x5)*(x78)))+(((-0.0647050356516757)*(x4)*(x6)))+(((0.258820142606703)*(x14)*(x79)))+(((0.965925532213041)*(x14)*(x76)*(x9)))+(((0.0289777659663912)*(x45)))+(((0.0289777659663912)*(x46)))+(((-0.00776460427820108)*(x36)))+(((-0.241481383053260)*(x1)))+(((0.258820142606703)*(x14)*(x68))));
	}

	IKFAST_API int getNumFreeParameters() { return 0; }
	IKFAST_API int* getFreeParameters() { return NULL; }
	IKFAST_API int getNumJoints() { return 6; }

	IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

	IKFAST_API int getIKType() { return 0x67000001; }

	class IKSolver
	{
		public:
			IKReal j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j7,cj7,sj7,htj7,j8,cj8,sj8,htj8,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;

			bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions)
			{
				for(int dummyiter = 0; dummyiter < 1; ++dummyiter)
				{
					vsolutions.resize(0); vsolutions.reserve(8);
					r00 = eerot[0*3+0];
					r01 = eerot[0*3+1];
					r02 = eerot[0*3+2];
					r10 = eerot[1*3+0];
					r11 = eerot[1*3+1];
					r12 = eerot[1*3+2];
					r20 = eerot[2*3+0];
					r21 = eerot[2*3+1];
					r22 = eerot[2*3+2];
					px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

					new_r00=((-1.00000000000000)*(r02));
					new_r01=r01;
					new_r02=r00;
					new_px=((px)+(((0.0900000000000000)*(r00))));
					new_r10=((((-0.258820142606703)*(r22)))+(((-0.965925532213041)*(r12))));
					new_r11=((((0.258820142606703)*(r21)))+(((0.965925532213041)*(r11))));
					new_r12=((((0.258820142606703)*(r20)))+(((0.965925532213041)*(r10))));
					new_py=((0.0442191386441994)+(((0.965925532213041)*(py)))+(((0.258820142606703)*(pz)))+(((0.0869332978991737)*(r10)))+(((0.0232938128346032)*(r20))));
					new_r20=((((-0.965925532213041)*(r22)))+(((0.258820142606703)*(r12))));
					new_r21=((((-0.258820142606703)*(r11)))+(((0.965925532213041)*(r21))));
					new_r22=((((-0.258820142606703)*(r10)))+(((0.965925532213041)*(r20))));
					new_pz=((-0.395207281554332)+(((-0.0232938128346032)*(r10)))+(((0.965925532213041)*(pz)))+(((-0.258820142606703)*(py)))+(((0.0869332978991737)*(r20))));
					r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
					pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
					npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
					npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
					npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
					rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
					rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
					rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
					rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
					rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
					rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
					rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
					rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
					rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
					IKReal op[72], zeror[48];
					int numroots;
					IKReal x81=((0.0600000000000000)*(npz));
					IKReal x82=((0.650000000000000)*(npx));
					IKReal x83=((0.0600000000000000)*(npy));
					IKReal x84=((0.0950000000000000)*(r22));
					IKReal x85=((0.120000000000000)*(npx));
					IKReal x86=((-1.30000000000000)*(npy));
					IKReal x87=((0.0950000000000000)*(r21));
					IKReal x88=((0.190000000000000)*(r20));
					IKReal x89=((2.00000000000000)*(rxp1_2));
					IKReal x90=((-0.0950000000000000)*(r21));
					IKReal x91=((rxp0_2)+(x84));
					IKReal x92=((0.940000000000000)*(npz));
					IKReal x93=((2.00000000000000)*(rxp2_2));
					IKReal x94=((0.180000000000000)*(r21));
					IKReal x95=((0.360000000000000)*(r20));
					IKReal x96=((0.380000000000000)*(r21));
					IKReal x97=((-0.00570000000000000)+(x83));
					IKReal x98=((0.290000000000000)*(npx));
					IKReal x99=((-0.00570000000000000)+(((-1.00000000000000)*(x83))));
					IKReal x100=((x84)+(((-1.00000000000000)*(rxp0_2))));
					IKReal x101=((0.0114000000000000)+(x97));
					IKReal x102=((0.580000000000000)*(npy));
					IKReal x103=((0.00570000000000000)+(((-1.00000000000000)*(x83))));
					IKReal x104=((pp)+(x81));
					IKReal x105=((rxp0_2)+(((-1.00000000000000)*(x84))));
					IKReal x106=((-2.00000000000000)*(rxp1_2));
					IKReal x107=((-1.00000000000000)*(x91));
					op[0]=((-0.0350000000000000)+(((-1.00000000000000)*(x104)))+(x82));
					op[1]=x97;
					op[2]=x86;
					op[3]=x85;
					op[4]=((-0.0350000000000000)+(((-1.00000000000000)*(x104)))+(((-1.00000000000000)*(x82))));
					op[5]=x99;
					op[6]=x107;
					op[7]=x87;
					op[8]=x89;
					op[9]=x88;
					op[10]=x105;
					op[11]=x90;
					op[12]=x101;
					op[13]=((-0.0350000000000000)+(x82)+(x81)+(((-1.00000000000000)*(pp))));
					op[14]=x85;
					op[15]=x86;
					op[16]=x103;
					op[17]=((-0.0350000000000000)+(x81)+(((-1.00000000000000)*(x82)))+(((-1.00000000000000)*(pp))));
					op[18]=x87;
					op[19]=x100;
					op[20]=x88;
					op[21]=x89;
					op[22]=x90;
					op[23]=x91;
					op[24]=((-0.0108000000000000)+(x85)+(x92));
					op[25]=0;
					op[26]=((-0.240000000000000)*(npy));
					op[27]=0;
					op[28]=((-0.0108000000000000)+(x92)+(((-1.00000000000000)*(x85))));
					op[29]=0;
					op[30]=((x88)+(x94)+(((-1.00000000000000)*(x93))));
					op[31]=0;
					op[32]=((x95)+(((-1.00000000000000)*(x96))));
					op[33]=0;
					op[34]=((((-1.00000000000000)*(x93)))+(((-1.00000000000000)*(x94)))+(((-1.00000000000000)*(x88))));
					op[35]=0;
					op[36]=0;
					op[37]=((0.0108000000000000)+(x92)+(((-1.00000000000000)*(x85))));
					op[38]=0;
					op[39]=((0.240000000000000)*(npy));
					op[40]=0;
					op[41]=((0.0108000000000000)+(x85)+(x92));
					op[42]=0;
					op[43]=((x94)+(((-1.00000000000000)*(x93)))+(((-1.00000000000000)*(x88))));
					op[44]=0;
					op[45]=((x95)+(x96));
					op[46]=0;
					op[47]=((x88)+(((-1.00000000000000)*(x93)))+(((-1.00000000000000)*(x94))));
					op[48]=((0.0496000000000000)+(x81)+(((-1.00000000000000)*(x98)))+(((-1.00000000000000)*(pp))));
					op[49]=x97;
					op[50]=x102;
					op[51]=x85;
					op[52]=((0.0496000000000000)+(x81)+(x98)+(((-1.00000000000000)*(pp))));
					op[53]=x99;
					op[54]=x91;
					op[55]=x87;
					op[56]=x106;
					op[57]=x88;
					op[58]=x100;
					op[59]=x90;
					op[60]=x101;
					op[61]=((0.0496000000000000)+(((-1.00000000000000)*(x104)))+(((-1.00000000000000)*(x98))));
					op[62]=x85;
					op[63]=x102;
					op[64]=x103;
					op[65]=((0.0496000000000000)+(((-1.00000000000000)*(x104)))+(x98));
					op[66]=x87;
					op[67]=x105;
					op[68]=x88;
					op[69]=x106;
					op[70]=x90;
					op[71]=x107;
					solvedialyticpoly8qep(op,zeror,numroots);
					IKReal j7array[16], cj7array[16], sj7array[16], j8array[16], cj8array[16], sj8array[16], j6array[16], cj6array[16], sj6array[16];
					int numsolutions = 0;
					for(int ij7 = 0; ij7 < numroots; ij7 += 3)
					{
						IKReal htj7 = zeror[ij7+0], htj8 = zeror[ij7+1], htj6 = zeror[ij7+2];
						j7array[numsolutions]=((2.00000000000000)*(atan(htj7)));
						j8array[numsolutions]=((2.00000000000000)*(atan(htj8)));
						j6array[numsolutions]=((2.00000000000000)*(atan(htj6)));
						IKReal x108=(htj7)*(htj7);
						IKReal x109=(htj8)*(htj8);
						IKReal x110=(htj6)*(htj6);
						cj7array[numsolutions]=((((IKabs(((1.00000000000000)+(x108))) != 0)?((IKReal)1/(((1.00000000000000)+(x108)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x108))))));
						cj8array[numsolutions]=((((IKabs(((1.00000000000000)+(x109))) != 0)?((IKReal)1/(((1.00000000000000)+(x109)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x109))))));
						cj6array[numsolutions]=((((IKabs(((1.00000000000000)+(x110))) != 0)?((IKReal)1/(((1.00000000000000)+(x110)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x110))))));
						sj7array[numsolutions]=((2.00000000000000)*(htj7)*(((IKabs(((1.00000000000000)+((htj7)*(htj7)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj7)*(htj7))))):(IKReal)1.0e30)));
						sj8array[numsolutions]=((2.00000000000000)*(htj8)*(((IKabs(((1.00000000000000)+((htj8)*(htj8)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj8)*(htj8))))):(IKReal)1.0e30)));
						sj6array[numsolutions]=((2.00000000000000)*(htj6)*(((IKabs(((1.00000000000000)+((htj6)*(htj6)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj6)*(htj6))))):(IKReal)1.0e30)));
						if( j7array[numsolutions] > IKPI )
						{
							j7array[numsolutions]-=IK2PI;
						}
						else if( j7array[numsolutions] < -IKPI )
						{
							j7array[numsolutions]+=IK2PI;
						}
						if( j8array[numsolutions] > IKPI )
						{
							j8array[numsolutions]-=IK2PI;
						}
						else if( j8array[numsolutions] < -IKPI )
						{
							j8array[numsolutions]+=IK2PI;
						}
						if( j6array[numsolutions] > IKPI )
						{
							j6array[numsolutions]-=IK2PI;
						}
						else if( j6array[numsolutions] < -IKPI )
						{
							j6array[numsolutions]+=IK2PI;
						}
						bool valid = true;
						for( int kj7 = 0; kj7 < numsolutions; ++kj7)
						{
							if( IKabs(cj7array[kj7]-cj7array[numsolutions]) < 0.00001 && IKabs(sj7array[kj7]-sj7array[numsolutions]) < 0.00001 &&IKabs(cj8array[kj7]-cj8array[numsolutions]) < 0.00001 && IKabs(sj8array[kj7]-sj8array[numsolutions]) < 0.00001 &&IKabs(cj6array[kj7]-cj6array[numsolutions]) < 0.00001 && IKabs(sj6array[kj7]-sj6array[numsolutions]) < 0.00001 && 1 )
							{
								valid=false; break;
							}
						}
						if( valid ) { numsolutions++; }
					}
					for(int ij7 = 0; ij7 < numsolutions; ++ij7)
					{
						j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

						j8 = j8array[ij7]; cj8 = cj8array[ij7]; sj8 = sj8array[ij7];

						j6 = j6array[ij7]; cj6 = cj6array[ij7]; sj6 = sj6array[ij7];

						{
							IKReal dummyeval[1];
							IKReal gconst0;
							IKReal x111=(sj8)*(sj8);
							IKReal x112=(cj8)*(cj8);
							gconst0=IKsign(((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x112)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x111)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x111)))+(((r01)*(r10)*(sj7)*(x112)))));
							IKReal x113=(sj8)*(sj8);
							IKReal x114=(cj8)*(cj8);
							dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x114)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x113)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x114)))+(((r01)*(r10)*(sj7)*(x113))));
							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
							{
								{
									IKReal dummyeval[1];
									dummyeval[0]=sj6;
									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
									{
										{
											IKReal dummyeval[1];
											dummyeval[0]=cj6;
											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
											{
												{
													IKReal evalcond[3];
													evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j6)), 6.28318530717959)));
													evalcond[1]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
													evalcond[2]=((0.0950000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
													if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
													{
														{
															IKReal j5array[1], cj5array[1], sj5array[1];
															bool j5valid[1]={false};
															j5array[0]=IKatan2(((0.120000000000000)+(((-4.00000000000000)*(cj8)*(npy)))+(((-4.00000000000000)*(npx)*(sj8)))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
															sj5array[0]=IKsin(j5array[0]);
															cj5array[0]=IKcos(j5array[0]);
															if( j5array[0] > IKPI )
															{
																j5array[0]-=IK2PI;
															}
															else if( j5array[0] < -IKPI )
															{
																j5array[0]+=IK2PI;
															}
															j5valid[0] = true;
															for(int ij5 = 0; ij5 < 1; ++ij5)
															{
																if( !j5valid[ij5] )
																{
																	continue;
																}
																j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

																{
																	IKReal dummyeval[1];
																	IKReal gconst19;
																	gconst19=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																	dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																	{
																		{
																			IKReal dummyeval[1];
																			IKReal x115=(sj8)*(sj8);
																			IKReal x116=(cj8)*(cj8);
																			dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x116)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x115)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x115)))+(((r01)*(r10)*(sj7)*(x116))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				{
																					IKReal dummyeval[1];
																					IKReal x117=(sj7)*(sj7);
																					IKReal x118=(cj7)*(cj7);
																					dummyeval[0]=((((-1.00000000000000)*(cj8)*(r02)*(r10)*(x117)))+(((-1.00000000000000)*(cj8)*(r02)*(r10)*(x118)))+(((cj8)*(r00)*(r12)*(x117)))+(((cj8)*(r00)*(r12)*(x118)))+(((r02)*(r11)*(sj8)*(x118)))+(((r02)*(r11)*(sj8)*(x117)))+(((-1.00000000000000)*(r01)*(r12)*(sj8)*(x117)))+(((-1.00000000000000)*(r01)*(r12)*(sj8)*(x118))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						continue;

																					} else
																					{
																						{
																							IKReal j3array[1], cj3array[1], sj3array[1];
																							bool j3valid[1]={false};
																							IKReal x119=(sj7)*(sj7);
																							IKReal x120=(cj7)*(cj7);
																							IKReal x121=((cj8)*(r02)*(r10)*(x119));
																							IKReal x122=((cj8)*(r02)*(r10)*(x120));
																							IKReal x123=((r01)*(r12)*(sj8)*(x119));
																							IKReal x124=((r01)*(r12)*(sj8)*(x120));
																							IKReal x125=((x124)+(x122)+(x123)+(x121));
																							IKReal x126=((r02)*(r11)*(sj8)*(x119));
																							IKReal x127=((r02)*(r11)*(sj8)*(x120));
																							IKReal x128=((cj8)*(r00)*(r12)*(x119));
																							IKReal x129=((cj8)*(r00)*(r12)*(x120));
																							IKReal x130=((x126)+(x127)+(x128)+(x129));
																							j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x125)))+(x130))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x125)))+(x130)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((x125)+(((-1.00000000000000)*(x130))))) != 0)?((IKReal)1/(((x125)+(((-1.00000000000000)*(x130)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
																							sj3array[0]=IKsin(j3array[0]);
																							cj3array[0]=IKcos(j3array[0]);
																							if( j3array[0] > IKPI )
																							{
																								j3array[0]-=IK2PI;
																							}
																							else if( j3array[0] < -IKPI )
																							{
																								j3array[0]+=IK2PI;
																							}
																							j3valid[0] = true;
																							for(int ij3 = 0; ij3 < 1; ++ij3)
																							{
																								if( !j3valid[ij3] )
																								{
																									continue;
																								}
																								j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																								{
																									IKReal dummyeval[1];
																									IKReal gconst20;
																									gconst20=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																									dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										continue;

																									} else
																									{
																										{
																											IKReal j4array[1], cj4array[1], sj4array[1];
																											bool j4valid[1]={false};
																											j4array[0]=IKatan2(((gconst20)*(((((cj5)*(r20)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(cj8)*(r21)))))), ((gconst20)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj8)*(r21)*(sj5)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																											sj4array[0]=IKsin(j4array[0]);
																											cj4array[0]=IKcos(j4array[0]);
																											if( j4array[0] > IKPI )
																											{
																												j4array[0]-=IK2PI;
																											}
																											else if( j4array[0] < -IKPI )
																											{
																												j4array[0]+=IK2PI;
																											}
																											j4valid[0] = true;
																											for(int ij4 = 0; ij4 < 1; ++ij4)
																											{
																												if( !j4valid[ij4] )
																												{
																													continue;
																												}
																												j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j3;
																													solution.basesol[1].foffset = j4;
																													solution.basesol[2].foffset = j5;
																													solution.basesol[3].foffset = j6;
																													solution.basesol[4].foffset = j7;
																													solution.basesol[5].foffset = j8;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}
																							}
																						}

																					}

																				}

																			} else
																			{
																				{
																					IKReal j3array[1], cj3array[1], sj3array[1];
																					bool j3valid[1]={false};
																					IKReal x131=(sj8)*(sj8);
																					IKReal x132=(cj8)*(cj8);
																					IKReal x133=((cj7)*(cj8)*(r01)*(r12));
																					IKReal x134=((cj7)*(r00)*(r12)*(sj8));
																					IKReal x135=((r00)*(r11)*(sj7)*(x131));
																					IKReal x136=((r00)*(r11)*(sj7)*(x132));
																					IKReal x137=((x135)+(x134)+(x136)+(x133));
																					IKReal x138=((cj7)*(cj8)*(r02)*(r11));
																					IKReal x139=((r01)*(r10)*(sj7)*(x132));
																					IKReal x140=((cj7)*(r02)*(r10)*(sj8));
																					IKReal x141=((r01)*(r10)*(sj7)*(x131));
																					IKReal x142=((x140)+(x141)+(x139)+(x138));
																					j3array[0]=IKatan2(((((IKabs(((x142)+(((-1.00000000000000)*(x137))))) != 0)?((IKReal)1/(((x142)+(((-1.00000000000000)*(x137)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x142)))+(x137))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x142)))+(x137)))):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
																					sj3array[0]=IKsin(j3array[0]);
																					cj3array[0]=IKcos(j3array[0]);
																					if( j3array[0] > IKPI )
																					{
																						j3array[0]-=IK2PI;
																					}
																					else if( j3array[0] < -IKPI )
																					{
																						j3array[0]+=IK2PI;
																					}
																					j3valid[0] = true;
																					for(int ij3 = 0; ij3 < 1; ++ij3)
																					{
																						if( !j3valid[ij3] )
																						{
																							continue;
																						}
																						j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																						{
																							IKReal dummyeval[1];
																							IKReal gconst20;
																							gconst20=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																							dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								continue;

																							} else
																							{
																								{
																									IKReal j4array[1], cj4array[1], sj4array[1];
																									bool j4valid[1]={false};
																									j4array[0]=IKatan2(((gconst20)*(((((cj5)*(r20)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(cj8)*(r21)))))), ((gconst20)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj8)*(r21)*(sj5)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																									sj4array[0]=IKsin(j4array[0]);
																									cj4array[0]=IKcos(j4array[0]);
																									if( j4array[0] > IKPI )
																									{
																										j4array[0]-=IK2PI;
																									}
																									else if( j4array[0] < -IKPI )
																									{
																										j4array[0]+=IK2PI;
																									}
																									j4valid[0] = true;
																									for(int ij4 = 0; ij4 < 1; ++ij4)
																									{
																										if( !j4valid[ij4] )
																										{
																											continue;
																										}
																										j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j3;
																											solution.basesol[1].foffset = j4;
																											solution.basesol[2].foffset = j5;
																											solution.basesol[3].foffset = j6;
																											solution.basesol[4].foffset = j7;
																											solution.basesol[5].foffset = j8;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}
																					}
																				}

																			}

																		}

																	} else
																	{
																		{
																			IKReal j4array[1], cj4array[1], sj4array[1];
																			bool j4valid[1]={false};
																			j4array[0]=IKatan2(((gconst19)*(((((cj5)*(r20)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(cj8)*(r21)))))), ((gconst19)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj8)*(r21)*(sj5)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																			sj4array[0]=IKsin(j4array[0]);
																			cj4array[0]=IKcos(j4array[0]);
																			if( j4array[0] > IKPI )
																			{
																				j4array[0]-=IK2PI;
																			}
																			else if( j4array[0] < -IKPI )
																			{
																				j4array[0]+=IK2PI;
																			}
																			j4valid[0] = true;
																			for(int ij4 = 0; ij4 < 1; ++ij4)
																			{
																				if( !j4valid[ij4] )
																				{
																					continue;
																				}
																				j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																				{
																					IKReal dummyeval[1];
																					IKReal x143=(sj8)*(sj8);
																					IKReal x144=(cj8)*(cj8);
																					dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((r01)*(r10)*(sj7)*(x144)))+(((r01)*(r10)*(sj7)*(x143)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x143)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x144))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							IKReal x145=(sj8)*(sj8);
																							IKReal x146=(cj8)*(cj8);
																							dummyeval[0]=((((-1.00000000000000)*(x146)*((r01)*(r01))))+(((-1.00000000000000)*(x145)*((r10)*(r10))))+(((-1.00000000000000)*(x146)*((r11)*(r11))))+(((-1.00000000000000)*(x145)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									IKReal x147=(cj8)*(cj8);
																									IKReal x148=(sj8)*(sj8);
																									dummyeval[0]=((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x148)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj7)*(r00)*(r01)*(x147)))+(((cj8)*(r01)*(r02)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x148)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((cj7)*(r10)*(r11)*(x147))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										continue;

																									} else
																									{
																										{
																											IKReal j3array[1], cj3array[1], sj3array[1];
																											bool j3valid[1]={false};
																											IKReal x149=(cj8)*(cj8);
																											IKReal x150=(sj8)*(sj8);
																											IKReal x151=(r11)*(r11);
																											IKReal x152=((cj7)*(cj8)*(sj8)*(x151));
																											IKReal x153=((cj7)*(r10)*(r11)*(x150));
																											IKReal x154=(r01)*(r01);
																											IKReal x155=((cj7)*(cj8)*(sj8)*(x154));
																											IKReal x156=((cj7)*(r00)*(r01)*(x150));
																											IKReal x157=((x156)+(x155)+(x153)+(x152));
																											IKReal x158=(r10)*(r10);
																											IKReal x159=((cj7)*(cj8)*(sj8)*(x158));
																											IKReal x160=((r00)*(r02)*(sj7)*(sj8));
																											IKReal x161=((r10)*(r12)*(sj7)*(sj8));
																											IKReal x162=((cj7)*(r00)*(r01)*(x149));
																											IKReal x163=((cj8)*(r01)*(r02)*(sj7));
																											IKReal x164=(r00)*(r00);
																											IKReal x165=((cj7)*(cj8)*(sj8)*(x164));
																											IKReal x166=((cj7)*(r10)*(r11)*(x149));
																											IKReal x167=((cj8)*(r11)*(r12)*(sj7));
																											IKReal x168=((x162)+(x163)+(x160)+(x161)+(x166)+(x167)+(x165)+(x159));
																											j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x157)))+(x168))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x157)))+(x168)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj4)*(cj8)*(r11)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj4)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj4)*(r10)*(sj5)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x168)))+(x157))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x168)))+(x157)))):(IKReal)1.0e30))*(((((cj4)*(r00)*(sj5)*(sj8)))+(((cj5)*(cj8)*(r01)*(sj4)))+(((cj4)*(cj8)*(r01)*(sj5)))+(((cj5)*(r00)*(sj4)*(sj8)))))));
																											sj3array[0]=IKsin(j3array[0]);
																											cj3array[0]=IKcos(j3array[0]);
																											if( j3array[0] > IKPI )
																											{
																												j3array[0]-=IK2PI;
																											}
																											else if( j3array[0] < -IKPI )
																											{
																												j3array[0]+=IK2PI;
																											}
																											j3valid[0] = true;
																											for(int ij3 = 0; ij3 < 1; ++ij3)
																											{
																												if( !j3valid[ij3] )
																												{
																													continue;
																												}
																												j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j3;
																													solution.basesol[1].foffset = j4;
																													solution.basesol[2].foffset = j5;
																													solution.basesol[3].foffset = j6;
																													solution.basesol[4].foffset = j7;
																													solution.basesol[5].foffset = j8;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j3array[1], cj3array[1], sj3array[1];
																									bool j3valid[1]={false};
																									IKReal x169=(sj8)*(sj8);
																									IKReal x170=(cj8)*(cj8);
																									IKReal x171=(r11)*(r11);
																									IKReal x172=((x170)*(x171));
																									IKReal x173=(r00)*(r00);
																									IKReal x174=((x169)*(x173));
																									IKReal x175=(r10)*(r10);
																									IKReal x176=((x169)*(x175));
																									IKReal x177=(r01)*(r01);
																									IKReal x178=((x170)*(x177));
																									IKReal x179=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
																									IKReal x180=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
																									IKReal x181=((x179)+(x178)+(x172)+(x174)+(x176)+(x180));
																									j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x181) != 0)?((IKReal)1/(x181)):(IKReal)1.0e30))*(((((cj4)*(cj5)*(cj8)*(r11)))+(((cj4)*(cj5)*(r10)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj4)*(sj5)))+(((-1.00000000000000)*(r10)*(sj4)*(sj5)*(sj8)))))), ((((IKabs(x181) != 0)?((IKReal)1/(x181)):(IKReal)1.0e30))*(((((cj8)*(r01)*(sj4)*(sj5)))+(((r00)*(sj4)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj4)*(cj5)*(r00)*(sj8)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj8)*(r01)))))));
																									sj3array[0]=IKsin(j3array[0]);
																									cj3array[0]=IKcos(j3array[0]);
																									if( j3array[0] > IKPI )
																									{
																										j3array[0]-=IK2PI;
																									}
																									else if( j3array[0] < -IKPI )
																									{
																										j3array[0]+=IK2PI;
																									}
																									j3valid[0] = true;
																									for(int ij3 = 0; ij3 < 1; ++ij3)
																									{
																										if( !j3valid[ij3] )
																										{
																											continue;
																										}
																										j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j3;
																											solution.basesol[1].foffset = j4;
																											solution.basesol[2].foffset = j5;
																											solution.basesol[3].foffset = j6;
																											solution.basesol[4].foffset = j7;
																											solution.basesol[5].foffset = j8;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j3array[1], cj3array[1], sj3array[1];
																							bool j3valid[1]={false};
																							IKReal x182=(sj8)*(sj8);
																							IKReal x183=(cj8)*(cj8);
																							IKReal x184=((cj7)*(cj8)*(r01)*(r12));
																							IKReal x185=((cj7)*(r00)*(r12)*(sj8));
																							IKReal x186=((r00)*(r11)*(sj7)*(x182));
																							IKReal x187=((r00)*(r11)*(sj7)*(x183));
																							IKReal x188=((x184)+(x185)+(x186)+(x187));
																							IKReal x189=((cj7)*(cj8)*(r02)*(r11));
																							IKReal x190=((r01)*(r10)*(sj7)*(x183));
																							IKReal x191=((cj7)*(r02)*(r10)*(sj8));
																							IKReal x192=((r01)*(r10)*(sj7)*(x182));
																							IKReal x193=((x192)+(x191)+(x190)+(x189));
																							j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x188)))+(x193))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x188)))+(x193)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x193)))+(x188))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x193)))+(x188)))):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
																							sj3array[0]=IKsin(j3array[0]);
																							cj3array[0]=IKcos(j3array[0]);
																							if( j3array[0] > IKPI )
																							{
																								j3array[0]-=IK2PI;
																							}
																							else if( j3array[0] < -IKPI )
																							{
																								j3array[0]+=IK2PI;
																							}
																							j3valid[0] = true;
																							for(int ij3 = 0; ij3 < 1; ++ij3)
																							{
																								if( !j3valid[ij3] )
																								{
																									continue;
																								}
																								j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j3;
																									solution.basesol[1].foffset = j4;
																									solution.basesol[2].foffset = j5;
																									solution.basesol[3].foffset = j6;
																									solution.basesol[4].foffset = j7;
																									solution.basesol[5].foffset = j8;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}
																			}
																		}

																	}

																}
															}
														}

													} else
													{
														evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j6)), 6.28318530717959)));
														evalcond[1]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
														evalcond[2]=((-0.0950000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
														if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
														{
															{
																IKReal j5array[1], cj5array[1], sj5array[1];
																bool j5valid[1]={false};
																j5array[0]=IKatan2(((0.120000000000000)+(((4.00000000000000)*(cj8)*(npy)))+(((4.00000000000000)*(npx)*(sj8)))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
																sj5array[0]=IKsin(j5array[0]);
																cj5array[0]=IKcos(j5array[0]);
																if( j5array[0] > IKPI )
																{
																	j5array[0]-=IK2PI;
																}
																else if( j5array[0] < -IKPI )
																{
																	j5array[0]+=IK2PI;
																}
																j5valid[0] = true;
																for(int ij5 = 0; ij5 < 1; ++ij5)
																{
																	if( !j5valid[ij5] )
																	{
																		continue;
																	}
																	j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

																	{
																		IKReal dummyeval[1];
																		dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																		if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																		{
																			{
																				IKReal dummyeval[1];
																				IKReal x194=(cj8)*(cj8);
																				IKReal x195=(sj8)*(sj8);
																				dummyeval[0]=((((cj7)*(cj8)*(r01)*(r12)))+(((cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(r01)*(r10)*(sj7)*(x195)))+(((-1.00000000000000)*(r01)*(r10)*(sj7)*(x194)))+(((-1.00000000000000)*(cj7)*(r02)*(r10)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r02)*(r11)))+(((r00)*(r11)*(sj7)*(x195)))+(((r00)*(r11)*(sj7)*(x194))));
																				if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																				{
																					{
																						IKReal dummyeval[1];
																						IKReal x196=(sj7)*(sj7);
																						IKReal x197=(cj7)*(cj7);
																						dummyeval[0]=((((r01)*(r12)*(sj8)*(x197)))+(((r01)*(r12)*(sj8)*(x196)))+(((cj8)*(r02)*(r10)*(x196)))+(((cj8)*(r02)*(r10)*(x197)))+(((-1.00000000000000)*(r02)*(r11)*(sj8)*(x196)))+(((-1.00000000000000)*(r02)*(r11)*(sj8)*(x197)))+(((-1.00000000000000)*(cj8)*(r00)*(r12)*(x196)))+(((-1.00000000000000)*(cj8)*(r00)*(r12)*(x197))));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							continue;

																						} else
																						{
																							{
																								IKReal j3array[1], cj3array[1], sj3array[1];
																								bool j3valid[1]={false};
																								IKReal x198=(sj7)*(sj7);
																								IKReal x199=(cj7)*(cj7);
																								IKReal x200=((r02)*(r11)*(sj8)*(x198));
																								IKReal x201=((r02)*(r11)*(sj8)*(x199));
																								IKReal x202=((cj8)*(r00)*(r12)*(x198));
																								IKReal x203=((cj8)*(r00)*(r12)*(x199));
																								IKReal x204=((x203)+(x202)+(x201)+(x200));
																								IKReal x205=((cj8)*(r02)*(r10)*(x198));
																								IKReal x206=((cj8)*(r02)*(r10)*(x199));
																								IKReal x207=((r01)*(r12)*(sj8)*(x198));
																								IKReal x208=((r01)*(r12)*(sj8)*(x199));
																								IKReal x209=((x207)+(x206)+(x205)+(x208));
																								j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x204)))+(x209))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x204)))+(x209)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x209)))+(x204))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x209)))+(x204)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
																								sj3array[0]=IKsin(j3array[0]);
																								cj3array[0]=IKcos(j3array[0]);
																								if( j3array[0] > IKPI )
																								{
																									j3array[0]-=IK2PI;
																								}
																								else if( j3array[0] < -IKPI )
																								{
																									j3array[0]+=IK2PI;
																								}
																								j3valid[0] = true;
																								for(int ij3 = 0; ij3 < 1; ++ij3)
																								{
																									if( !j3valid[ij3] )
																									{
																										continue;
																									}
																									j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																									{
																										IKReal dummyeval[1];
																										IKReal gconst21;
																										gconst21=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																										dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											{
																												IKReal dummyeval[1];
																												dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																												if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																												{
																													continue;

																												} else
																												{
																													{
																														IKReal j4array[1], cj4array[1], sj4array[1];
																														bool j4valid[1]={false};
																														IKReal x210=(cj5)*(cj5);
																														IKReal x211=(sj5)*(sj5);
																														IKReal x212=((x210)+(x211));
																														j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x212) != 0)?((IKReal)1/(x212)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r20)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj8)*(r21)))))), ((((IKabs(x212) != 0)?((IKReal)1/(x212)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(r20)*(sj5)*(sj8)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																														sj4array[0]=IKsin(j4array[0]);
																														cj4array[0]=IKcos(j4array[0]);
																														if( j4array[0] > IKPI )
																														{
																															j4array[0]-=IK2PI;
																														}
																														else if( j4array[0] < -IKPI )
																														{
																															j4array[0]+=IK2PI;
																														}
																														j4valid[0] = true;
																														for(int ij4 = 0; ij4 < 1; ++ij4)
																														{
																															if( !j4valid[ij4] )
																															{
																																continue;
																															}
																															j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																															{
																																vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																solution.basesol.resize(6);
																																solution.basesol[0].foffset = j3;
																																solution.basesol[1].foffset = j4;
																																solution.basesol[2].foffset = j5;
																																solution.basesol[3].foffset = j6;
																																solution.basesol[4].foffset = j7;
																																solution.basesol[5].foffset = j8;
																																solution.vfree.resize(0);
																															}
																														}
																													}

																												}

																											}

																										} else
																										{
																											{
																												IKReal j4array[1], cj4array[1], sj4array[1];
																												bool j4valid[1]={false};
																												j4array[0]=IKatan2(((gconst21)*(((((cj3)*(r00)*(sj5)*(sj8)))+(((cj5)*(r20)*(sj8)))+(((cj3)*(cj8)*(r01)*(sj5)))+(((r10)*(sj3)*(sj5)*(sj8)))+(((cj8)*(r11)*(sj3)*(sj5)))+(((cj5)*(cj8)*(r21)))))), ((gconst21)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj5)*(r00)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj8)*(r01)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj3)))))));
																												sj4array[0]=IKsin(j4array[0]);
																												cj4array[0]=IKcos(j4array[0]);
																												if( j4array[0] > IKPI )
																												{
																													j4array[0]-=IK2PI;
																												}
																												else if( j4array[0] < -IKPI )
																												{
																													j4array[0]+=IK2PI;
																												}
																												j4valid[0] = true;
																												for(int ij4 = 0; ij4 < 1; ++ij4)
																												{
																													if( !j4valid[ij4] )
																													{
																														continue;
																													}
																													j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j3;
																														solution.basesol[1].foffset = j4;
																														solution.basesol[2].foffset = j5;
																														solution.basesol[3].foffset = j6;
																														solution.basesol[4].foffset = j7;
																														solution.basesol[5].foffset = j8;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}
																								}
																							}

																						}

																					}

																				} else
																				{
																					{
																						IKReal j3array[1], cj3array[1], sj3array[1];
																						bool j3valid[1]={false};
																						IKReal x213=(cj8)*(cj8);
																						IKReal x214=(sj8)*(sj8);
																						IKReal x215=((cj7)*(cj8)*(r02)*(r11));
																						IKReal x216=((r01)*(r10)*(sj7)*(x213));
																						IKReal x217=((cj7)*(r02)*(r10)*(sj8));
																						IKReal x218=((r01)*(r10)*(sj7)*(x214));
																						IKReal x219=((x215)+(x216)+(x217)+(x218));
																						IKReal x220=((cj7)*(cj8)*(r01)*(r12));
																						IKReal x221=((cj7)*(r00)*(r12)*(sj8));
																						IKReal x222=((r00)*(r11)*(sj7)*(x214));
																						IKReal x223=((r00)*(r11)*(sj7)*(x213));
																						IKReal x224=((x221)+(x220)+(x223)+(x222));
																						j3array[0]=IKatan2(((((IKabs(((x224)+(((-1.00000000000000)*(x219))))) != 0)?((IKReal)1/(((x224)+(((-1.00000000000000)*(x219)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((((IKabs(((x219)+(((-1.00000000000000)*(x224))))) != 0)?((IKReal)1/(((x219)+(((-1.00000000000000)*(x224)))))):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
																						sj3array[0]=IKsin(j3array[0]);
																						cj3array[0]=IKcos(j3array[0]);
																						if( j3array[0] > IKPI )
																						{
																							j3array[0]-=IK2PI;
																						}
																						else if( j3array[0] < -IKPI )
																						{
																							j3array[0]+=IK2PI;
																						}
																						j3valid[0] = true;
																						for(int ij3 = 0; ij3 < 1; ++ij3)
																						{
																							if( !j3valid[ij3] )
																							{
																								continue;
																							}
																							j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																							{
																								IKReal dummyeval[1];
																								IKReal gconst21;
																								gconst21=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																								dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									{
																										IKReal dummyeval[1];
																										dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											continue;

																										} else
																										{
																											{
																												IKReal j4array[1], cj4array[1], sj4array[1];
																												bool j4valid[1]={false};
																												IKReal x225=(cj5)*(cj5);
																												IKReal x226=(sj5)*(sj5);
																												IKReal x227=((x225)+(x226));
																												j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x227) != 0)?((IKReal)1/(x227)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r20)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj8)*(r21)))))), ((((IKabs(x227) != 0)?((IKReal)1/(x227)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(r20)*(sj5)*(sj8)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																												sj4array[0]=IKsin(j4array[0]);
																												cj4array[0]=IKcos(j4array[0]);
																												if( j4array[0] > IKPI )
																												{
																													j4array[0]-=IK2PI;
																												}
																												else if( j4array[0] < -IKPI )
																												{
																													j4array[0]+=IK2PI;
																												}
																												j4valid[0] = true;
																												for(int ij4 = 0; ij4 < 1; ++ij4)
																												{
																													if( !j4valid[ij4] )
																													{
																														continue;
																													}
																													j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j3;
																														solution.basesol[1].foffset = j4;
																														solution.basesol[2].foffset = j5;
																														solution.basesol[3].foffset = j6;
																														solution.basesol[4].foffset = j7;
																														solution.basesol[5].foffset = j8;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}

																								} else
																								{
																									{
																										IKReal j4array[1], cj4array[1], sj4array[1];
																										bool j4valid[1]={false};
																										j4array[0]=IKatan2(((gconst21)*(((((cj3)*(r00)*(sj5)*(sj8)))+(((cj5)*(r20)*(sj8)))+(((cj3)*(cj8)*(r01)*(sj5)))+(((r10)*(sj3)*(sj5)*(sj8)))+(((cj8)*(r11)*(sj3)*(sj5)))+(((cj5)*(cj8)*(r21)))))), ((gconst21)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj5)*(r00)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj8)*(r01)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj3)))))));
																										sj4array[0]=IKsin(j4array[0]);
																										cj4array[0]=IKcos(j4array[0]);
																										if( j4array[0] > IKPI )
																										{
																											j4array[0]-=IK2PI;
																										}
																										else if( j4array[0] < -IKPI )
																										{
																											j4array[0]+=IK2PI;
																										}
																										j4valid[0] = true;
																										for(int ij4 = 0; ij4 < 1; ++ij4)
																										{
																											if( !j4valid[ij4] )
																											{
																												continue;
																											}
																											j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																											{
																												vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																												solution.basesol.resize(6);
																												solution.basesol[0].foffset = j3;
																												solution.basesol[1].foffset = j4;
																												solution.basesol[2].foffset = j5;
																												solution.basesol[3].foffset = j6;
																												solution.basesol[4].foffset = j7;
																												solution.basesol[5].foffset = j8;
																												solution.vfree.resize(0);
																											}
																										}
																									}

																								}

																							}
																						}
																					}

																				}

																			}

																		} else
																		{
																			{
																				IKReal j4array[1], cj4array[1], sj4array[1];
																				bool j4valid[1]={false};
																				IKReal x228=(cj5)*(cj5);
																				IKReal x229=(sj5)*(sj5);
																				IKReal x230=((x229)+(x228));
																				j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x230) != 0)?((IKReal)1/(x230)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r20)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj8)*(r21)))))), ((((IKabs(x230) != 0)?((IKReal)1/(x230)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(r20)*(sj5)*(sj8)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																				sj4array[0]=IKsin(j4array[0]);
																				cj4array[0]=IKcos(j4array[0]);
																				if( j4array[0] > IKPI )
																				{
																					j4array[0]-=IK2PI;
																				}
																				else if( j4array[0] < -IKPI )
																				{
																					j4array[0]+=IK2PI;
																				}
																				j4valid[0] = true;
																				for(int ij4 = 0; ij4 < 1; ++ij4)
																				{
																					if( !j4valid[ij4] )
																					{
																						continue;
																					}
																					j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																					{
																						IKReal dummyeval[1];
																						IKReal x231=(cj8)*(cj8);
																						IKReal x232=(sj8)*(sj8);
																						dummyeval[0]=((((r00)*(r11)*(sj7)*(x231)))+(((r00)*(r11)*(sj7)*(x232)))+(((cj7)*(cj8)*(r01)*(r12)))+(((cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(cj7)*(r02)*(r10)*(sj8)))+(((-1.00000000000000)*(r01)*(r10)*(sj7)*(x231)))+(((-1.00000000000000)*(r01)*(r10)*(sj7)*(x232)))+(((-1.00000000000000)*(cj7)*(cj8)*(r02)*(r11))));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							{
																								IKReal dummyeval[1];
																								IKReal x233=(sj8)*(sj8);
																								IKReal x234=(cj8)*(cj8);
																								dummyeval[0]=((((-1.00000000000000)*(x233)*((r00)*(r00))))+(((-1.00000000000000)*(x233)*((r10)*(r10))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x234)*((r11)*(r11))))+(((-1.00000000000000)*(x234)*((r01)*(r01))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									{
																										IKReal dummyeval[1];
																										IKReal x235=(cj8)*(cj8);
																										IKReal x236=(sj8)*(sj8);
																										dummyeval[0]=((((-1.00000000000000)*(cj7)*(r10)*(r11)*(x236)))+(((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((cj7)*(r10)*(r11)*(x235)))+(((r10)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x236)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r00)*(r01)*(x235)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7))));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											continue;

																										} else
																										{
																											{
																												IKReal j3array[1], cj3array[1], sj3array[1];
																												bool j3valid[1]={false};
																												IKReal x237=(cj8)*(cj8);
																												IKReal x238=(sj8)*(sj8);
																												IKReal x239=(r11)*(r11);
																												IKReal x240=((cj7)*(cj8)*(sj8)*(x239));
																												IKReal x241=((cj7)*(r10)*(r11)*(x238));
																												IKReal x242=(r01)*(r01);
																												IKReal x243=((cj7)*(cj8)*(sj8)*(x242));
																												IKReal x244=((cj7)*(r00)*(r01)*(x238));
																												IKReal x245=((x243)+(x241)+(x240)+(x244));
																												IKReal x246=(r10)*(r10);
																												IKReal x247=((cj7)*(cj8)*(sj8)*(x246));
																												IKReal x248=((r00)*(r02)*(sj7)*(sj8));
																												IKReal x249=((r10)*(r12)*(sj7)*(sj8));
																												IKReal x250=((cj7)*(r00)*(r01)*(x237));
																												IKReal x251=((cj8)*(r01)*(r02)*(sj7));
																												IKReal x252=(r00)*(r00);
																												IKReal x253=((cj7)*(cj8)*(sj8)*(x252));
																												IKReal x254=((cj7)*(r10)*(r11)*(x237));
																												IKReal x255=((cj8)*(r11)*(r12)*(sj7));
																												IKReal x256=((x254)+(x255)+(x250)+(x251)+(x253)+(x247)+(x249)+(x248));
																												j3array[0]=IKatan2(((((IKabs(((x256)+(((-1.00000000000000)*(x245))))) != 0)?((IKReal)1/(((x256)+(((-1.00000000000000)*(x245)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj4)*(cj8)*(r11)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj4)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj4)*(r10)*(sj5)*(sj8)))))), ((((IKabs(((x245)+(((-1.00000000000000)*(x256))))) != 0)?((IKReal)1/(((x245)+(((-1.00000000000000)*(x256)))))):(IKReal)1.0e30))*(((((cj4)*(r00)*(sj5)*(sj8)))+(((cj5)*(cj8)*(r01)*(sj4)))+(((cj4)*(cj8)*(r01)*(sj5)))+(((cj5)*(r00)*(sj4)*(sj8)))))));
																												sj3array[0]=IKsin(j3array[0]);
																												cj3array[0]=IKcos(j3array[0]);
																												if( j3array[0] > IKPI )
																												{
																													j3array[0]-=IK2PI;
																												}
																												else if( j3array[0] < -IKPI )
																												{
																													j3array[0]+=IK2PI;
																												}
																												j3valid[0] = true;
																												for(int ij3 = 0; ij3 < 1; ++ij3)
																												{
																													if( !j3valid[ij3] )
																													{
																														continue;
																													}
																													j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j3;
																														solution.basesol[1].foffset = j4;
																														solution.basesol[2].foffset = j5;
																														solution.basesol[3].foffset = j6;
																														solution.basesol[4].foffset = j7;
																														solution.basesol[5].foffset = j8;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}

																								} else
																								{
																									{
																										IKReal j3array[1], cj3array[1], sj3array[1];
																										bool j3valid[1]={false};
																										IKReal x257=(sj8)*(sj8);
																										IKReal x258=(cj8)*(cj8);
																										IKReal x259=(r11)*(r11);
																										IKReal x260=((x258)*(x259));
																										IKReal x261=(r00)*(r00);
																										IKReal x262=((x257)*(x261));
																										IKReal x263=(r10)*(r10);
																										IKReal x264=((x257)*(x263));
																										IKReal x265=(r01)*(r01);
																										IKReal x266=((x258)*(x265));
																										IKReal x267=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
																										IKReal x268=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
																										IKReal x269=((x264)+(x267)+(x266)+(x260)+(x262)+(x268));
																										j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x269) != 0)?((IKReal)1/(x269)):(IKReal)1.0e30))*(((((r10)*(sj4)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj4)*(cj5)*(r10)*(sj8)))+(((cj8)*(r11)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj8)*(r11)))))), ((((IKabs(x269) != 0)?((IKReal)1/(x269)):(IKReal)1.0e30))*(((((cj4)*(cj5)*(r00)*(sj8)))+(((-1.00000000000000)*(r00)*(sj4)*(sj5)*(sj8)))+(((cj4)*(cj5)*(cj8)*(r01)))+(((-1.00000000000000)*(cj8)*(r01)*(sj4)*(sj5)))))));
																										sj3array[0]=IKsin(j3array[0]);
																										cj3array[0]=IKcos(j3array[0]);
																										if( j3array[0] > IKPI )
																										{
																											j3array[0]-=IK2PI;
																										}
																										else if( j3array[0] < -IKPI )
																										{
																											j3array[0]+=IK2PI;
																										}
																										j3valid[0] = true;
																										for(int ij3 = 0; ij3 < 1; ++ij3)
																										{
																											if( !j3valid[ij3] )
																											{
																												continue;
																											}
																											j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																											{
																												vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																												solution.basesol.resize(6);
																												solution.basesol[0].foffset = j3;
																												solution.basesol[1].foffset = j4;
																												solution.basesol[2].foffset = j5;
																												solution.basesol[3].foffset = j6;
																												solution.basesol[4].foffset = j7;
																												solution.basesol[5].foffset = j8;
																												solution.vfree.resize(0);
																											}
																										}
																									}

																								}

																							}

																						} else
																						{
																							{
																								IKReal j3array[1], cj3array[1], sj3array[1];
																								bool j3valid[1]={false};
																								IKReal x270=(cj8)*(cj8);
																								IKReal x271=(sj8)*(sj8);
																								IKReal x272=((cj7)*(cj8)*(r02)*(r11));
																								IKReal x273=((r01)*(r10)*(sj7)*(x270));
																								IKReal x274=((cj7)*(r02)*(r10)*(sj8));
																								IKReal x275=((r01)*(r10)*(sj7)*(x271));
																								IKReal x276=((x274)+(x275)+(x272)+(x273));
																								IKReal x277=((cj7)*(cj8)*(r01)*(r12));
																								IKReal x278=((cj7)*(r00)*(r12)*(sj8));
																								IKReal x279=((r00)*(r11)*(sj7)*(x271));
																								IKReal x280=((r00)*(r11)*(sj7)*(x270));
																								IKReal x281=((x277)+(x278)+(x279)+(x280));
																								j3array[0]=IKatan2(((((IKabs(((x281)+(((-1.00000000000000)*(x276))))) != 0)?((IKReal)1/(((x281)+(((-1.00000000000000)*(x276)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))), ((((IKabs(((x276)+(((-1.00000000000000)*(x281))))) != 0)?((IKReal)1/(((x276)+(((-1.00000000000000)*(x281)))))):(IKReal)1.0e30))*(((((r00)*(sj8)))+(((cj8)*(r01)))))));
																								sj3array[0]=IKsin(j3array[0]);
																								cj3array[0]=IKcos(j3array[0]);
																								if( j3array[0] > IKPI )
																								{
																									j3array[0]-=IK2PI;
																								}
																								else if( j3array[0] < -IKPI )
																								{
																									j3array[0]+=IK2PI;
																								}
																								j3valid[0] = true;
																								for(int ij3 = 0; ij3 < 1; ++ij3)
																								{
																									if( !j3valid[ij3] )
																									{
																										continue;
																									}
																									j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																									{
																										vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																										solution.basesol.resize(6);
																										solution.basesol[0].foffset = j3;
																										solution.basesol[1].foffset = j4;
																										solution.basesol[2].foffset = j5;
																										solution.basesol[3].foffset = j6;
																										solution.basesol[4].foffset = j7;
																										solution.basesol[5].foffset = j8;
																										solution.vfree.resize(0);
																									}
																								}
																							}

																						}

																					}
																				}
																			}

																		}

																	}
																}
															}

														} else
														{
															evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
															evalcond[1]=((0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
															evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
															if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
															{
																{
																	IKReal j5array[1], cj5array[1], sj5array[1];
																	bool j5valid[1]={false};
																	j5array[0]=IKatan2(((0.120000000000000)+(((-4.00000000000000)*(cj8)*(npx)*(sj7)))+(((4.00000000000000)*(cj7)*(npz)))+(((0.360000000000000)*(sj7)))+(((4.00000000000000)*(npy)*(sj7)*(sj8)))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
																	sj5array[0]=IKsin(j5array[0]);
																	cj5array[0]=IKcos(j5array[0]);
																	if( j5array[0] > IKPI )
																	{
																		j5array[0]-=IK2PI;
																	}
																	else if( j5array[0] < -IKPI )
																	{
																		j5array[0]+=IK2PI;
																	}
																	j5valid[0] = true;
																	for(int ij5 = 0; ij5 < 1; ++ij5)
																	{
																		if( !j5valid[ij5] )
																		{
																			continue;
																		}
																		j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

																		{
																			IKReal dummyeval[1];
																			dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				{
																					IKReal dummyeval[1];
																					IKReal x282=(sj8)*(sj8);
																					IKReal x283=(cj8)*(cj8);
																					dummyeval[0]=((((x282)*((r10)*(r10))))+(((x283)*((r11)*(r11))))+(((x283)*((r01)*(r01))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((x282)*((r00)*(r00))))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							IKReal x284=(sj8)*(sj8);
																							IKReal x285=(cj8)*(cj8);
																							dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj8)*(r02)*(r11)*(sj7)))+(((cj7)*(r00)*(r11)*(x285)))+(((cj7)*(r00)*(r11)*(x284)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x284)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x285)))+(((r02)*(r10)*(sj7)*(sj8))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								continue;

																							} else
																							{
																								{
																									IKReal j3array[1], cj3array[1], sj3array[1];
																									bool j3valid[1]={false};
																									IKReal x286=(sj8)*(sj8);
																									IKReal x287=(cj8)*(cj8);
																									IKReal x288=((cj7)*(r01)*(r10)*(x286));
																									IKReal x289=((cj7)*(r01)*(r10)*(x287));
																									IKReal x290=((r00)*(r12)*(sj7)*(sj8));
																									IKReal x291=((cj8)*(r01)*(r12)*(sj7));
																									IKReal x292=((x290)+(x291)+(x289)+(x288));
																									IKReal x293=((cj7)*(r00)*(r11)*(x286));
																									IKReal x294=((cj7)*(r00)*(r11)*(x287));
																									IKReal x295=((cj8)*(r02)*(r11)*(sj7));
																									IKReal x296=((r02)*(r10)*(sj7)*(sj8));
																									IKReal x297=((x293)+(x294)+(x295)+(x296));
																									j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x292)))+(x297))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x292)))+(x297)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x297)))+(x292))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x297)))+(x292)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
																									sj3array[0]=IKsin(j3array[0]);
																									cj3array[0]=IKcos(j3array[0]);
																									if( j3array[0] > IKPI )
																									{
																										j3array[0]-=IK2PI;
																									}
																									else if( j3array[0] < -IKPI )
																									{
																										j3array[0]+=IK2PI;
																									}
																									j3valid[0] = true;
																									for(int ij3 = 0; ij3 < 1; ++ij3)
																									{
																										if( !j3valid[ij3] )
																										{
																											continue;
																										}
																										j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																										{
																											IKReal dummyeval[1];
																											IKReal gconst22;
																											gconst22=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																											dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												{
																													IKReal dummyeval[1];
																													dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														{
																															IKReal dummyeval[1];
																															dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																															{
																																continue;

																															} else
																															{
																																{
																																	IKReal j4array[1], cj4array[1], sj4array[1];
																																	bool j4valid[1]={false};
																																	IKReal x298=(cj5)*(cj5);
																																	IKReal x299=(sj5)*(sj5);
																																	IKReal x300=((x298)+(x299));
																																	j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x300) != 0)?((IKReal)1/(x300)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x300) != 0)?((IKReal)1/(x300)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																																	sj4array[0]=IKsin(j4array[0]);
																																	cj4array[0]=IKcos(j4array[0]);
																																	if( j4array[0] > IKPI )
																																	{
																																		j4array[0]-=IK2PI;
																																	}
																																	else if( j4array[0] < -IKPI )
																																	{
																																		j4array[0]+=IK2PI;
																																	}
																																	j4valid[0] = true;
																																	for(int ij4 = 0; ij4 < 1; ++ij4)
																																	{
																																		if( !j4valid[ij4] )
																																		{
																																			continue;
																																		}
																																		j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																		{
																																			vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																			solution.basesol.resize(6);
																																			solution.basesol[0].foffset = j3;
																																			solution.basesol[1].foffset = j4;
																																			solution.basesol[2].foffset = j5;
																																			solution.basesol[3].foffset = j6;
																																			solution.basesol[4].foffset = j7;
																																			solution.basesol[5].foffset = j8;
																																			solution.vfree.resize(0);
																																		}
																																	}
																																}

																															}

																														}

																													} else
																													{
																														{
																															IKReal j4array[1], cj4array[1], sj4array[1];
																															bool j4valid[1]={false};
																															IKReal x301=(cj5)*(cj5);
																															IKReal x302=(sj5)*(sj5);
																															IKReal x303=((x302)+(x301));
																															j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x303) != 0)?((IKReal)1/(x303)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x303) != 0)?((IKReal)1/(x303)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																															sj4array[0]=IKsin(j4array[0]);
																															cj4array[0]=IKcos(j4array[0]);
																															if( j4array[0] > IKPI )
																															{
																																j4array[0]-=IK2PI;
																															}
																															else if( j4array[0] < -IKPI )
																															{
																																j4array[0]+=IK2PI;
																															}
																															j4valid[0] = true;
																															for(int ij4 = 0; ij4 < 1; ++ij4)
																															{
																																if( !j4valid[ij4] )
																																{
																																	continue;
																																}
																																j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j3;
																																	solution.basesol[1].foffset = j4;
																																	solution.basesol[2].foffset = j5;
																																	solution.basesol[3].foffset = j6;
																																	solution.basesol[4].foffset = j7;
																																	solution.basesol[5].foffset = j8;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}

																											} else
																											{
																												{
																													IKReal j4array[1], cj4array[1], sj4array[1];
																													bool j4valid[1]={false};
																													j4array[0]=IKatan2(((gconst22)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst22)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																													sj4array[0]=IKsin(j4array[0]);
																													cj4array[0]=IKcos(j4array[0]);
																													if( j4array[0] > IKPI )
																													{
																														j4array[0]-=IK2PI;
																													}
																													else if( j4array[0] < -IKPI )
																													{
																														j4array[0]+=IK2PI;
																													}
																													j4valid[0] = true;
																													for(int ij4 = 0; ij4 < 1; ++ij4)
																													{
																														if( !j4valid[ij4] )
																														{
																															continue;
																														}
																														j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j3;
																															solution.basesol[1].foffset = j4;
																															solution.basesol[2].foffset = j5;
																															solution.basesol[3].foffset = j6;
																															solution.basesol[4].foffset = j7;
																															solution.basesol[5].foffset = j8;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j3array[1], cj3array[1], sj3array[1];
																							bool j3valid[1]={false};
																							IKReal x304=(sj8)*(sj8);
																							IKReal x305=(cj8)*(cj8);
																							IKReal x306=(r11)*(r11);
																							IKReal x307=((x305)*(x306));
																							IKReal x308=(r00)*(r00);
																							IKReal x309=((x304)*(x308));
																							IKReal x310=(r10)*(r10);
																							IKReal x311=((x304)*(x310));
																							IKReal x312=(r01)*(r01);
																							IKReal x313=((x305)*(x312));
																							IKReal x314=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
																							IKReal x315=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
																							IKReal x316=((x309)+(x307)+(x315)+(x314)+(x311)+(x313));
																							j3array[0]=IKatan2(((((IKabs(x316) != 0)?((IKReal)1/(x316)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((-1.00000000000000)*(((IKabs(x316) != 0)?((IKReal)1/(x316)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
																							sj3array[0]=IKsin(j3array[0]);
																							cj3array[0]=IKcos(j3array[0]);
																							if( j3array[0] > IKPI )
																							{
																								j3array[0]-=IK2PI;
																							}
																							else if( j3array[0] < -IKPI )
																							{
																								j3array[0]+=IK2PI;
																							}
																							j3valid[0] = true;
																							for(int ij3 = 0; ij3 < 1; ++ij3)
																							{
																								if( !j3valid[ij3] )
																								{
																									continue;
																								}
																								j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																								{
																									IKReal dummyeval[1];
																									IKReal gconst22;
																									gconst22=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																									dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												{
																													IKReal dummyeval[1];
																													dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														continue;

																													} else
																													{
																														{
																															IKReal j4array[1], cj4array[1], sj4array[1];
																															bool j4valid[1]={false};
																															IKReal x317=(cj5)*(cj5);
																															IKReal x318=(sj5)*(sj5);
																															IKReal x319=((x318)+(x317));
																															j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x319) != 0)?((IKReal)1/(x319)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x319) != 0)?((IKReal)1/(x319)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																															sj4array[0]=IKsin(j4array[0]);
																															cj4array[0]=IKcos(j4array[0]);
																															if( j4array[0] > IKPI )
																															{
																																j4array[0]-=IK2PI;
																															}
																															else if( j4array[0] < -IKPI )
																															{
																																j4array[0]+=IK2PI;
																															}
																															j4valid[0] = true;
																															for(int ij4 = 0; ij4 < 1; ++ij4)
																															{
																																if( !j4valid[ij4] )
																																{
																																	continue;
																																}
																																j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j3;
																																	solution.basesol[1].foffset = j4;
																																	solution.basesol[2].foffset = j5;
																																	solution.basesol[3].foffset = j6;
																																	solution.basesol[4].foffset = j7;
																																	solution.basesol[5].foffset = j8;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}

																											} else
																											{
																												{
																													IKReal j4array[1], cj4array[1], sj4array[1];
																													bool j4valid[1]={false};
																													IKReal x320=(cj5)*(cj5);
																													IKReal x321=(sj5)*(sj5);
																													IKReal x322=((x320)+(x321));
																													j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x322) != 0)?((IKReal)1/(x322)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x322) != 0)?((IKReal)1/(x322)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																													sj4array[0]=IKsin(j4array[0]);
																													cj4array[0]=IKcos(j4array[0]);
																													if( j4array[0] > IKPI )
																													{
																														j4array[0]-=IK2PI;
																													}
																													else if( j4array[0] < -IKPI )
																													{
																														j4array[0]+=IK2PI;
																													}
																													j4valid[0] = true;
																													for(int ij4 = 0; ij4 < 1; ++ij4)
																													{
																														if( !j4valid[ij4] )
																														{
																															continue;
																														}
																														j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j3;
																															solution.basesol[1].foffset = j4;
																															solution.basesol[2].foffset = j5;
																															solution.basesol[3].foffset = j6;
																															solution.basesol[4].foffset = j7;
																															solution.basesol[5].foffset = j8;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j4array[1], cj4array[1], sj4array[1];
																											bool j4valid[1]={false};
																											j4array[0]=IKatan2(((gconst22)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst22)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																											sj4array[0]=IKsin(j4array[0]);
																											cj4array[0]=IKcos(j4array[0]);
																											if( j4array[0] > IKPI )
																											{
																												j4array[0]-=IK2PI;
																											}
																											else if( j4array[0] < -IKPI )
																											{
																												j4array[0]+=IK2PI;
																											}
																											j4valid[0] = true;
																											for(int ij4 = 0; ij4 < 1; ++ij4)
																											{
																												if( !j4valid[ij4] )
																												{
																													continue;
																												}
																												j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j3;
																													solution.basesol[1].foffset = j4;
																													solution.basesol[2].foffset = j5;
																													solution.basesol[3].foffset = j6;
																													solution.basesol[4].foffset = j7;
																													solution.basesol[5].foffset = j8;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}
																							}
																						}

																					}

																				}

																			} else
																			{
																				{
																					IKReal j4array[1], cj4array[1], sj4array[1];
																					bool j4valid[1]={false};
																					IKReal x323=(cj5)*(cj5);
																					IKReal x324=(sj5)*(sj5);
																					IKReal x325=((x324)+(x323));
																					j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x325) != 0)?((IKReal)1/(x325)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x325) != 0)?((IKReal)1/(x325)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																					sj4array[0]=IKsin(j4array[0]);
																					cj4array[0]=IKcos(j4array[0]);
																					if( j4array[0] > IKPI )
																					{
																						j4array[0]-=IK2PI;
																					}
																					else if( j4array[0] < -IKPI )
																					{
																						j4array[0]+=IK2PI;
																					}
																					j4valid[0] = true;
																					for(int ij4 = 0; ij4 < 1; ++ij4)
																					{
																						if( !j4valid[ij4] )
																						{
																							continue;
																						}
																						j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																						{
																							IKReal dummyeval[1];
																							IKReal gconst23;
																							IKReal x326=(cj8)*(cj8);
																							IKReal x327=(sj8)*(sj8);
																							gconst23=IKsign(((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x327)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x327)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r10)*(r11)*(x326)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((cj7)*(r00)*(r01)*(x326)))));
																							IKReal x328=(cj8)*(cj8);
																							IKReal x329=(sj8)*(sj8);
																							dummyeval[0]=((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x329)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x329)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r10)*(r11)*(x328)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((cj7)*(r00)*(r01)*(x328))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									IKReal x330=(sj8)*(sj8);
																									IKReal x331=(cj8)*(cj8);
																									dummyeval[0]=((((x331)*((r11)*(r11))))+(((x331)*((r01)*(r01))))+(((x330)*((r00)*(r00))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((x330)*((r10)*(r10))))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											IKReal x332=(sj8)*(sj8);
																											IKReal x333=(cj8)*(cj8);
																											dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj8)*(r02)*(r11)*(sj7)))+(((cj7)*(r00)*(r11)*(x333)))+(((cj7)*(r00)*(r11)*(x332)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x333)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x332)))+(((r02)*(r10)*(sj7)*(sj8))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												continue;

																											} else
																											{
																												{
																													IKReal j3array[1], cj3array[1], sj3array[1];
																													bool j3valid[1]={false};
																													IKReal x334=(sj8)*(sj8);
																													IKReal x335=(cj8)*(cj8);
																													IKReal x336=((cj7)*(r01)*(r10)*(x334));
																													IKReal x337=((cj7)*(r01)*(r10)*(x335));
																													IKReal x338=((r00)*(r12)*(sj7)*(sj8));
																													IKReal x339=((cj8)*(r01)*(r12)*(sj7));
																													IKReal x340=((x339)+(x338)+(x337)+(x336));
																													IKReal x341=((cj7)*(r00)*(r11)*(x334));
																													IKReal x342=((cj7)*(r00)*(r11)*(x335));
																													IKReal x343=((cj8)*(r02)*(r11)*(sj7));
																													IKReal x344=((r02)*(r10)*(sj7)*(sj8));
																													IKReal x345=((x342)+(x343)+(x341)+(x344));
																													j3array[0]=IKatan2(((((IKabs(((x345)+(((-1.00000000000000)*(x340))))) != 0)?((IKReal)1/(((x345)+(((-1.00000000000000)*(x340)))))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((x340)+(((-1.00000000000000)*(x345))))) != 0)?((IKReal)1/(((x340)+(((-1.00000000000000)*(x345)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
																													sj3array[0]=IKsin(j3array[0]);
																													cj3array[0]=IKcos(j3array[0]);
																													if( j3array[0] > IKPI )
																													{
																														j3array[0]-=IK2PI;
																													}
																													else if( j3array[0] < -IKPI )
																													{
																														j3array[0]+=IK2PI;
																													}
																													j3valid[0] = true;
																													for(int ij3 = 0; ij3 < 1; ++ij3)
																													{
																														if( !j3valid[ij3] )
																														{
																															continue;
																														}
																														j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j3;
																															solution.basesol[1].foffset = j4;
																															solution.basesol[2].foffset = j5;
																															solution.basesol[3].foffset = j6;
																															solution.basesol[4].foffset = j7;
																															solution.basesol[5].foffset = j8;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j3array[1], cj3array[1], sj3array[1];
																											bool j3valid[1]={false};
																											IKReal x346=(sj8)*(sj8);
																											IKReal x347=(cj8)*(cj8);
																											IKReal x348=(r11)*(r11);
																											IKReal x349=((x347)*(x348));
																											IKReal x350=(r00)*(r00);
																											IKReal x351=((x346)*(x350));
																											IKReal x352=(r10)*(r10);
																											IKReal x353=((x346)*(x352));
																											IKReal x354=(r01)*(r01);
																											IKReal x355=((x347)*(x354));
																											IKReal x356=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
																											IKReal x357=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
																											IKReal x358=((x351)+(x353)+(x355)+(x357)+(x356)+(x349));
																											j3array[0]=IKatan2(((((IKabs(x358) != 0)?((IKReal)1/(x358)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((-1.00000000000000)*(((IKabs(x358) != 0)?((IKReal)1/(x358)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
																											sj3array[0]=IKsin(j3array[0]);
																											cj3array[0]=IKcos(j3array[0]);
																											if( j3array[0] > IKPI )
																											{
																												j3array[0]-=IK2PI;
																											}
																											else if( j3array[0] < -IKPI )
																											{
																												j3array[0]+=IK2PI;
																											}
																											j3valid[0] = true;
																											for(int ij3 = 0; ij3 < 1; ++ij3)
																											{
																												if( !j3valid[ij3] )
																												{
																													continue;
																												}
																												j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j3;
																													solution.basesol[1].foffset = j4;
																													solution.basesol[2].foffset = j5;
																													solution.basesol[3].foffset = j6;
																													solution.basesol[4].foffset = j7;
																													solution.basesol[5].foffset = j8;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j3array[1], cj3array[1], sj3array[1];
																									bool j3valid[1]={false};
																									j3array[0]=IKatan2(((gconst23)*(((((-1.00000000000000)*(cj4)*(cj8)*(r11)*(sj5)))+(((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj4)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))+(((-1.00000000000000)*(cj4)*(r10)*(sj5)*(sj8)))))), ((gconst23)*(((((-1.00000000000000)*(cj5)*(cj8)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj8)*(r01)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj4)*(r00)*(sj5)*(sj8)))+(((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))));
																									sj3array[0]=IKsin(j3array[0]);
																									cj3array[0]=IKcos(j3array[0]);
																									if( j3array[0] > IKPI )
																									{
																										j3array[0]-=IK2PI;
																									}
																									else if( j3array[0] < -IKPI )
																									{
																										j3array[0]+=IK2PI;
																									}
																									j3valid[0] = true;
																									for(int ij3 = 0; ij3 < 1; ++ij3)
																									{
																										if( !j3valid[ij3] )
																										{
																											continue;
																										}
																										j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j3;
																											solution.basesol[1].foffset = j4;
																											solution.basesol[2].foffset = j5;
																											solution.basesol[3].foffset = j6;
																											solution.basesol[4].foffset = j7;
																											solution.basesol[5].foffset = j8;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}
																					}
																				}

																			}

																		}
																	}
																}

															} else
															{
																evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
																evalcond[1]=((-0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
																if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
																{
																	{
																		IKReal j5array[1], cj5array[1], sj5array[1];
																		bool j5valid[1]={false};
																		j5array[0]=IKatan2(((0.120000000000000)+(((4.00000000000000)*(cj8)*(npx)*(sj7)))+(((-4.00000000000000)*(cj7)*(npz)))+(((-0.360000000000000)*(sj7)))+(((-4.00000000000000)*(npy)*(sj7)*(sj8)))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
																		sj5array[0]=IKsin(j5array[0]);
																		cj5array[0]=IKcos(j5array[0]);
																		if( j5array[0] > IKPI )
																		{
																			j5array[0]-=IK2PI;
																		}
																		else if( j5array[0] < -IKPI )
																		{
																			j5array[0]+=IK2PI;
																		}
																		j5valid[0] = true;
																		for(int ij5 = 0; ij5 < 1; ++ij5)
																		{
																			if( !j5valid[ij5] )
																			{
																				continue;
																			}
																			j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

																			{
																				IKReal dummyeval[1];
																				IKReal gconst24;
																				gconst24=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																				dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																				if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																				{
																					{
																						IKReal dummyeval[1];
																						IKReal x359=(sj8)*(sj8);
																						IKReal x360=(cj8)*(cj8);
																						dummyeval[0]=((((-1.00000000000000)*(x360)*((r11)*(r11))))+(((-1.00000000000000)*(x359)*((r10)*(r10))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x360)*((r01)*(r01))))+(((-1.00000000000000)*(x359)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							{
																								IKReal dummyeval[1];
																								IKReal x361=(sj8)*(sj8);
																								IKReal x362=(cj8)*(cj8);
																								dummyeval[0]=((((-1.00000000000000)*(cj7)*(r00)*(r11)*(x362)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x361)))+(((r00)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj8)*(r02)*(r11)*(sj7)))+(((cj7)*(r01)*(r10)*(x361)))+(((cj7)*(r01)*(r10)*(x362)))+(((-1.00000000000000)*(r02)*(r10)*(sj7)*(sj8))));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									continue;

																								} else
																								{
																									{
																										IKReal j3array[1], cj3array[1], sj3array[1];
																										bool j3valid[1]={false};
																										IKReal x363=(sj8)*(sj8);
																										IKReal x364=(cj8)*(cj8);
																										IKReal x365=((cj7)*(r00)*(r11)*(x363));
																										IKReal x366=((cj7)*(r00)*(r11)*(x364));
																										IKReal x367=((cj8)*(r02)*(r11)*(sj7));
																										IKReal x368=((r02)*(r10)*(sj7)*(sj8));
																										IKReal x369=((x368)+(x365)+(x366)+(x367));
																										IKReal x370=((cj7)*(r01)*(r10)*(x363));
																										IKReal x371=((cj7)*(r01)*(r10)*(x364));
																										IKReal x372=((r00)*(r12)*(sj7)*(sj8));
																										IKReal x373=((cj8)*(r01)*(r12)*(sj7));
																										IKReal x374=((x373)+(x372)+(x371)+(x370));
																										j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x369)))+(x374))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x369)))+(x374)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x374)))+(x369))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x374)))+(x369)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
																										sj3array[0]=IKsin(j3array[0]);
																										cj3array[0]=IKcos(j3array[0]);
																										if( j3array[0] > IKPI )
																										{
																											j3array[0]-=IK2PI;
																										}
																										else if( j3array[0] < -IKPI )
																										{
																											j3array[0]+=IK2PI;
																										}
																										j3valid[0] = true;
																										for(int ij3 = 0; ij3 < 1; ++ij3)
																										{
																											if( !j3valid[ij3] )
																											{
																												continue;
																											}
																											j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																											{
																												IKReal dummyeval[1];
																												IKReal gconst25;
																												gconst25=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																												dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																												if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																												{
																													continue;

																												} else
																												{
																													{
																														IKReal j4array[1], cj4array[1], sj4array[1];
																														bool j4valid[1]={false};
																														j4array[0]=IKatan2(((gconst25)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst25)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																														sj4array[0]=IKsin(j4array[0]);
																														cj4array[0]=IKcos(j4array[0]);
																														if( j4array[0] > IKPI )
																														{
																															j4array[0]-=IK2PI;
																														}
																														else if( j4array[0] < -IKPI )
																														{
																															j4array[0]+=IK2PI;
																														}
																														j4valid[0] = true;
																														for(int ij4 = 0; ij4 < 1; ++ij4)
																														{
																															if( !j4valid[ij4] )
																															{
																																continue;
																															}
																															j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																															{
																																vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																solution.basesol.resize(6);
																																solution.basesol[0].foffset = j3;
																																solution.basesol[1].foffset = j4;
																																solution.basesol[2].foffset = j5;
																																solution.basesol[3].foffset = j6;
																																solution.basesol[4].foffset = j7;
																																solution.basesol[5].foffset = j8;
																																solution.vfree.resize(0);
																															}
																														}
																													}

																												}

																											}
																										}
																									}

																								}

																							}

																						} else
																						{
																							{
																								IKReal j3array[1], cj3array[1], sj3array[1];
																								bool j3valid[1]={false};
																								IKReal x375=(sj8)*(sj8);
																								IKReal x376=(cj8)*(cj8);
																								IKReal x377=(r11)*(r11);
																								IKReal x378=((x376)*(x377));
																								IKReal x379=(r00)*(r00);
																								IKReal x380=((x375)*(x379));
																								IKReal x381=(r10)*(r10);
																								IKReal x382=((x375)*(x381));
																								IKReal x383=(r01)*(r01);
																								IKReal x384=((x376)*(x383));
																								IKReal x385=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
																								IKReal x386=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
																								IKReal x387=((x386)+(x384)+(x385)+(x382)+(x380)+(x378));
																								j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x387) != 0)?((IKReal)1/(x387)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((((IKabs(x387) != 0)?((IKReal)1/(x387)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
																								sj3array[0]=IKsin(j3array[0]);
																								cj3array[0]=IKcos(j3array[0]);
																								if( j3array[0] > IKPI )
																								{
																									j3array[0]-=IK2PI;
																								}
																								else if( j3array[0] < -IKPI )
																								{
																									j3array[0]+=IK2PI;
																								}
																								j3valid[0] = true;
																								for(int ij3 = 0; ij3 < 1; ++ij3)
																								{
																									if( !j3valid[ij3] )
																									{
																										continue;
																									}
																									j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																									{
																										IKReal dummyeval[1];
																										IKReal gconst25;
																										gconst25=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																										dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											continue;

																										} else
																										{
																											{
																												IKReal j4array[1], cj4array[1], sj4array[1];
																												bool j4valid[1]={false};
																												j4array[0]=IKatan2(((gconst25)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst25)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																												sj4array[0]=IKsin(j4array[0]);
																												cj4array[0]=IKcos(j4array[0]);
																												if( j4array[0] > IKPI )
																												{
																													j4array[0]-=IK2PI;
																												}
																												else if( j4array[0] < -IKPI )
																												{
																													j4array[0]+=IK2PI;
																												}
																												j4valid[0] = true;
																												for(int ij4 = 0; ij4 < 1; ++ij4)
																												{
																													if( !j4valid[ij4] )
																													{
																														continue;
																													}
																													j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j3;
																														solution.basesol[1].foffset = j4;
																														solution.basesol[2].foffset = j5;
																														solution.basesol[3].foffset = j6;
																														solution.basesol[4].foffset = j7;
																														solution.basesol[5].foffset = j8;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}
																								}
																							}

																						}

																					}

																				} else
																				{
																					{
																						IKReal j4array[1], cj4array[1], sj4array[1];
																						bool j4valid[1]={false};
																						j4array[0]=IKatan2(((gconst24)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst24)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																						sj4array[0]=IKsin(j4array[0]);
																						cj4array[0]=IKcos(j4array[0]);
																						if( j4array[0] > IKPI )
																						{
																							j4array[0]-=IK2PI;
																						}
																						else if( j4array[0] < -IKPI )
																						{
																							j4array[0]+=IK2PI;
																						}
																						j4valid[0] = true;
																						for(int ij4 = 0; ij4 < 1; ++ij4)
																						{
																							if( !j4valid[ij4] )
																							{
																								continue;
																							}
																							j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																							{
																								IKReal dummyeval[1];
																								IKReal gconst26;
																								IKReal x388=(cj8)*(cj8);
																								IKReal x389=(sj8)*(sj8);
																								gconst26=IKsign(((((-1.00000000000000)*(cj7)*(r00)*(r01)*(x389)))+(((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r02)*(sj7)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x389)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((cj7)*(r00)*(r01)*(x388)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((cj7)*(r10)*(r11)*(x388)))));
																								IKReal x390=(cj8)*(cj8);
																								IKReal x391=(sj8)*(sj8);
																								dummyeval[0]=((((cj7)*(r00)*(r01)*(x390)))+(((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r10)*(r11)*(x390)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x391)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x391))));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									{
																										IKReal dummyeval[1];
																										IKReal x392=(sj8)*(sj8);
																										IKReal x393=(cj8)*(cj8);
																										dummyeval[0]=((((-1.00000000000000)*(x393)*((r11)*(r11))))+(((-1.00000000000000)*(x392)*((r00)*(r00))))+(((-1.00000000000000)*(x393)*((r01)*(r01))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x392)*((r10)*(r10))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											{
																												IKReal dummyeval[1];
																												IKReal x394=(sj8)*(sj8);
																												IKReal x395=(cj8)*(cj8);
																												dummyeval[0]=((((r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x395)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x394)))+(((cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj8)*(r02)*(r11)*(sj7)))+(((cj7)*(r01)*(r10)*(x394)))+(((cj7)*(r01)*(r10)*(x395)))+(((-1.00000000000000)*(r02)*(r10)*(sj7)*(sj8))));
																												if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																												{
																													continue;

																												} else
																												{
																													{
																														IKReal j3array[1], cj3array[1], sj3array[1];
																														bool j3valid[1]={false};
																														IKReal x396=(sj8)*(sj8);
																														IKReal x397=(cj8)*(cj8);
																														IKReal x398=((cj7)*(r00)*(r11)*(x396));
																														IKReal x399=((cj7)*(r00)*(r11)*(x397));
																														IKReal x400=((cj8)*(r02)*(r11)*(sj7));
																														IKReal x401=((r02)*(r10)*(sj7)*(sj8));
																														IKReal x402=((x399)+(x398)+(x401)+(x400));
																														IKReal x403=((cj7)*(r01)*(r10)*(x396));
																														IKReal x404=((cj7)*(r01)*(r10)*(x397));
																														IKReal x405=((r00)*(r12)*(sj7)*(sj8));
																														IKReal x406=((cj8)*(r01)*(r12)*(sj7));
																														IKReal x407=((x403)+(x405)+(x404)+(x406));
																														j3array[0]=IKatan2(((((IKabs(((x407)+(((-1.00000000000000)*(x402))))) != 0)?((IKReal)1/(((x407)+(((-1.00000000000000)*(x402)))))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((x402)+(((-1.00000000000000)*(x407))))) != 0)?((IKReal)1/(((x402)+(((-1.00000000000000)*(x407)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
																														sj3array[0]=IKsin(j3array[0]);
																														cj3array[0]=IKcos(j3array[0]);
																														if( j3array[0] > IKPI )
																														{
																															j3array[0]-=IK2PI;
																														}
																														else if( j3array[0] < -IKPI )
																														{
																															j3array[0]+=IK2PI;
																														}
																														j3valid[0] = true;
																														for(int ij3 = 0; ij3 < 1; ++ij3)
																														{
																															if( !j3valid[ij3] )
																															{
																																continue;
																															}
																															j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																															{
																																vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																solution.basesol.resize(6);
																																solution.basesol[0].foffset = j3;
																																solution.basesol[1].foffset = j4;
																																solution.basesol[2].foffset = j5;
																																solution.basesol[3].foffset = j6;
																																solution.basesol[4].foffset = j7;
																																solution.basesol[5].foffset = j8;
																																solution.vfree.resize(0);
																															}
																														}
																													}

																												}

																											}

																										} else
																										{
																											{
																												IKReal j3array[1], cj3array[1], sj3array[1];
																												bool j3valid[1]={false};
																												IKReal x408=(sj8)*(sj8);
																												IKReal x409=(cj8)*(cj8);
																												IKReal x410=(r11)*(r11);
																												IKReal x411=((x409)*(x410));
																												IKReal x412=(r00)*(r00);
																												IKReal x413=((x408)*(x412));
																												IKReal x414=(r10)*(r10);
																												IKReal x415=((x408)*(x414));
																												IKReal x416=(r01)*(r01);
																												IKReal x417=((x409)*(x416));
																												IKReal x418=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
																												IKReal x419=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
																												IKReal x420=((x413)+(x411)+(x417)+(x415)+(x418)+(x419));
																												j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x420) != 0)?((IKReal)1/(x420)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((((IKabs(x420) != 0)?((IKReal)1/(x420)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
																												sj3array[0]=IKsin(j3array[0]);
																												cj3array[0]=IKcos(j3array[0]);
																												if( j3array[0] > IKPI )
																												{
																													j3array[0]-=IK2PI;
																												}
																												else if( j3array[0] < -IKPI )
																												{
																													j3array[0]+=IK2PI;
																												}
																												j3valid[0] = true;
																												for(int ij3 = 0; ij3 < 1; ++ij3)
																												{
																													if( !j3valid[ij3] )
																													{
																														continue;
																													}
																													j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j3;
																														solution.basesol[1].foffset = j4;
																														solution.basesol[2].foffset = j5;
																														solution.basesol[3].foffset = j6;
																														solution.basesol[4].foffset = j7;
																														solution.basesol[5].foffset = j8;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}

																								} else
																								{
																									{
																										IKReal j3array[1], cj3array[1], sj3array[1];
																										bool j3valid[1]={false};
																										j3array[0]=IKatan2(((gconst26)*(((((r02)*(sj7)))+(((-1.00000000000000)*(cj4)*(cj8)*(r11)*(sj5)))+(((cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj4)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj4)*(r10)*(sj5)*(sj8)))))), ((gconst26)*(((((-1.00000000000000)*(cj5)*(cj8)*(r01)*(sj4)))+(((cj7)*(r11)*(sj8)))+(((-1.00000000000000)*(cj4)*(cj8)*(r01)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj4)*(r00)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r12)*(sj7)))))));
																										sj3array[0]=IKsin(j3array[0]);
																										cj3array[0]=IKcos(j3array[0]);
																										if( j3array[0] > IKPI )
																										{
																											j3array[0]-=IK2PI;
																										}
																										else if( j3array[0] < -IKPI )
																										{
																											j3array[0]+=IK2PI;
																										}
																										j3valid[0] = true;
																										for(int ij3 = 0; ij3 < 1; ++ij3)
																										{
																											if( !j3valid[ij3] )
																											{
																												continue;
																											}
																											j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																											{
																												vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																												solution.basesol.resize(6);
																												solution.basesol[0].foffset = j3;
																												solution.basesol[1].foffset = j4;
																												solution.basesol[2].foffset = j5;
																												solution.basesol[3].foffset = j6;
																												solution.basesol[4].foffset = j7;
																												solution.basesol[5].foffset = j8;
																												solution.vfree.resize(0);
																											}
																										}
																									}

																								}

																							}
																						}
																					}

																				}

																			}
																		}
																	}

																} else
																{
																	if( 1 )
																	{
																		continue;

																	} else
																	{
																	}
																}
															}
														}
													}
												}

											} else
											{
												{
													IKReal j5array[1], cj5array[1], sj5array[1];
													bool j5valid[1]={false};
													j5array[0]=IKatan2(((((IKabs(cj6) != 0)?((IKReal)1/(cj6)):(IKReal)1.0e30))*(((((-4.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.120000000000000)*(cj6)))+(((0.380000000000000)*(sj6)))+(((4.00000000000000)*(cj7)*(npz)))+(((0.360000000000000)*(sj7)))+(((4.00000000000000)*(npy)*(sj7)*(sj8)))))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
													sj5array[0]=IKsin(j5array[0]);
													cj5array[0]=IKcos(j5array[0]);
													if( j5array[0] > IKPI )
													{
														j5array[0]-=IK2PI;
													}
													else if( j5array[0] < -IKPI )
													{
														j5array[0]+=IK2PI;
													}
													j5valid[0] = true;
													for(int ij5 = 0; ij5 < 1; ++ij5)
													{
														if( !j5valid[ij5] )
														{
															continue;
														}
														j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

														{
															IKReal dummyeval[1];
															IKReal gconst2;
															gconst2=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
															dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
															{
																{
																	IKReal dummyeval[1];
																	IKReal gconst1;
																	IKReal x421=(sj8)*(sj8);
																	IKReal x422=(cj8)*(cj8);
																	gconst1=IKsign(((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((r01)*(r10)*(sj7)*(x421)))+(((r01)*(r10)*(sj7)*(x422)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x422)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x421)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))));
																	IKReal x423=(sj8)*(sj8);
																	IKReal x424=(cj8)*(cj8);
																	dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((r01)*(r10)*(sj7)*(x424)))+(((r01)*(r10)*(sj7)*(x423)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x424)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x423)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8))));
																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																	{
																		{
																			IKReal dummyeval[1];
																			IKReal x425=(sj8)*(sj8);
																			IKReal x426=(cj8)*(cj8);
																			dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x425)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x426)))+(((cj7)*(r00)*(r11)*(x426)))+(((cj7)*(r00)*(r11)*(x425)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj8)*(r02)*(r11)*(sj7)))+(((r02)*(r10)*(sj7)*(sj8))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				{
																					IKReal evalcond[5];
																					evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
																					evalcond[1]=((0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																					evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
																					evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																					evalcond[4]=((0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
																					if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									IKReal x427=(sj8)*(sj8);
																									IKReal x428=(cj8)*(cj8);
																									dummyeval[0]=((((x427)*((r10)*(r10))))+(((x427)*((r00)*(r00))))+(((x428)*((r11)*(r11))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((x428)*((r01)*(r01))))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											IKReal x429=(sj8)*(sj8);
																											IKReal x430=(cj8)*(cj8);
																											dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x429)))+(((cj7)*(r00)*(r11)*(x429)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x430)))+(((cj7)*(r00)*(r11)*(x430)))+(((cj8)*(r02)*(r11)*(sj7)))+(((r02)*(r10)*(sj7)*(sj8))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												continue;

																											} else
																											{
																												{
																													IKReal j3array[1], cj3array[1], sj3array[1];
																													bool j3valid[1]={false};
																													IKReal x431=(sj8)*(sj8);
																													IKReal x432=(cj8)*(cj8);
																													IKReal x433=((cj7)*(r01)*(r10)*(x431));
																													IKReal x434=((cj7)*(r01)*(r10)*(x432));
																													IKReal x435=((r00)*(r12)*(sj7)*(sj8));
																													IKReal x436=((cj8)*(r01)*(r12)*(sj7));
																													IKReal x437=((x433)+(x434)+(x435)+(x436));
																													IKReal x438=((cj7)*(r00)*(r11)*(x431));
																													IKReal x439=((cj7)*(r00)*(r11)*(x432));
																													IKReal x440=((cj8)*(r02)*(r11)*(sj7));
																													IKReal x441=((r02)*(r10)*(sj7)*(sj8));
																													IKReal x442=((x438)+(x439)+(x441)+(x440));
																													j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x437)))+(x442))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x437)))+(x442)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x442)))+(x437))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x442)))+(x437)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
																													sj3array[0]=IKsin(j3array[0]);
																													cj3array[0]=IKcos(j3array[0]);
																													if( j3array[0] > IKPI )
																													{
																														j3array[0]-=IK2PI;
																													}
																													else if( j3array[0] < -IKPI )
																													{
																														j3array[0]+=IK2PI;
																													}
																													j3valid[0] = true;
																													for(int ij3 = 0; ij3 < 1; ++ij3)
																													{
																														if( !j3valid[ij3] )
																														{
																															continue;
																														}
																														j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																														{
																															IKReal dummyeval[1];
																															IKReal gconst7;
																															gconst7=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																															dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																															{
																																{
																																	IKReal dummyeval[1];
																																	dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																																	{
																																		{
																																			IKReal dummyeval[1];
																																			dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																																			{
																																				continue;

																																			} else
																																			{
																																				{
																																					IKReal j4array[1], cj4array[1], sj4array[1];
																																					bool j4valid[1]={false};
																																					IKReal x443=(cj5)*(cj5);
																																					IKReal x444=(sj5)*(sj5);
																																					IKReal x445=((x444)+(x443));
																																					j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x445) != 0)?((IKReal)1/(x445)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x445) != 0)?((IKReal)1/(x445)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																																					sj4array[0]=IKsin(j4array[0]);
																																					cj4array[0]=IKcos(j4array[0]);
																																					if( j4array[0] > IKPI )
																																					{
																																						j4array[0]-=IK2PI;
																																					}
																																					else if( j4array[0] < -IKPI )
																																					{
																																						j4array[0]+=IK2PI;
																																					}
																																					j4valid[0] = true;
																																					for(int ij4 = 0; ij4 < 1; ++ij4)
																																					{
																																						if( !j4valid[ij4] )
																																						{
																																							continue;
																																						}
																																						j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																						{
																																							vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																							solution.basesol.resize(6);
																																							solution.basesol[0].foffset = j3;
																																							solution.basesol[1].foffset = j4;
																																							solution.basesol[2].foffset = j5;
																																							solution.basesol[3].foffset = j6;
																																							solution.basesol[4].foffset = j7;
																																							solution.basesol[5].foffset = j8;
																																							solution.vfree.resize(0);
																																						}
																																					}
																																				}

																																			}

																																		}

																																	} else
																																	{
																																		{
																																			IKReal j4array[1], cj4array[1], sj4array[1];
																																			bool j4valid[1]={false};
																																			IKReal x446=(cj5)*(cj5);
																																			IKReal x447=(sj5)*(sj5);
																																			IKReal x448=((x447)+(x446));
																																			j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x448) != 0)?((IKReal)1/(x448)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x448) != 0)?((IKReal)1/(x448)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																																			sj4array[0]=IKsin(j4array[0]);
																																			cj4array[0]=IKcos(j4array[0]);
																																			if( j4array[0] > IKPI )
																																			{
																																				j4array[0]-=IK2PI;
																																			}
																																			else if( j4array[0] < -IKPI )
																																			{
																																				j4array[0]+=IK2PI;
																																			}
																																			j4valid[0] = true;
																																			for(int ij4 = 0; ij4 < 1; ++ij4)
																																			{
																																				if( !j4valid[ij4] )
																																				{
																																					continue;
																																				}
																																				j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																				{
																																					vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																					solution.basesol.resize(6);
																																					solution.basesol[0].foffset = j3;
																																					solution.basesol[1].foffset = j4;
																																					solution.basesol[2].foffset = j5;
																																					solution.basesol[3].foffset = j6;
																																					solution.basesol[4].foffset = j7;
																																					solution.basesol[5].foffset = j8;
																																					solution.vfree.resize(0);
																																				}
																																			}
																																		}

																																	}

																																}

																															} else
																															{
																																{
																																	IKReal j4array[1], cj4array[1], sj4array[1];
																																	bool j4valid[1]={false};
																																	j4array[0]=IKatan2(((gconst7)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst7)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																																	sj4array[0]=IKsin(j4array[0]);
																																	cj4array[0]=IKcos(j4array[0]);
																																	if( j4array[0] > IKPI )
																																	{
																																		j4array[0]-=IK2PI;
																																	}
																																	else if( j4array[0] < -IKPI )
																																	{
																																		j4array[0]+=IK2PI;
																																	}
																																	j4valid[0] = true;
																																	for(int ij4 = 0; ij4 < 1; ++ij4)
																																	{
																																		if( !j4valid[ij4] )
																																		{
																																			continue;
																																		}
																																		j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																		{
																																			vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																			solution.basesol.resize(6);
																																			solution.basesol[0].foffset = j3;
																																			solution.basesol[1].foffset = j4;
																																			solution.basesol[2].foffset = j5;
																																			solution.basesol[3].foffset = j6;
																																			solution.basesol[4].foffset = j7;
																																			solution.basesol[5].foffset = j8;
																																			solution.vfree.resize(0);
																																		}
																																	}
																																}

																															}

																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j3array[1], cj3array[1], sj3array[1];
																											bool j3valid[1]={false};
																											IKReal x449=(sj8)*(sj8);
																											IKReal x450=(cj8)*(cj8);
																											IKReal x451=(r11)*(r11);
																											IKReal x452=((x450)*(x451));
																											IKReal x453=(r00)*(r00);
																											IKReal x454=((x449)*(x453));
																											IKReal x455=(r10)*(r10);
																											IKReal x456=((x449)*(x455));
																											IKReal x457=(r01)*(r01);
																											IKReal x458=((x450)*(x457));
																											IKReal x459=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
																											IKReal x460=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
																											IKReal x461=((x458)+(x459)+(x456)+(x454)+(x452)+(x460));
																											j3array[0]=IKatan2(((((IKabs(x461) != 0)?((IKReal)1/(x461)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((-1.00000000000000)*(((IKabs(x461) != 0)?((IKReal)1/(x461)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
																											sj3array[0]=IKsin(j3array[0]);
																											cj3array[0]=IKcos(j3array[0]);
																											if( j3array[0] > IKPI )
																											{
																												j3array[0]-=IK2PI;
																											}
																											else if( j3array[0] < -IKPI )
																											{
																												j3array[0]+=IK2PI;
																											}
																											j3valid[0] = true;
																											for(int ij3 = 0; ij3 < 1; ++ij3)
																											{
																												if( !j3valid[ij3] )
																												{
																													continue;
																												}
																												j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																												{
																													IKReal dummyeval[1];
																													IKReal gconst7;
																													gconst7=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																													dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														{
																															IKReal dummyeval[1];
																															dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																															{
																																{
																																	IKReal dummyeval[1];
																																	dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																																	{
																																		continue;

																																	} else
																																	{
																																		{
																																			IKReal j4array[1], cj4array[1], sj4array[1];
																																			bool j4valid[1]={false};
																																			IKReal x462=(cj5)*(cj5);
																																			IKReal x463=(sj5)*(sj5);
																																			IKReal x464=((x463)+(x462));
																																			j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x464) != 0)?((IKReal)1/(x464)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x464) != 0)?((IKReal)1/(x464)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																																			sj4array[0]=IKsin(j4array[0]);
																																			cj4array[0]=IKcos(j4array[0]);
																																			if( j4array[0] > IKPI )
																																			{
																																				j4array[0]-=IK2PI;
																																			}
																																			else if( j4array[0] < -IKPI )
																																			{
																																				j4array[0]+=IK2PI;
																																			}
																																			j4valid[0] = true;
																																			for(int ij4 = 0; ij4 < 1; ++ij4)
																																			{
																																				if( !j4valid[ij4] )
																																				{
																																					continue;
																																				}
																																				j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																				{
																																					vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																					solution.basesol.resize(6);
																																					solution.basesol[0].foffset = j3;
																																					solution.basesol[1].foffset = j4;
																																					solution.basesol[2].foffset = j5;
																																					solution.basesol[3].foffset = j6;
																																					solution.basesol[4].foffset = j7;
																																					solution.basesol[5].foffset = j8;
																																					solution.vfree.resize(0);
																																				}
																																			}
																																		}

																																	}

																																}

																															} else
																															{
																																{
																																	IKReal j4array[1], cj4array[1], sj4array[1];
																																	bool j4valid[1]={false};
																																	IKReal x465=(cj5)*(cj5);
																																	IKReal x466=(sj5)*(sj5);
																																	IKReal x467=((x466)+(x465));
																																	j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x467) != 0)?((IKReal)1/(x467)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x467) != 0)?((IKReal)1/(x467)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																																	sj4array[0]=IKsin(j4array[0]);
																																	cj4array[0]=IKcos(j4array[0]);
																																	if( j4array[0] > IKPI )
																																	{
																																		j4array[0]-=IK2PI;
																																	}
																																	else if( j4array[0] < -IKPI )
																																	{
																																		j4array[0]+=IK2PI;
																																	}
																																	j4valid[0] = true;
																																	for(int ij4 = 0; ij4 < 1; ++ij4)
																																	{
																																		if( !j4valid[ij4] )
																																		{
																																			continue;
																																		}
																																		j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																		{
																																			vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																			solution.basesol.resize(6);
																																			solution.basesol[0].foffset = j3;
																																			solution.basesol[1].foffset = j4;
																																			solution.basesol[2].foffset = j5;
																																			solution.basesol[3].foffset = j6;
																																			solution.basesol[4].foffset = j7;
																																			solution.basesol[5].foffset = j8;
																																			solution.vfree.resize(0);
																																		}
																																	}
																																}

																															}

																														}

																													} else
																													{
																														{
																															IKReal j4array[1], cj4array[1], sj4array[1];
																															bool j4valid[1]={false};
																															j4array[0]=IKatan2(((gconst7)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst7)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																															sj4array[0]=IKsin(j4array[0]);
																															cj4array[0]=IKcos(j4array[0]);
																															if( j4array[0] > IKPI )
																															{
																																j4array[0]-=IK2PI;
																															}
																															else if( j4array[0] < -IKPI )
																															{
																																j4array[0]+=IK2PI;
																															}
																															j4valid[0] = true;
																															for(int ij4 = 0; ij4 < 1; ++ij4)
																															{
																																if( !j4valid[ij4] )
																																{
																																	continue;
																																}
																																j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j3;
																																	solution.basesol[1].foffset = j4;
																																	solution.basesol[2].foffset = j5;
																																	solution.basesol[3].foffset = j6;
																																	solution.basesol[4].foffset = j7;
																																	solution.basesol[5].foffset = j8;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j4array[1], cj4array[1], sj4array[1];
																									bool j4valid[1]={false};
																									IKReal x468=(cj5)*(cj5);
																									IKReal x469=(sj5)*(sj5);
																									IKReal x470=((x469)+(x468));
																									j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x470) != 0)?((IKReal)1/(x470)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x470) != 0)?((IKReal)1/(x470)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																									sj4array[0]=IKsin(j4array[0]);
																									cj4array[0]=IKcos(j4array[0]);
																									if( j4array[0] > IKPI )
																									{
																										j4array[0]-=IK2PI;
																									}
																									else if( j4array[0] < -IKPI )
																									{
																										j4array[0]+=IK2PI;
																									}
																									j4valid[0] = true;
																									for(int ij4 = 0; ij4 < 1; ++ij4)
																									{
																										if( !j4valid[ij4] )
																										{
																											continue;
																										}
																										j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																										{
																											IKReal dummyeval[1];
																											IKReal gconst8;
																											IKReal x471=(cj8)*(cj8);
																											IKReal x472=(sj8)*(sj8);
																											gconst8=IKsign(((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x472)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj7)*(r10)*(r11)*(x471)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x472)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r00)*(r01)*(x471)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))));
																											IKReal x473=(cj8)*(cj8);
																											IKReal x474=(sj8)*(sj8);
																											dummyeval[0]=((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x474)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj7)*(r10)*(r11)*(x473)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x474)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r00)*(r01)*(x473)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												{
																													IKReal dummyeval[1];
																													IKReal x475=(sj8)*(sj8);
																													IKReal x476=(cj8)*(cj8);
																													dummyeval[0]=((((x475)*((r00)*(r00))))+(((x476)*((r11)*(r11))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((x476)*((r01)*(r01))))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((x475)*((r10)*(r10)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														{
																															IKReal dummyeval[1];
																															IKReal x477=(sj8)*(sj8);
																															IKReal x478=(cj8)*(cj8);
																															dummyeval[0]=((((-1.00000000000000)*(cj7)*(r01)*(r10)*(x477)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x478)))+(((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((cj7)*(r00)*(r11)*(x478)))+(((cj7)*(r00)*(r11)*(x477)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj8)*(r02)*(r11)*(sj7)))+(((r02)*(r10)*(sj7)*(sj8))));
																															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																															{
																																continue;

																															} else
																															{
																																{
																																	IKReal j3array[1], cj3array[1], sj3array[1];
																																	bool j3valid[1]={false};
																																	IKReal x479=(sj8)*(sj8);
																																	IKReal x480=(cj8)*(cj8);
																																	IKReal x481=((cj7)*(r01)*(r10)*(x479));
																																	IKReal x482=((cj7)*(r01)*(r10)*(x480));
																																	IKReal x483=((r00)*(r12)*(sj7)*(sj8));
																																	IKReal x484=((cj8)*(r01)*(r12)*(sj7));
																																	IKReal x485=((x481)+(x483)+(x482)+(x484));
																																	IKReal x486=((cj7)*(r00)*(r11)*(x479));
																																	IKReal x487=((cj7)*(r00)*(r11)*(x480));
																																	IKReal x488=((cj8)*(r02)*(r11)*(sj7));
																																	IKReal x489=((r02)*(r10)*(sj7)*(sj8));
																																	IKReal x490=((x489)+(x488)+(x487)+(x486));
																																	j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x485)))+(x490))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x485)))+(x490)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x490)))+(x485))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x490)))+(x485)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
																																	sj3array[0]=IKsin(j3array[0]);
																																	cj3array[0]=IKcos(j3array[0]);
																																	if( j3array[0] > IKPI )
																																	{
																																		j3array[0]-=IK2PI;
																																	}
																																	else if( j3array[0] < -IKPI )
																																	{
																																		j3array[0]+=IK2PI;
																																	}
																																	j3valid[0] = true;
																																	for(int ij3 = 0; ij3 < 1; ++ij3)
																																	{
																																		if( !j3valid[ij3] )
																																		{
																																			continue;
																																		}
																																		j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																																		{
																																			vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																			solution.basesol.resize(6);
																																			solution.basesol[0].foffset = j3;
																																			solution.basesol[1].foffset = j4;
																																			solution.basesol[2].foffset = j5;
																																			solution.basesol[3].foffset = j6;
																																			solution.basesol[4].foffset = j7;
																																			solution.basesol[5].foffset = j8;
																																			solution.vfree.resize(0);
																																		}
																																	}
																																}

																															}

																														}

																													} else
																													{
																														{
																															IKReal j3array[1], cj3array[1], sj3array[1];
																															bool j3valid[1]={false};
																															IKReal x491=(sj8)*(sj8);
																															IKReal x492=(cj8)*(cj8);
																															IKReal x493=(r11)*(r11);
																															IKReal x494=((x492)*(x493));
																															IKReal x495=(r00)*(r00);
																															IKReal x496=((x491)*(x495));
																															IKReal x497=(r10)*(r10);
																															IKReal x498=((x491)*(x497));
																															IKReal x499=(r01)*(r01);
																															IKReal x500=((x492)*(x499));
																															IKReal x501=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
																															IKReal x502=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
																															IKReal x503=((x498)+(x496)+(x494)+(x500)+(x501)+(x502));
																															j3array[0]=IKatan2(((((IKabs(x503) != 0)?((IKReal)1/(x503)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((-1.00000000000000)*(((IKabs(x503) != 0)?((IKReal)1/(x503)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
																															sj3array[0]=IKsin(j3array[0]);
																															cj3array[0]=IKcos(j3array[0]);
																															if( j3array[0] > IKPI )
																															{
																																j3array[0]-=IK2PI;
																															}
																															else if( j3array[0] < -IKPI )
																															{
																																j3array[0]+=IK2PI;
																															}
																															j3valid[0] = true;
																															for(int ij3 = 0; ij3 < 1; ++ij3)
																															{
																																if( !j3valid[ij3] )
																																{
																																	continue;
																																}
																																j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j3;
																																	solution.basesol[1].foffset = j4;
																																	solution.basesol[2].foffset = j5;
																																	solution.basesol[3].foffset = j6;
																																	solution.basesol[4].foffset = j7;
																																	solution.basesol[5].foffset = j8;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}

																											} else
																											{
																												{
																													IKReal j3array[1], cj3array[1], sj3array[1];
																													bool j3valid[1]={false};
																													j3array[0]=IKatan2(((gconst8)*(((((-1.00000000000000)*(cj4)*(cj8)*(r11)*(sj5)))+(((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj4)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))+(((-1.00000000000000)*(cj4)*(r10)*(sj5)*(sj8)))))), ((gconst8)*(((((-1.00000000000000)*(cj5)*(cj8)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj8)*(r01)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj4)*(r00)*(sj5)*(sj8)))+(((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))));
																													sj3array[0]=IKsin(j3array[0]);
																													cj3array[0]=IKcos(j3array[0]);
																													if( j3array[0] > IKPI )
																													{
																														j3array[0]-=IK2PI;
																													}
																													else if( j3array[0] < -IKPI )
																													{
																														j3array[0]+=IK2PI;
																													}
																													j3valid[0] = true;
																													for(int ij3 = 0; ij3 < 1; ++ij3)
																													{
																														if( !j3valid[ij3] )
																														{
																															continue;
																														}
																														j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j3;
																															solution.basesol[1].foffset = j4;
																															solution.basesol[2].foffset = j5;
																															solution.basesol[3].foffset = j6;
																															solution.basesol[4].foffset = j7;
																															solution.basesol[5].foffset = j8;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
																						evalcond[1]=((-0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																						evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
																						evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																						evalcond[4]=((-0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
																						if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
																						{
																							{
																								IKReal dummyeval[1];
																								IKReal gconst9;
																								gconst9=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																								dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									{
																										IKReal dummyeval[1];
																										IKReal x504=(sj8)*(sj8);
																										IKReal x505=(cj8)*(cj8);
																										dummyeval[0]=((((-1.00000000000000)*(x505)*((r01)*(r01))))+(((-1.00000000000000)*(x505)*((r11)*(r11))))+(((-1.00000000000000)*(x504)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x504)*((r10)*(r10))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											{
																												IKReal dummyeval[1];
																												IKReal x506=(sj8)*(sj8);
																												IKReal x507=(cj8)*(cj8);
																												dummyeval[0]=((((r00)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(r02)*(r10)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x507)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x506)))+(((cj7)*(r01)*(r10)*(x506)))+(((cj7)*(r01)*(r10)*(x507))));
																												if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																												{
																													continue;

																												} else
																												{
																													{
																														IKReal j3array[1], cj3array[1], sj3array[1];
																														bool j3valid[1]={false};
																														IKReal x508=(sj8)*(sj8);
																														IKReal x509=(cj8)*(cj8);
																														IKReal x510=((cj7)*(r00)*(r11)*(x508));
																														IKReal x511=((cj7)*(r00)*(r11)*(x509));
																														IKReal x512=((cj8)*(r02)*(r11)*(sj7));
																														IKReal x513=((r02)*(r10)*(sj7)*(sj8));
																														IKReal x514=((x513)+(x512)+(x511)+(x510));
																														IKReal x515=((cj7)*(r01)*(r10)*(x508));
																														IKReal x516=((cj7)*(r01)*(r10)*(x509));
																														IKReal x517=((r00)*(r12)*(sj7)*(sj8));
																														IKReal x518=((cj8)*(r01)*(r12)*(sj7));
																														IKReal x519=((x518)+(x517)+(x516)+(x515));
																														j3array[0]=IKatan2(((((IKabs(((x519)+(((-1.00000000000000)*(x514))))) != 0)?((IKReal)1/(((x519)+(((-1.00000000000000)*(x514)))))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((x514)+(((-1.00000000000000)*(x519))))) != 0)?((IKReal)1/(((x514)+(((-1.00000000000000)*(x519)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
																														sj3array[0]=IKsin(j3array[0]);
																														cj3array[0]=IKcos(j3array[0]);
																														if( j3array[0] > IKPI )
																														{
																															j3array[0]-=IK2PI;
																														}
																														else if( j3array[0] < -IKPI )
																														{
																															j3array[0]+=IK2PI;
																														}
																														j3valid[0] = true;
																														for(int ij3 = 0; ij3 < 1; ++ij3)
																														{
																															if( !j3valid[ij3] )
																															{
																																continue;
																															}
																															j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																															{
																																IKReal dummyeval[1];
																																IKReal gconst10;
																																gconst10=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																																dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																																if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																																{
																																	continue;

																																} else
																																{
																																	{
																																		IKReal j4array[1], cj4array[1], sj4array[1];
																																		bool j4valid[1]={false};
																																		j4array[0]=IKatan2(((gconst10)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst10)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																																		sj4array[0]=IKsin(j4array[0]);
																																		cj4array[0]=IKcos(j4array[0]);
																																		if( j4array[0] > IKPI )
																																		{
																																			j4array[0]-=IK2PI;
																																		}
																																		else if( j4array[0] < -IKPI )
																																		{
																																			j4array[0]+=IK2PI;
																																		}
																																		j4valid[0] = true;
																																		for(int ij4 = 0; ij4 < 1; ++ij4)
																																		{
																																			if( !j4valid[ij4] )
																																			{
																																				continue;
																																			}
																																			j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																			{
																																				vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																				solution.basesol.resize(6);
																																				solution.basesol[0].foffset = j3;
																																				solution.basesol[1].foffset = j4;
																																				solution.basesol[2].foffset = j5;
																																				solution.basesol[3].foffset = j6;
																																				solution.basesol[4].foffset = j7;
																																				solution.basesol[5].foffset = j8;
																																				solution.vfree.resize(0);
																																			}
																																		}
																																	}

																																}

																															}
																														}
																													}

																												}

																											}

																										} else
																										{
																											{
																												IKReal j3array[1], cj3array[1], sj3array[1];
																												bool j3valid[1]={false};
																												IKReal x520=(sj8)*(sj8);
																												IKReal x521=(cj8)*(cj8);
																												IKReal x522=(r11)*(r11);
																												IKReal x523=((x521)*(x522));
																												IKReal x524=(r00)*(r00);
																												IKReal x525=((x520)*(x524));
																												IKReal x526=(r10)*(r10);
																												IKReal x527=((x520)*(x526));
																												IKReal x528=(r01)*(r01);
																												IKReal x529=((x521)*(x528));
																												IKReal x530=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
																												IKReal x531=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
																												IKReal x532=((x531)+(x530)+(x523)+(x527)+(x525)+(x529));
																												j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x532) != 0)?((IKReal)1/(x532)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((((IKabs(x532) != 0)?((IKReal)1/(x532)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
																												sj3array[0]=IKsin(j3array[0]);
																												cj3array[0]=IKcos(j3array[0]);
																												if( j3array[0] > IKPI )
																												{
																													j3array[0]-=IK2PI;
																												}
																												else if( j3array[0] < -IKPI )
																												{
																													j3array[0]+=IK2PI;
																												}
																												j3valid[0] = true;
																												for(int ij3 = 0; ij3 < 1; ++ij3)
																												{
																													if( !j3valid[ij3] )
																													{
																														continue;
																													}
																													j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																													{
																														IKReal dummyeval[1];
																														IKReal gconst10;
																														gconst10=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																														dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																														if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																														{
																															continue;

																														} else
																														{
																															{
																																IKReal j4array[1], cj4array[1], sj4array[1];
																																bool j4valid[1]={false};
																																j4array[0]=IKatan2(((gconst10)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst10)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																																sj4array[0]=IKsin(j4array[0]);
																																cj4array[0]=IKcos(j4array[0]);
																																if( j4array[0] > IKPI )
																																{
																																	j4array[0]-=IK2PI;
																																}
																																else if( j4array[0] < -IKPI )
																																{
																																	j4array[0]+=IK2PI;
																																}
																																j4valid[0] = true;
																																for(int ij4 = 0; ij4 < 1; ++ij4)
																																{
																																	if( !j4valid[ij4] )
																																	{
																																		continue;
																																	}
																																	j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																	{
																																		vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																		solution.basesol.resize(6);
																																		solution.basesol[0].foffset = j3;
																																		solution.basesol[1].foffset = j4;
																																		solution.basesol[2].foffset = j5;
																																		solution.basesol[3].foffset = j6;
																																		solution.basesol[4].foffset = j7;
																																		solution.basesol[5].foffset = j8;
																																		solution.vfree.resize(0);
																																	}
																																}
																															}

																														}

																													}
																												}
																											}

																										}

																									}

																								} else
																								{
																									{
																										IKReal j4array[1], cj4array[1], sj4array[1];
																										bool j4valid[1]={false};
																										j4array[0]=IKatan2(((gconst9)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst9)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																										sj4array[0]=IKsin(j4array[0]);
																										cj4array[0]=IKcos(j4array[0]);
																										if( j4array[0] > IKPI )
																										{
																											j4array[0]-=IK2PI;
																										}
																										else if( j4array[0] < -IKPI )
																										{
																											j4array[0]+=IK2PI;
																										}
																										j4valid[0] = true;
																										for(int ij4 = 0; ij4 < 1; ++ij4)
																										{
																											if( !j4valid[ij4] )
																											{
																												continue;
																											}
																											j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																											{
																												IKReal dummyeval[1];
																												IKReal gconst11;
																												IKReal x533=(cj8)*(cj8);
																												IKReal x534=(sj8)*(sj8);
																												gconst11=IKsign(((((-1.00000000000000)*(cj7)*(r10)*(r11)*(x534)))+(((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r00)*(r01)*(x533)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(r10)*(r11)*(x533)))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x534)))));
																												IKReal x535=(cj8)*(cj8);
																												IKReal x536=(sj8)*(sj8);
																												dummyeval[0]=((((-1.00000000000000)*(cj7)*(r10)*(r11)*(x536)))+(((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r00)*(r01)*(x535)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(r10)*(r11)*(x535)))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x536))));
																												if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																												{
																													{
																														IKReal dummyeval[1];
																														IKReal x537=(sj8)*(sj8);
																														IKReal x538=(cj8)*(cj8);
																														dummyeval[0]=((((-1.00000000000000)*(x538)*((r11)*(r11))))+(((-1.00000000000000)*(x538)*((r01)*(r01))))+(((-1.00000000000000)*(x537)*((r10)*(r10))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x537)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
																														if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																														{
																															{
																																IKReal dummyeval[1];
																																IKReal x539=(sj8)*(sj8);
																																IKReal x540=(cj8)*(cj8);
																																dummyeval[0]=((((-1.00000000000000)*(cj7)*(r00)*(r11)*(x539)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x540)))+(((r00)*(r12)*(sj7)*(sj8)))+(((cj7)*(r01)*(r10)*(x540)))+(((cj8)*(r01)*(r12)*(sj7)))+(((cj7)*(r01)*(r10)*(x539)))+(((-1.00000000000000)*(cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(r02)*(r10)*(sj7)*(sj8))));
																																if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																																{
																																	continue;

																																} else
																																{
																																	{
																																		IKReal j3array[1], cj3array[1], sj3array[1];
																																		bool j3valid[1]={false};
																																		IKReal x541=(sj8)*(sj8);
																																		IKReal x542=(cj8)*(cj8);
																																		IKReal x543=((cj7)*(r00)*(r11)*(x541));
																																		IKReal x544=((cj7)*(r00)*(r11)*(x542));
																																		IKReal x545=((cj8)*(r02)*(r11)*(sj7));
																																		IKReal x546=((r02)*(r10)*(sj7)*(sj8));
																																		IKReal x547=((x544)+(x545)+(x546)+(x543));
																																		IKReal x548=((cj7)*(r01)*(r10)*(x541));
																																		IKReal x549=((cj7)*(r01)*(r10)*(x542));
																																		IKReal x550=((r00)*(r12)*(sj7)*(sj8));
																																		IKReal x551=((cj8)*(r01)*(r12)*(sj7));
																																		IKReal x552=((x551)+(x550)+(x548)+(x549));
																																		j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x547)))+(x552))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x547)))+(x552)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x552)))+(x547))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x552)))+(x547)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
																																		sj3array[0]=IKsin(j3array[0]);
																																		cj3array[0]=IKcos(j3array[0]);
																																		if( j3array[0] > IKPI )
																																		{
																																			j3array[0]-=IK2PI;
																																		}
																																		else if( j3array[0] < -IKPI )
																																		{
																																			j3array[0]+=IK2PI;
																																		}
																																		j3valid[0] = true;
																																		for(int ij3 = 0; ij3 < 1; ++ij3)
																																		{
																																			if( !j3valid[ij3] )
																																			{
																																				continue;
																																			}
																																			j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																																			{
																																				vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																				solution.basesol.resize(6);
																																				solution.basesol[0].foffset = j3;
																																				solution.basesol[1].foffset = j4;
																																				solution.basesol[2].foffset = j5;
																																				solution.basesol[3].foffset = j6;
																																				solution.basesol[4].foffset = j7;
																																				solution.basesol[5].foffset = j8;
																																				solution.vfree.resize(0);
																																			}
																																		}
																																	}

																																}

																															}

																														} else
																														{
																															{
																																IKReal j3array[1], cj3array[1], sj3array[1];
																																bool j3valid[1]={false};
																																IKReal x553=(sj8)*(sj8);
																																IKReal x554=(cj8)*(cj8);
																																IKReal x555=(r11)*(r11);
																																IKReal x556=((x554)*(x555));
																																IKReal x557=(r00)*(r00);
																																IKReal x558=((x553)*(x557));
																																IKReal x559=(r10)*(r10);
																																IKReal x560=((x553)*(x559));
																																IKReal x561=(r01)*(r01);
																																IKReal x562=((x554)*(x561));
																																IKReal x563=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
																																IKReal x564=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
																																IKReal x565=((x558)+(x556)+(x564)+(x562)+(x563)+(x560));
																																j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x565) != 0)?((IKReal)1/(x565)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((((IKabs(x565) != 0)?((IKReal)1/(x565)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
																																sj3array[0]=IKsin(j3array[0]);
																																cj3array[0]=IKcos(j3array[0]);
																																if( j3array[0] > IKPI )
																																{
																																	j3array[0]-=IK2PI;
																																}
																																else if( j3array[0] < -IKPI )
																																{
																																	j3array[0]+=IK2PI;
																																}
																																j3valid[0] = true;
																																for(int ij3 = 0; ij3 < 1; ++ij3)
																																{
																																	if( !j3valid[ij3] )
																																	{
																																		continue;
																																	}
																																	j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																																	{
																																		vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																		solution.basesol.resize(6);
																																		solution.basesol[0].foffset = j3;
																																		solution.basesol[1].foffset = j4;
																																		solution.basesol[2].foffset = j5;
																																		solution.basesol[3].foffset = j6;
																																		solution.basesol[4].foffset = j7;
																																		solution.basesol[5].foffset = j8;
																																		solution.vfree.resize(0);
																																	}
																																}
																															}

																														}

																													}

																												} else
																												{
																													{
																														IKReal j3array[1], cj3array[1], sj3array[1];
																														bool j3valid[1]={false};
																														j3array[0]=IKatan2(((gconst11)*(((((r02)*(sj7)))+(((-1.00000000000000)*(cj4)*(cj8)*(r11)*(sj5)))+(((cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj4)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj4)*(r10)*(sj5)*(sj8)))))), ((gconst11)*(((((-1.00000000000000)*(cj5)*(cj8)*(r01)*(sj4)))+(((cj7)*(r11)*(sj8)))+(((-1.00000000000000)*(cj4)*(cj8)*(r01)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj4)*(r00)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r12)*(sj7)))))));
																														sj3array[0]=IKsin(j3array[0]);
																														cj3array[0]=IKcos(j3array[0]);
																														if( j3array[0] > IKPI )
																														{
																															j3array[0]-=IK2PI;
																														}
																														else if( j3array[0] < -IKPI )
																														{
																															j3array[0]+=IK2PI;
																														}
																														j3valid[0] = true;
																														for(int ij3 = 0; ij3 < 1; ++ij3)
																														{
																															if( !j3valid[ij3] )
																															{
																																continue;
																															}
																															j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																															{
																																vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																solution.basesol.resize(6);
																																solution.basesol[0].foffset = j3;
																																solution.basesol[1].foffset = j4;
																																solution.basesol[2].foffset = j5;
																																solution.basesol[3].foffset = j6;
																																solution.basesol[4].foffset = j7;
																																solution.basesol[5].foffset = j8;
																																solution.vfree.resize(0);
																															}
																														}
																													}

																												}

																											}
																										}
																									}

																								}

																							}

																						} else
																						{
																							if( 1 )
																							{
																								continue;

																							} else
																							{
																							}
																						}
																					}
																				}

																			} else
																			{
																				{
																					IKReal j3array[1], cj3array[1], sj3array[1];
																					bool j3valid[1]={false};
																					IKReal x566=(sj8)*(sj8);
																					IKReal x567=(cj8)*(cj8);
																					IKReal x568=((cj7)*(r01)*(r10)*(x566));
																					IKReal x569=((cj7)*(r01)*(r10)*(x567));
																					IKReal x570=((r00)*(r12)*(sj7)*(sj8));
																					IKReal x571=((cj8)*(r01)*(r12)*(sj7));
																					IKReal x572=((x571)+(x570)+(x568)+(x569));
																					IKReal x573=((cj7)*(r00)*(r11)*(x566));
																					IKReal x574=((cj7)*(r00)*(r11)*(x567));
																					IKReal x575=((cj8)*(r02)*(r11)*(sj7));
																					IKReal x576=((r02)*(r10)*(sj7)*(sj8));
																					IKReal x577=((x575)+(x574)+(x576)+(x573));
																					j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x572)))+(x577))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x572)))+(x577)))):(IKReal)1.0e30))*(((((cj6)*(r12)*(sj7)))+(((cj6)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj6)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x577)))+(x572))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x577)))+(x572)))):(IKReal)1.0e30))*(((((cj6)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj6)*(r02)*(sj7)))))));
																					sj3array[0]=IKsin(j3array[0]);
																					cj3array[0]=IKcos(j3array[0]);
																					if( j3array[0] > IKPI )
																					{
																						j3array[0]-=IK2PI;
																					}
																					else if( j3array[0] < -IKPI )
																					{
																						j3array[0]+=IK2PI;
																					}
																					j3valid[0] = true;
																					for(int ij3 = 0; ij3 < 1; ++ij3)
																					{
																						if( !j3valid[ij3] )
																						{
																							continue;
																						}
																						j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																						{
																							IKReal dummyeval[1];
																							IKReal gconst3;
																							gconst3=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
																							dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal evalcond[9];
																									evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
																									evalcond[1]=((0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																									evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
																									evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																									evalcond[4]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																									evalcond[5]=((0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
																									evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																									evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																									evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																									if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											IKReal gconst4;
																											gconst4=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																											dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												{
																													IKReal dummyeval[1];
																													dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														{
																															IKReal dummyeval[1];
																															dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																															{
																																continue;

																															} else
																															{
																																{
																																	IKReal j4array[1], cj4array[1], sj4array[1];
																																	bool j4valid[1]={false};
																																	IKReal x578=(cj5)*(cj5);
																																	IKReal x579=(sj5)*(sj5);
																																	IKReal x580=((x579)+(x578));
																																	j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x580) != 0)?((IKReal)1/(x580)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x580) != 0)?((IKReal)1/(x580)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																																	sj4array[0]=IKsin(j4array[0]);
																																	cj4array[0]=IKcos(j4array[0]);
																																	if( j4array[0] > IKPI )
																																	{
																																		j4array[0]-=IK2PI;
																																	}
																																	else if( j4array[0] < -IKPI )
																																	{
																																		j4array[0]+=IK2PI;
																																	}
																																	j4valid[0] = true;
																																	for(int ij4 = 0; ij4 < 1; ++ij4)
																																	{
																																		if( !j4valid[ij4] )
																																		{
																																			continue;
																																		}
																																		j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																		{
																																			vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																			solution.basesol.resize(6);
																																			solution.basesol[0].foffset = j3;
																																			solution.basesol[1].foffset = j4;
																																			solution.basesol[2].foffset = j5;
																																			solution.basesol[3].foffset = j6;
																																			solution.basesol[4].foffset = j7;
																																			solution.basesol[5].foffset = j8;
																																			solution.vfree.resize(0);
																																		}
																																	}
																																}

																															}

																														}

																													} else
																													{
																														{
																															IKReal j4array[1], cj4array[1], sj4array[1];
																															bool j4valid[1]={false};
																															IKReal x581=(cj5)*(cj5);
																															IKReal x582=(sj5)*(sj5);
																															IKReal x583=((x581)+(x582));
																															j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x583) != 0)?((IKReal)1/(x583)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x583) != 0)?((IKReal)1/(x583)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																															sj4array[0]=IKsin(j4array[0]);
																															cj4array[0]=IKcos(j4array[0]);
																															if( j4array[0] > IKPI )
																															{
																																j4array[0]-=IK2PI;
																															}
																															else if( j4array[0] < -IKPI )
																															{
																																j4array[0]+=IK2PI;
																															}
																															j4valid[0] = true;
																															for(int ij4 = 0; ij4 < 1; ++ij4)
																															{
																																if( !j4valid[ij4] )
																																{
																																	continue;
																																}
																																j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j3;
																																	solution.basesol[1].foffset = j4;
																																	solution.basesol[2].foffset = j5;
																																	solution.basesol[3].foffset = j6;
																																	solution.basesol[4].foffset = j7;
																																	solution.basesol[5].foffset = j8;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}

																											} else
																											{
																												{
																													IKReal j4array[1], cj4array[1], sj4array[1];
																													bool j4valid[1]={false};
																													j4array[0]=IKatan2(((gconst4)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst4)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																													sj4array[0]=IKsin(j4array[0]);
																													cj4array[0]=IKcos(j4array[0]);
																													if( j4array[0] > IKPI )
																													{
																														j4array[0]-=IK2PI;
																													}
																													else if( j4array[0] < -IKPI )
																													{
																														j4array[0]+=IK2PI;
																													}
																													j4valid[0] = true;
																													for(int ij4 = 0; ij4 < 1; ++ij4)
																													{
																														if( !j4valid[ij4] )
																														{
																															continue;
																														}
																														j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j3;
																															solution.basesol[1].foffset = j4;
																															solution.basesol[2].foffset = j5;
																															solution.basesol[3].foffset = j6;
																															solution.basesol[4].foffset = j7;
																															solution.basesol[5].foffset = j8;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
																										evalcond[1]=((-0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																										evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
																										evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																										evalcond[4]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																										evalcond[5]=((-0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
																										evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																										evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																										evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																										if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																										{
																											{
																												IKReal dummyeval[1];
																												IKReal gconst5;
																												gconst5=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																												dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																												if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																												{
																													continue;

																												} else
																												{
																													{
																														IKReal j4array[1], cj4array[1], sj4array[1];
																														bool j4valid[1]={false};
																														j4array[0]=IKatan2(((gconst5)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst5)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																														sj4array[0]=IKsin(j4array[0]);
																														cj4array[0]=IKcos(j4array[0]);
																														if( j4array[0] > IKPI )
																														{
																															j4array[0]-=IK2PI;
																														}
																														else if( j4array[0] < -IKPI )
																														{
																															j4array[0]+=IK2PI;
																														}
																														j4valid[0] = true;
																														for(int ij4 = 0; ij4 < 1; ++ij4)
																														{
																															if( !j4valid[ij4] )
																															{
																																continue;
																															}
																															j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																															{
																																vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																solution.basesol.resize(6);
																																solution.basesol[0].foffset = j3;
																																solution.basesol[1].foffset = j4;
																																solution.basesol[2].foffset = j5;
																																solution.basesol[3].foffset = j6;
																																solution.basesol[4].foffset = j7;
																																solution.basesol[5].foffset = j8;
																																solution.vfree.resize(0);
																															}
																														}
																													}

																												}

																											}

																										} else
																										{
																											if( 1 )
																											{
																												continue;

																											} else
																											{
																											}
																										}
																									}
																								}

																							} else
																							{
																								{
																									IKReal j4array[1], cj4array[1], sj4array[1];
																									bool j4valid[1]={false};
																									j4array[0]=IKatan2(((gconst3)*(((((cj5)*(r20)*(sj8)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj5)*(cj8)*(r21)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))))), ((gconst3)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))))));
																									sj4array[0]=IKsin(j4array[0]);
																									cj4array[0]=IKcos(j4array[0]);
																									if( j4array[0] > IKPI )
																									{
																										j4array[0]-=IK2PI;
																									}
																									else if( j4array[0] < -IKPI )
																									{
																										j4array[0]+=IK2PI;
																									}
																									j4valid[0] = true;
																									for(int ij4 = 0; ij4 < 1; ++ij4)
																									{
																										if( !j4valid[ij4] )
																										{
																											continue;
																										}
																										j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j3;
																											solution.basesol[1].foffset = j4;
																											solution.basesol[2].foffset = j5;
																											solution.basesol[3].foffset = j6;
																											solution.basesol[4].foffset = j7;
																											solution.basesol[5].foffset = j8;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}
																					}
																				}

																			}

																		}

																	} else
																	{
																		{
																			IKReal j3array[1], cj3array[1], sj3array[1];
																			bool j3valid[1]={false};
																			j3array[0]=IKatan2(((gconst1)*(((((cj6)*(r11)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj6)))+(((-1.00000000000000)*(r10)*(sj6)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r10)*(sj7)))+(((cj6)*(cj7)*(r12)))))), ((gconst1)*(((((cj6)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(r00)*(sj6)*(sj8)))+(((cj6)*(cj7)*(r02)))+(((-1.00000000000000)*(cj8)*(r01)*(sj6)))))));
																			sj3array[0]=IKsin(j3array[0]);
																			cj3array[0]=IKcos(j3array[0]);
																			if( j3array[0] > IKPI )
																			{
																				j3array[0]-=IK2PI;
																			}
																			else if( j3array[0] < -IKPI )
																			{
																				j3array[0]+=IK2PI;
																			}
																			j3valid[0] = true;
																			for(int ij3 = 0; ij3 < 1; ++ij3)
																			{
																				if( !j3valid[ij3] )
																				{
																					continue;
																				}
																				j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																				{
																					IKReal dummyeval[1];
																					IKReal gconst3;
																					gconst3=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
																					dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal evalcond[9];
																							evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
																							evalcond[1]=((0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																							evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
																							evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																							evalcond[4]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																							evalcond[5]=((0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
																							evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																							evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																							evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																							if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									IKReal gconst4;
																									gconst4=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																									dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												{
																													IKReal dummyeval[1];
																													dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														continue;

																													} else
																													{
																														{
																															IKReal j4array[1], cj4array[1], sj4array[1];
																															bool j4valid[1]={false};
																															IKReal x584=(cj5)*(cj5);
																															IKReal x585=(sj5)*(sj5);
																															IKReal x586=((x584)+(x585));
																															j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x586) != 0)?((IKReal)1/(x586)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x586) != 0)?((IKReal)1/(x586)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																															sj4array[0]=IKsin(j4array[0]);
																															cj4array[0]=IKcos(j4array[0]);
																															if( j4array[0] > IKPI )
																															{
																																j4array[0]-=IK2PI;
																															}
																															else if( j4array[0] < -IKPI )
																															{
																																j4array[0]+=IK2PI;
																															}
																															j4valid[0] = true;
																															for(int ij4 = 0; ij4 < 1; ++ij4)
																															{
																																if( !j4valid[ij4] )
																																{
																																	continue;
																																}
																																j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j3;
																																	solution.basesol[1].foffset = j4;
																																	solution.basesol[2].foffset = j5;
																																	solution.basesol[3].foffset = j6;
																																	solution.basesol[4].foffset = j7;
																																	solution.basesol[5].foffset = j8;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}

																											} else
																											{
																												{
																													IKReal j4array[1], cj4array[1], sj4array[1];
																													bool j4valid[1]={false};
																													IKReal x587=(cj5)*(cj5);
																													IKReal x588=(sj5)*(sj5);
																													IKReal x589=((x587)+(x588));
																													j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x589) != 0)?((IKReal)1/(x589)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x589) != 0)?((IKReal)1/(x589)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																													sj4array[0]=IKsin(j4array[0]);
																													cj4array[0]=IKcos(j4array[0]);
																													if( j4array[0] > IKPI )
																													{
																														j4array[0]-=IK2PI;
																													}
																													else if( j4array[0] < -IKPI )
																													{
																														j4array[0]+=IK2PI;
																													}
																													j4valid[0] = true;
																													for(int ij4 = 0; ij4 < 1; ++ij4)
																													{
																														if( !j4valid[ij4] )
																														{
																															continue;
																														}
																														j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j3;
																															solution.basesol[1].foffset = j4;
																															solution.basesol[2].foffset = j5;
																															solution.basesol[3].foffset = j6;
																															solution.basesol[4].foffset = j7;
																															solution.basesol[5].foffset = j8;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j4array[1], cj4array[1], sj4array[1];
																											bool j4valid[1]={false};
																											j4array[0]=IKatan2(((gconst4)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst4)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																											sj4array[0]=IKsin(j4array[0]);
																											cj4array[0]=IKcos(j4array[0]);
																											if( j4array[0] > IKPI )
																											{
																												j4array[0]-=IK2PI;
																											}
																											else if( j4array[0] < -IKPI )
																											{
																												j4array[0]+=IK2PI;
																											}
																											j4valid[0] = true;
																											for(int ij4 = 0; ij4 < 1; ++ij4)
																											{
																												if( !j4valid[ij4] )
																												{
																													continue;
																												}
																												j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j3;
																													solution.basesol[1].foffset = j4;
																													solution.basesol[2].foffset = j5;
																													solution.basesol[3].foffset = j6;
																													solution.basesol[4].foffset = j7;
																													solution.basesol[5].foffset = j8;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
																								evalcond[1]=((-0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																								evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
																								evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																								evalcond[4]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																								evalcond[5]=((-0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
																								evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																								evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																								evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																								if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																								{
																									{
																										IKReal dummyeval[1];
																										IKReal gconst5;
																										gconst5=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																										dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											continue;

																										} else
																										{
																											{
																												IKReal j4array[1], cj4array[1], sj4array[1];
																												bool j4valid[1]={false};
																												j4array[0]=IKatan2(((gconst5)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst5)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																												sj4array[0]=IKsin(j4array[0]);
																												cj4array[0]=IKcos(j4array[0]);
																												if( j4array[0] > IKPI )
																												{
																													j4array[0]-=IK2PI;
																												}
																												else if( j4array[0] < -IKPI )
																												{
																													j4array[0]+=IK2PI;
																												}
																												j4valid[0] = true;
																												for(int ij4 = 0; ij4 < 1; ++ij4)
																												{
																													if( !j4valid[ij4] )
																													{
																														continue;
																													}
																													j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j3;
																														solution.basesol[1].foffset = j4;
																														solution.basesol[2].foffset = j5;
																														solution.basesol[3].foffset = j6;
																														solution.basesol[4].foffset = j7;
																														solution.basesol[5].foffset = j8;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}

																								} else
																								{
																									if( 1 )
																									{
																										continue;

																									} else
																									{
																									}
																								}
																							}
																						}

																					} else
																					{
																						{
																							IKReal j4array[1], cj4array[1], sj4array[1];
																							bool j4valid[1]={false};
																							j4array[0]=IKatan2(((gconst3)*(((((cj5)*(r20)*(sj8)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj5)*(cj8)*(r21)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))))), ((gconst3)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))))));
																							sj4array[0]=IKsin(j4array[0]);
																							cj4array[0]=IKcos(j4array[0]);
																							if( j4array[0] > IKPI )
																							{
																								j4array[0]-=IK2PI;
																							}
																							else if( j4array[0] < -IKPI )
																							{
																								j4array[0]+=IK2PI;
																							}
																							j4valid[0] = true;
																							for(int ij4 = 0; ij4 < 1; ++ij4)
																							{
																								if( !j4valid[ij4] )
																								{
																									continue;
																								}
																								j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j3;
																									solution.basesol[1].foffset = j4;
																									solution.basesol[2].foffset = j5;
																									solution.basesol[3].foffset = j6;
																									solution.basesol[4].foffset = j7;
																									solution.basesol[5].foffset = j8;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}
																			}
																		}

																	}

																}

															} else
															{
																{
																	IKReal j4array[1], cj4array[1], sj4array[1];
																	bool j4valid[1]={false};
																	j4array[0]=IKatan2(((gconst2)*(((((cj5)*(r20)*(sj8)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj5)*(cj8)*(r21)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))))), ((gconst2)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))))));
																	sj4array[0]=IKsin(j4array[0]);
																	cj4array[0]=IKcos(j4array[0]);
																	if( j4array[0] > IKPI )
																	{
																		j4array[0]-=IK2PI;
																	}
																	else if( j4array[0] < -IKPI )
																	{
																		j4array[0]+=IK2PI;
																	}
																	j4valid[0] = true;
																	for(int ij4 = 0; ij4 < 1; ++ij4)
																	{
																		if( !j4valid[ij4] )
																		{
																			continue;
																		}
																		j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																		{
																			IKReal dummyeval[1];
																			IKReal gconst6;
																			IKReal x590=(sj8)*(sj8);
																			IKReal x591=(cj8)*(cj8);
																			gconst6=IKsign(((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x591)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x590)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x590)))+(((r01)*(r10)*(sj7)*(x591)))));
																			IKReal x592=(sj8)*(sj8);
																			IKReal x593=(cj8)*(cj8);
																			dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x593)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x592)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x592)))+(((r01)*(r10)*(sj7)*(x593))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				{
																					IKReal dummyeval[1];
																					IKReal x594=(sj8)*(sj8);
																					IKReal x595=(cj8)*(cj8);
																					dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj8)*(r02)*(r11)*(sj7)))+(((cj7)*(r00)*(r11)*(x595)))+(((cj7)*(r00)*(r11)*(x594)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x594)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x595)))+(((r02)*(r10)*(sj7)*(sj8))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						continue;

																					} else
																					{
																						{
																							IKReal j3array[1], cj3array[1], sj3array[1];
																							bool j3valid[1]={false};
																							IKReal x596=(sj8)*(sj8);
																							IKReal x597=(cj8)*(cj8);
																							IKReal x598=((cj7)*(r01)*(r10)*(x596));
																							IKReal x599=((cj7)*(r01)*(r10)*(x597));
																							IKReal x600=((r00)*(r12)*(sj7)*(sj8));
																							IKReal x601=((cj8)*(r01)*(r12)*(sj7));
																							IKReal x602=((x599)+(x598)+(x601)+(x600));
																							IKReal x603=((cj7)*(r00)*(r11)*(x596));
																							IKReal x604=((cj7)*(r00)*(r11)*(x597));
																							IKReal x605=((cj8)*(r02)*(r11)*(sj7));
																							IKReal x606=((r02)*(r10)*(sj7)*(sj8));
																							IKReal x607=((x603)+(x606)+(x605)+(x604));
																							j3array[0]=IKatan2(((((IKabs(((x607)+(((-1.00000000000000)*(x602))))) != 0)?((IKReal)1/(((x607)+(((-1.00000000000000)*(x602)))))):(IKReal)1.0e30))*(((((cj6)*(r12)*(sj7)))+(((cj6)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj6)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((x602)+(((-1.00000000000000)*(x607))))) != 0)?((IKReal)1/(((x602)+(((-1.00000000000000)*(x607)))))):(IKReal)1.0e30))*(((((cj6)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj6)*(r02)*(sj7)))))));
																							sj3array[0]=IKsin(j3array[0]);
																							cj3array[0]=IKcos(j3array[0]);
																							if( j3array[0] > IKPI )
																							{
																								j3array[0]-=IK2PI;
																							}
																							else if( j3array[0] < -IKPI )
																							{
																								j3array[0]+=IK2PI;
																							}
																							j3valid[0] = true;
																							for(int ij3 = 0; ij3 < 1; ++ij3)
																							{
																								if( !j3valid[ij3] )
																								{
																									continue;
																								}
																								j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j3;
																									solution.basesol[1].foffset = j4;
																									solution.basesol[2].foffset = j5;
																									solution.basesol[3].foffset = j6;
																									solution.basesol[4].foffset = j7;
																									solution.basesol[5].foffset = j8;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}

																			} else
																			{
																				{
																					IKReal j3array[1], cj3array[1], sj3array[1];
																					bool j3valid[1]={false};
																					j3array[0]=IKatan2(((gconst6)*(((((cj6)*(r11)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj6)))+(((-1.00000000000000)*(r10)*(sj6)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r10)*(sj7)))+(((cj6)*(cj7)*(r12)))))), ((gconst6)*(((((cj6)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(r00)*(sj6)*(sj8)))+(((cj6)*(cj7)*(r02)))+(((-1.00000000000000)*(cj8)*(r01)*(sj6)))))));
																					sj3array[0]=IKsin(j3array[0]);
																					cj3array[0]=IKcos(j3array[0]);
																					if( j3array[0] > IKPI )
																					{
																						j3array[0]-=IK2PI;
																					}
																					else if( j3array[0] < -IKPI )
																					{
																						j3array[0]+=IK2PI;
																					}
																					j3valid[0] = true;
																					for(int ij3 = 0; ij3 < 1; ++ij3)
																					{
																						if( !j3valid[ij3] )
																						{
																							continue;
																						}
																						j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																						{
																							vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																							solution.basesol.resize(6);
																							solution.basesol[0].foffset = j3;
																							solution.basesol[1].foffset = j4;
																							solution.basesol[2].foffset = j5;
																							solution.basesol[3].foffset = j6;
																							solution.basesol[4].foffset = j7;
																							solution.basesol[5].foffset = j8;
																							solution.vfree.resize(0);
																						}
																					}
																				}

																			}

																		}
																	}
																}

															}

														}
													}
												}

											}

										}

									} else
									{
										{
											IKReal j5array[1], cj5array[1], sj5array[1];
											bool j5valid[1]={false};
											j5array[0]=IKatan2(((((IKabs(sj6) != 0)?((IKReal)1/(sj6)):(IKReal)1.0e30))*(((((0.120000000000000)*(sj6)))+(((-0.380000000000000)*(cj6)))+(((-4.00000000000000)*(cj8)*(npy)))+(((-4.00000000000000)*(npx)*(sj8)))))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
											sj5array[0]=IKsin(j5array[0]);
											cj5array[0]=IKcos(j5array[0]);
											if( j5array[0] > IKPI )
											{
												j5array[0]-=IK2PI;
											}
											else if( j5array[0] < -IKPI )
											{
												j5array[0]+=IK2PI;
											}
											j5valid[0] = true;
											for(int ij5 = 0; ij5 < 1; ++ij5)
											{
												if( !j5valid[ij5] )
												{
													continue;
												}
												j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

												{
													IKReal dummyeval[1];
													IKReal gconst2;
													gconst2=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
													dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
													{
														{
															IKReal dummyeval[1];
															IKReal gconst1;
															IKReal x608=(sj8)*(sj8);
															IKReal x609=(cj8)*(cj8);
															gconst1=IKsign(((((r01)*(r10)*(sj7)*(x608)))+(((r01)*(r10)*(sj7)*(x609)))+(((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x609)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x608)))));
															IKReal x610=(sj8)*(sj8);
															IKReal x611=(cj8)*(cj8);
															dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x610)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x611)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x611)))+(((r01)*(r10)*(sj7)*(x610))));
															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
															{
																{
																	IKReal dummyeval[1];
																	IKReal x612=(sj8)*(sj8);
																	IKReal x613=(cj8)*(cj8);
																	dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj7)*(r00)*(r11)*(x612)))+(((cj7)*(r00)*(r11)*(x613)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x612)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x613)))+(((cj8)*(r02)*(r11)*(sj7)))+(((r02)*(r10)*(sj7)*(sj8))));
																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																	{
																		{
																			IKReal evalcond[5];
																			evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
																			evalcond[1]=((0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																			evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
																			evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																			evalcond[4]=((0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
																			if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
																			{
																				{
																					IKReal dummyeval[1];
																					dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							IKReal x614=(sj8)*(sj8);
																							IKReal x615=(cj8)*(cj8);
																							dummyeval[0]=((((x615)*((r01)*(r01))))+(((x614)*((r10)*(r10))))+(((x614)*((r00)*(r00))))+(((x615)*((r11)*(r11))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									IKReal x616=(sj8)*(sj8);
																									IKReal x617=(cj8)*(cj8);
																									dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj7)*(r00)*(r11)*(x616)))+(((cj7)*(r00)*(r11)*(x617)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x617)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x616)))+(((cj8)*(r02)*(r11)*(sj7)))+(((r02)*(r10)*(sj7)*(sj8))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										continue;

																									} else
																									{
																										{
																											IKReal j3array[1], cj3array[1], sj3array[1];
																											bool j3valid[1]={false};
																											IKReal x618=(sj8)*(sj8);
																											IKReal x619=(cj8)*(cj8);
																											IKReal x620=((cj7)*(r01)*(r10)*(x618));
																											IKReal x621=((cj7)*(r01)*(r10)*(x619));
																											IKReal x622=((r00)*(r12)*(sj7)*(sj8));
																											IKReal x623=((cj8)*(r01)*(r12)*(sj7));
																											IKReal x624=((x621)+(x620)+(x623)+(x622));
																											IKReal x625=((cj7)*(r00)*(r11)*(x618));
																											IKReal x626=((cj7)*(r00)*(r11)*(x619));
																											IKReal x627=((cj8)*(r02)*(r11)*(sj7));
																											IKReal x628=((r02)*(r10)*(sj7)*(sj8));
																											IKReal x629=((x625)+(x627)+(x626)+(x628));
																											j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x624)))+(x629))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x624)))+(x629)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x629)))+(x624))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x629)))+(x624)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
																											sj3array[0]=IKsin(j3array[0]);
																											cj3array[0]=IKcos(j3array[0]);
																											if( j3array[0] > IKPI )
																											{
																												j3array[0]-=IK2PI;
																											}
																											else if( j3array[0] < -IKPI )
																											{
																												j3array[0]+=IK2PI;
																											}
																											j3valid[0] = true;
																											for(int ij3 = 0; ij3 < 1; ++ij3)
																											{
																												if( !j3valid[ij3] )
																												{
																													continue;
																												}
																												j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																												{
																													IKReal dummyeval[1];
																													IKReal gconst7;
																													gconst7=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																													dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														{
																															IKReal dummyeval[1];
																															dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																															{
																																{
																																	IKReal dummyeval[1];
																																	dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																																	{
																																		continue;

																																	} else
																																	{
																																		{
																																			IKReal j4array[1], cj4array[1], sj4array[1];
																																			bool j4valid[1]={false};
																																			IKReal x630=(cj5)*(cj5);
																																			IKReal x631=(sj5)*(sj5);
																																			IKReal x632=((x630)+(x631));
																																			j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x632) != 0)?((IKReal)1/(x632)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x632) != 0)?((IKReal)1/(x632)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																																			sj4array[0]=IKsin(j4array[0]);
																																			cj4array[0]=IKcos(j4array[0]);
																																			if( j4array[0] > IKPI )
																																			{
																																				j4array[0]-=IK2PI;
																																			}
																																			else if( j4array[0] < -IKPI )
																																			{
																																				j4array[0]+=IK2PI;
																																			}
																																			j4valid[0] = true;
																																			for(int ij4 = 0; ij4 < 1; ++ij4)
																																			{
																																				if( !j4valid[ij4] )
																																				{
																																					continue;
																																				}
																																				j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																				{
																																					vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																					solution.basesol.resize(6);
																																					solution.basesol[0].foffset = j3;
																																					solution.basesol[1].foffset = j4;
																																					solution.basesol[2].foffset = j5;
																																					solution.basesol[3].foffset = j6;
																																					solution.basesol[4].foffset = j7;
																																					solution.basesol[5].foffset = j8;
																																					solution.vfree.resize(0);
																																				}
																																			}
																																		}

																																	}

																																}

																															} else
																															{
																																{
																																	IKReal j4array[1], cj4array[1], sj4array[1];
																																	bool j4valid[1]={false};
																																	IKReal x633=(cj5)*(cj5);
																																	IKReal x634=(sj5)*(sj5);
																																	IKReal x635=((x634)+(x633));
																																	j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x635) != 0)?((IKReal)1/(x635)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x635) != 0)?((IKReal)1/(x635)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																																	sj4array[0]=IKsin(j4array[0]);
																																	cj4array[0]=IKcos(j4array[0]);
																																	if( j4array[0] > IKPI )
																																	{
																																		j4array[0]-=IK2PI;
																																	}
																																	else if( j4array[0] < -IKPI )
																																	{
																																		j4array[0]+=IK2PI;
																																	}
																																	j4valid[0] = true;
																																	for(int ij4 = 0; ij4 < 1; ++ij4)
																																	{
																																		if( !j4valid[ij4] )
																																		{
																																			continue;
																																		}
																																		j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																		{
																																			vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																			solution.basesol.resize(6);
																																			solution.basesol[0].foffset = j3;
																																			solution.basesol[1].foffset = j4;
																																			solution.basesol[2].foffset = j5;
																																			solution.basesol[3].foffset = j6;
																																			solution.basesol[4].foffset = j7;
																																			solution.basesol[5].foffset = j8;
																																			solution.vfree.resize(0);
																																		}
																																	}
																																}

																															}

																														}

																													} else
																													{
																														{
																															IKReal j4array[1], cj4array[1], sj4array[1];
																															bool j4valid[1]={false};
																															j4array[0]=IKatan2(((gconst7)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst7)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																															sj4array[0]=IKsin(j4array[0]);
																															cj4array[0]=IKcos(j4array[0]);
																															if( j4array[0] > IKPI )
																															{
																																j4array[0]-=IK2PI;
																															}
																															else if( j4array[0] < -IKPI )
																															{
																																j4array[0]+=IK2PI;
																															}
																															j4valid[0] = true;
																															for(int ij4 = 0; ij4 < 1; ++ij4)
																															{
																																if( !j4valid[ij4] )
																																{
																																	continue;
																																}
																																j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j3;
																																	solution.basesol[1].foffset = j4;
																																	solution.basesol[2].foffset = j5;
																																	solution.basesol[3].foffset = j6;
																																	solution.basesol[4].foffset = j7;
																																	solution.basesol[5].foffset = j8;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j3array[1], cj3array[1], sj3array[1];
																									bool j3valid[1]={false};
																									IKReal x636=(sj8)*(sj8);
																									IKReal x637=(cj8)*(cj8);
																									IKReal x638=(r11)*(r11);
																									IKReal x639=((x637)*(x638));
																									IKReal x640=(r00)*(r00);
																									IKReal x641=((x636)*(x640));
																									IKReal x642=(r10)*(r10);
																									IKReal x643=((x636)*(x642));
																									IKReal x644=(r01)*(r01);
																									IKReal x645=((x637)*(x644));
																									IKReal x646=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
																									IKReal x647=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
																									IKReal x648=((x647)+(x646)+(x645)+(x643)+(x641)+(x639));
																									j3array[0]=IKatan2(((((IKabs(x648) != 0)?((IKReal)1/(x648)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((-1.00000000000000)*(((IKabs(x648) != 0)?((IKReal)1/(x648)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
																									sj3array[0]=IKsin(j3array[0]);
																									cj3array[0]=IKcos(j3array[0]);
																									if( j3array[0] > IKPI )
																									{
																										j3array[0]-=IK2PI;
																									}
																									else if( j3array[0] < -IKPI )
																									{
																										j3array[0]+=IK2PI;
																									}
																									j3valid[0] = true;
																									for(int ij3 = 0; ij3 < 1; ++ij3)
																									{
																										if( !j3valid[ij3] )
																										{
																											continue;
																										}
																										j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																										{
																											IKReal dummyeval[1];
																											IKReal gconst7;
																											gconst7=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																											dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												{
																													IKReal dummyeval[1];
																													dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														{
																															IKReal dummyeval[1];
																															dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																															{
																																continue;

																															} else
																															{
																																{
																																	IKReal j4array[1], cj4array[1], sj4array[1];
																																	bool j4valid[1]={false};
																																	IKReal x649=(cj5)*(cj5);
																																	IKReal x650=(sj5)*(sj5);
																																	IKReal x651=((x649)+(x650));
																																	j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x651) != 0)?((IKReal)1/(x651)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x651) != 0)?((IKReal)1/(x651)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																																	sj4array[0]=IKsin(j4array[0]);
																																	cj4array[0]=IKcos(j4array[0]);
																																	if( j4array[0] > IKPI )
																																	{
																																		j4array[0]-=IK2PI;
																																	}
																																	else if( j4array[0] < -IKPI )
																																	{
																																		j4array[0]+=IK2PI;
																																	}
																																	j4valid[0] = true;
																																	for(int ij4 = 0; ij4 < 1; ++ij4)
																																	{
																																		if( !j4valid[ij4] )
																																		{
																																			continue;
																																		}
																																		j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																		{
																																			vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																			solution.basesol.resize(6);
																																			solution.basesol[0].foffset = j3;
																																			solution.basesol[1].foffset = j4;
																																			solution.basesol[2].foffset = j5;
																																			solution.basesol[3].foffset = j6;
																																			solution.basesol[4].foffset = j7;
																																			solution.basesol[5].foffset = j8;
																																			solution.vfree.resize(0);
																																		}
																																	}
																																}

																															}

																														}

																													} else
																													{
																														{
																															IKReal j4array[1], cj4array[1], sj4array[1];
																															bool j4valid[1]={false};
																															IKReal x652=(cj5)*(cj5);
																															IKReal x653=(sj5)*(sj5);
																															IKReal x654=((x652)+(x653));
																															j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x654) != 0)?((IKReal)1/(x654)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x654) != 0)?((IKReal)1/(x654)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																															sj4array[0]=IKsin(j4array[0]);
																															cj4array[0]=IKcos(j4array[0]);
																															if( j4array[0] > IKPI )
																															{
																																j4array[0]-=IK2PI;
																															}
																															else if( j4array[0] < -IKPI )
																															{
																																j4array[0]+=IK2PI;
																															}
																															j4valid[0] = true;
																															for(int ij4 = 0; ij4 < 1; ++ij4)
																															{
																																if( !j4valid[ij4] )
																																{
																																	continue;
																																}
																																j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j3;
																																	solution.basesol[1].foffset = j4;
																																	solution.basesol[2].foffset = j5;
																																	solution.basesol[3].foffset = j6;
																																	solution.basesol[4].foffset = j7;
																																	solution.basesol[5].foffset = j8;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}

																											} else
																											{
																												{
																													IKReal j4array[1], cj4array[1], sj4array[1];
																													bool j4valid[1]={false};
																													j4array[0]=IKatan2(((gconst7)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst7)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																													sj4array[0]=IKsin(j4array[0]);
																													cj4array[0]=IKcos(j4array[0]);
																													if( j4array[0] > IKPI )
																													{
																														j4array[0]-=IK2PI;
																													}
																													else if( j4array[0] < -IKPI )
																													{
																														j4array[0]+=IK2PI;
																													}
																													j4valid[0] = true;
																													for(int ij4 = 0; ij4 < 1; ++ij4)
																													{
																														if( !j4valid[ij4] )
																														{
																															continue;
																														}
																														j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j3;
																															solution.basesol[1].foffset = j4;
																															solution.basesol[2].foffset = j5;
																															solution.basesol[3].foffset = j6;
																															solution.basesol[4].foffset = j7;
																															solution.basesol[5].foffset = j8;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j4array[1], cj4array[1], sj4array[1];
																							bool j4valid[1]={false};
																							IKReal x655=(cj5)*(cj5);
																							IKReal x656=(sj5)*(sj5);
																							IKReal x657=((x655)+(x656));
																							j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x657) != 0)?((IKReal)1/(x657)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x657) != 0)?((IKReal)1/(x657)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																							sj4array[0]=IKsin(j4array[0]);
																							cj4array[0]=IKcos(j4array[0]);
																							if( j4array[0] > IKPI )
																							{
																								j4array[0]-=IK2PI;
																							}
																							else if( j4array[0] < -IKPI )
																							{
																								j4array[0]+=IK2PI;
																							}
																							j4valid[0] = true;
																							for(int ij4 = 0; ij4 < 1; ++ij4)
																							{
																								if( !j4valid[ij4] )
																								{
																									continue;
																								}
																								j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																								{
																									IKReal dummyeval[1];
																									IKReal gconst8;
																									IKReal x658=(cj8)*(cj8);
																									IKReal x659=(sj8)*(sj8);
																									gconst8=IKsign(((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r10)*(r11)*(x658)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x659)))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x659)))+(((cj8)*(r11)*(r12)*(sj7)))+(((cj7)*(r00)*(r01)*(x658)))));
																									IKReal x660=(cj8)*(cj8);
																									IKReal x661=(sj8)*(sj8);
																									dummyeval[0]=((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r00)*(r01)*(x660)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x661)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x661)))+(((cj7)*(r10)*(r11)*(x660))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											IKReal x662=(sj8)*(sj8);
																											IKReal x663=(cj8)*(cj8);
																											dummyeval[0]=((((x663)*((r01)*(r01))))+(((x662)*((r10)*(r10))))+(((x662)*((r00)*(r00))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((x663)*((r11)*(r11)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												{
																													IKReal dummyeval[1];
																													IKReal x664=(sj8)*(sj8);
																													IKReal x665=(cj8)*(cj8);
																													dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj7)*(r00)*(r11)*(x665)))+(((cj7)*(r00)*(r11)*(x664)))+(((cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x665)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x664)))+(((r02)*(r10)*(sj7)*(sj8))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														continue;

																													} else
																													{
																														{
																															IKReal j3array[1], cj3array[1], sj3array[1];
																															bool j3valid[1]={false};
																															IKReal x666=(sj8)*(sj8);
																															IKReal x667=(cj8)*(cj8);
																															IKReal x668=((cj7)*(r01)*(r10)*(x666));
																															IKReal x669=((cj7)*(r01)*(r10)*(x667));
																															IKReal x670=((r00)*(r12)*(sj7)*(sj8));
																															IKReal x671=((cj8)*(r01)*(r12)*(sj7));
																															IKReal x672=((x669)+(x668)+(x670)+(x671));
																															IKReal x673=((cj7)*(r00)*(r11)*(x666));
																															IKReal x674=((cj7)*(r00)*(r11)*(x667));
																															IKReal x675=((cj8)*(r02)*(r11)*(sj7));
																															IKReal x676=((r02)*(r10)*(sj7)*(sj8));
																															IKReal x677=((x673)+(x676)+(x674)+(x675));
																															j3array[0]=IKatan2(((((IKabs(((x677)+(((-1.00000000000000)*(x672))))) != 0)?((IKReal)1/(((x677)+(((-1.00000000000000)*(x672)))))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((x672)+(((-1.00000000000000)*(x677))))) != 0)?((IKReal)1/(((x672)+(((-1.00000000000000)*(x677)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
																															sj3array[0]=IKsin(j3array[0]);
																															cj3array[0]=IKcos(j3array[0]);
																															if( j3array[0] > IKPI )
																															{
																																j3array[0]-=IK2PI;
																															}
																															else if( j3array[0] < -IKPI )
																															{
																																j3array[0]+=IK2PI;
																															}
																															j3valid[0] = true;
																															for(int ij3 = 0; ij3 < 1; ++ij3)
																															{
																																if( !j3valid[ij3] )
																																{
																																	continue;
																																}
																																j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j3;
																																	solution.basesol[1].foffset = j4;
																																	solution.basesol[2].foffset = j5;
																																	solution.basesol[3].foffset = j6;
																																	solution.basesol[4].foffset = j7;
																																	solution.basesol[5].foffset = j8;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}

																											} else
																											{
																												{
																													IKReal j3array[1], cj3array[1], sj3array[1];
																													bool j3valid[1]={false};
																													IKReal x678=(sj8)*(sj8);
																													IKReal x679=(cj8)*(cj8);
																													IKReal x680=(r11)*(r11);
																													IKReal x681=((x679)*(x680));
																													IKReal x682=(r00)*(r00);
																													IKReal x683=((x678)*(x682));
																													IKReal x684=(r10)*(r10);
																													IKReal x685=((x678)*(x684));
																													IKReal x686=(r01)*(r01);
																													IKReal x687=((x679)*(x686));
																													IKReal x688=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
																													IKReal x689=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
																													IKReal x690=((x689)+(x688)+(x683)+(x681)+(x687)+(x685));
																													j3array[0]=IKatan2(((((IKabs(x690) != 0)?((IKReal)1/(x690)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((-1.00000000000000)*(((IKabs(x690) != 0)?((IKReal)1/(x690)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
																													sj3array[0]=IKsin(j3array[0]);
																													cj3array[0]=IKcos(j3array[0]);
																													if( j3array[0] > IKPI )
																													{
																														j3array[0]-=IK2PI;
																													}
																													else if( j3array[0] < -IKPI )
																													{
																														j3array[0]+=IK2PI;
																													}
																													j3valid[0] = true;
																													for(int ij3 = 0; ij3 < 1; ++ij3)
																													{
																														if( !j3valid[ij3] )
																														{
																															continue;
																														}
																														j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j3;
																															solution.basesol[1].foffset = j4;
																															solution.basesol[2].foffset = j5;
																															solution.basesol[3].foffset = j6;
																															solution.basesol[4].foffset = j7;
																															solution.basesol[5].foffset = j8;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j3array[1], cj3array[1], sj3array[1];
																											bool j3valid[1]={false};
																											j3array[0]=IKatan2(((gconst8)*(((((-1.00000000000000)*(cj4)*(cj8)*(r11)*(sj5)))+(((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj4)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))+(((-1.00000000000000)*(cj4)*(r10)*(sj5)*(sj8)))))), ((gconst8)*(((((-1.00000000000000)*(cj5)*(cj8)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj8)*(r01)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj4)*(r00)*(sj5)*(sj8)))+(((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))));
																											sj3array[0]=IKsin(j3array[0]);
																											cj3array[0]=IKcos(j3array[0]);
																											if( j3array[0] > IKPI )
																											{
																												j3array[0]-=IK2PI;
																											}
																											else if( j3array[0] < -IKPI )
																											{
																												j3array[0]+=IK2PI;
																											}
																											j3valid[0] = true;
																											for(int ij3 = 0; ij3 < 1; ++ij3)
																											{
																												if( !j3valid[ij3] )
																												{
																													continue;
																												}
																												j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j3;
																													solution.basesol[1].foffset = j4;
																													solution.basesol[2].foffset = j5;
																													solution.basesol[3].foffset = j6;
																													solution.basesol[4].foffset = j7;
																													solution.basesol[5].foffset = j8;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}
																							}
																						}

																					}

																				}

																			} else
																			{
																				evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
																				evalcond[1]=((-0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																				evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
																				evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																				evalcond[4]=((-0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
																				if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
																				{
																					{
																						IKReal dummyeval[1];
																						IKReal gconst9;
																						gconst9=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																						dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							{
																								IKReal dummyeval[1];
																								IKReal x691=(sj8)*(sj8);
																								IKReal x692=(cj8)*(cj8);
																								dummyeval[0]=((((-1.00000000000000)*(x692)*((r11)*(r11))))+(((-1.00000000000000)*(x691)*((r10)*(r10))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x691)*((r00)*(r00))))+(((-1.00000000000000)*(x692)*((r01)*(r01))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									{
																										IKReal dummyeval[1];
																										IKReal x693=(sj8)*(sj8);
																										IKReal x694=(cj8)*(cj8);
																										dummyeval[0]=((((cj7)*(r01)*(r10)*(x693)))+(((cj7)*(r01)*(r10)*(x694)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x693)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x694)))+(((r00)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(r02)*(r10)*(sj7)*(sj8))));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											continue;

																										} else
																										{
																											{
																												IKReal j3array[1], cj3array[1], sj3array[1];
																												bool j3valid[1]={false};
																												IKReal x695=(sj8)*(sj8);
																												IKReal x696=(cj8)*(cj8);
																												IKReal x697=((cj7)*(r00)*(r11)*(x695));
																												IKReal x698=((cj7)*(r00)*(r11)*(x696));
																												IKReal x699=((cj8)*(r02)*(r11)*(sj7));
																												IKReal x700=((r02)*(r10)*(sj7)*(sj8));
																												IKReal x701=((x697)+(x698)+(x699)+(x700));
																												IKReal x702=((cj7)*(r01)*(r10)*(x695));
																												IKReal x703=((cj7)*(r01)*(r10)*(x696));
																												IKReal x704=((r00)*(r12)*(sj7)*(sj8));
																												IKReal x705=((cj8)*(r01)*(r12)*(sj7));
																												IKReal x706=((x702)+(x703)+(x704)+(x705));
																												j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x701)))+(x706))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x701)))+(x706)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x706)))+(x701))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x706)))+(x701)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
																												sj3array[0]=IKsin(j3array[0]);
																												cj3array[0]=IKcos(j3array[0]);
																												if( j3array[0] > IKPI )
																												{
																													j3array[0]-=IK2PI;
																												}
																												else if( j3array[0] < -IKPI )
																												{
																													j3array[0]+=IK2PI;
																												}
																												j3valid[0] = true;
																												for(int ij3 = 0; ij3 < 1; ++ij3)
																												{
																													if( !j3valid[ij3] )
																													{
																														continue;
																													}
																													j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																													{
																														IKReal dummyeval[1];
																														IKReal gconst10;
																														gconst10=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																														dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																														if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																														{
																															continue;

																														} else
																														{
																															{
																																IKReal j4array[1], cj4array[1], sj4array[1];
																																bool j4valid[1]={false};
																																j4array[0]=IKatan2(((gconst10)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst10)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																																sj4array[0]=IKsin(j4array[0]);
																																cj4array[0]=IKcos(j4array[0]);
																																if( j4array[0] > IKPI )
																																{
																																	j4array[0]-=IK2PI;
																																}
																																else if( j4array[0] < -IKPI )
																																{
																																	j4array[0]+=IK2PI;
																																}
																																j4valid[0] = true;
																																for(int ij4 = 0; ij4 < 1; ++ij4)
																																{
																																	if( !j4valid[ij4] )
																																	{
																																		continue;
																																	}
																																	j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																	{
																																		vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																		solution.basesol.resize(6);
																																		solution.basesol[0].foffset = j3;
																																		solution.basesol[1].foffset = j4;
																																		solution.basesol[2].foffset = j5;
																																		solution.basesol[3].foffset = j6;
																																		solution.basesol[4].foffset = j7;
																																		solution.basesol[5].foffset = j8;
																																		solution.vfree.resize(0);
																																	}
																																}
																															}

																														}

																													}
																												}
																											}

																										}

																									}

																								} else
																								{
																									{
																										IKReal j3array[1], cj3array[1], sj3array[1];
																										bool j3valid[1]={false};
																										IKReal x707=(sj8)*(sj8);
																										IKReal x708=(cj8)*(cj8);
																										IKReal x709=(r11)*(r11);
																										IKReal x710=((x708)*(x709));
																										IKReal x711=(r00)*(r00);
																										IKReal x712=((x707)*(x711));
																										IKReal x713=(r10)*(r10);
																										IKReal x714=((x707)*(x713));
																										IKReal x715=(r01)*(r01);
																										IKReal x716=((x708)*(x715));
																										IKReal x717=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
																										IKReal x718=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
																										IKReal x719=((x718)+(x710)+(x712)+(x714)+(x717)+(x716));
																										j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x719) != 0)?((IKReal)1/(x719)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((((IKabs(x719) != 0)?((IKReal)1/(x719)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
																										sj3array[0]=IKsin(j3array[0]);
																										cj3array[0]=IKcos(j3array[0]);
																										if( j3array[0] > IKPI )
																										{
																											j3array[0]-=IK2PI;
																										}
																										else if( j3array[0] < -IKPI )
																										{
																											j3array[0]+=IK2PI;
																										}
																										j3valid[0] = true;
																										for(int ij3 = 0; ij3 < 1; ++ij3)
																										{
																											if( !j3valid[ij3] )
																											{
																												continue;
																											}
																											j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																											{
																												IKReal dummyeval[1];
																												IKReal gconst10;
																												gconst10=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																												dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																												if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																												{
																													continue;

																												} else
																												{
																													{
																														IKReal j4array[1], cj4array[1], sj4array[1];
																														bool j4valid[1]={false};
																														j4array[0]=IKatan2(((gconst10)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst10)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																														sj4array[0]=IKsin(j4array[0]);
																														cj4array[0]=IKcos(j4array[0]);
																														if( j4array[0] > IKPI )
																														{
																															j4array[0]-=IK2PI;
																														}
																														else if( j4array[0] < -IKPI )
																														{
																															j4array[0]+=IK2PI;
																														}
																														j4valid[0] = true;
																														for(int ij4 = 0; ij4 < 1; ++ij4)
																														{
																															if( !j4valid[ij4] )
																															{
																																continue;
																															}
																															j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																															{
																																vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																solution.basesol.resize(6);
																																solution.basesol[0].foffset = j3;
																																solution.basesol[1].foffset = j4;
																																solution.basesol[2].foffset = j5;
																																solution.basesol[3].foffset = j6;
																																solution.basesol[4].foffset = j7;
																																solution.basesol[5].foffset = j8;
																																solution.vfree.resize(0);
																															}
																														}
																													}

																												}

																											}
																										}
																									}

																								}

																							}

																						} else
																						{
																							{
																								IKReal j4array[1], cj4array[1], sj4array[1];
																								bool j4valid[1]={false};
																								j4array[0]=IKatan2(((gconst9)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst9)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																								sj4array[0]=IKsin(j4array[0]);
																								cj4array[0]=IKcos(j4array[0]);
																								if( j4array[0] > IKPI )
																								{
																									j4array[0]-=IK2PI;
																								}
																								else if( j4array[0] < -IKPI )
																								{
																									j4array[0]+=IK2PI;
																								}
																								j4valid[0] = true;
																								for(int ij4 = 0; ij4 < 1; ++ij4)
																								{
																									if( !j4valid[ij4] )
																									{
																										continue;
																									}
																									j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																									{
																										IKReal dummyeval[1];
																										IKReal gconst11;
																										IKReal x720=(cj8)*(cj8);
																										IKReal x721=(sj8)*(sj8);
																										gconst11=IKsign(((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x721)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj7)*(r00)*(r01)*(x720)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r10)*(r11)*(x720)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x721)))));
																										IKReal x722=(cj8)*(cj8);
																										IKReal x723=(sj8)*(sj8);
																										dummyeval[0]=((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x723)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj7)*(r00)*(r01)*(x722)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r10)*(r11)*(x722)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x723))));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											{
																												IKReal dummyeval[1];
																												IKReal x724=(sj8)*(sj8);
																												IKReal x725=(cj8)*(cj8);
																												dummyeval[0]=((((-1.00000000000000)*(x725)*((r11)*(r11))))+(((-1.00000000000000)*(x724)*((r10)*(r10))))+(((-1.00000000000000)*(x725)*((r01)*(r01))))+(((-1.00000000000000)*(x724)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
																												if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																												{
																													{
																														IKReal dummyeval[1];
																														IKReal x726=(sj8)*(sj8);
																														IKReal x727=(cj8)*(cj8);
																														dummyeval[0]=((((cj7)*(r01)*(r10)*(x727)))+(((cj7)*(r01)*(r10)*(x726)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x726)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x727)))+(((r00)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(r02)*(r10)*(sj7)*(sj8))));
																														if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																														{
																															continue;

																														} else
																														{
																															{
																																IKReal j3array[1], cj3array[1], sj3array[1];
																																bool j3valid[1]={false};
																																IKReal x728=(sj8)*(sj8);
																																IKReal x729=(cj8)*(cj8);
																																IKReal x730=((cj7)*(r00)*(r11)*(x728));
																																IKReal x731=((cj7)*(r00)*(r11)*(x729));
																																IKReal x732=((cj8)*(r02)*(r11)*(sj7));
																																IKReal x733=((r02)*(r10)*(sj7)*(sj8));
																																IKReal x734=((x733)+(x732)+(x731)+(x730));
																																IKReal x735=((cj7)*(r01)*(r10)*(x728));
																																IKReal x736=((cj7)*(r01)*(r10)*(x729));
																																IKReal x737=((r00)*(r12)*(sj7)*(sj8));
																																IKReal x738=((cj8)*(r01)*(r12)*(sj7));
																																IKReal x739=((x737)+(x736)+(x735)+(x738));
																																j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x734)))+(x739))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x734)))+(x739)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x739)))+(x734))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x739)))+(x734)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
																																sj3array[0]=IKsin(j3array[0]);
																																cj3array[0]=IKcos(j3array[0]);
																																if( j3array[0] > IKPI )
																																{
																																	j3array[0]-=IK2PI;
																																}
																																else if( j3array[0] < -IKPI )
																																{
																																	j3array[0]+=IK2PI;
																																}
																																j3valid[0] = true;
																																for(int ij3 = 0; ij3 < 1; ++ij3)
																																{
																																	if( !j3valid[ij3] )
																																	{
																																		continue;
																																	}
																																	j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																																	{
																																		vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																		solution.basesol.resize(6);
																																		solution.basesol[0].foffset = j3;
																																		solution.basesol[1].foffset = j4;
																																		solution.basesol[2].foffset = j5;
																																		solution.basesol[3].foffset = j6;
																																		solution.basesol[4].foffset = j7;
																																		solution.basesol[5].foffset = j8;
																																		solution.vfree.resize(0);
																																	}
																																}
																															}

																														}

																													}

																												} else
																												{
																													{
																														IKReal j3array[1], cj3array[1], sj3array[1];
																														bool j3valid[1]={false};
																														IKReal x740=(sj8)*(sj8);
																														IKReal x741=(cj8)*(cj8);
																														IKReal x742=(r11)*(r11);
																														IKReal x743=((x741)*(x742));
																														IKReal x744=(r00)*(r00);
																														IKReal x745=((x740)*(x744));
																														IKReal x746=(r10)*(r10);
																														IKReal x747=((x740)*(x746));
																														IKReal x748=(r01)*(r01);
																														IKReal x749=((x741)*(x748));
																														IKReal x750=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
																														IKReal x751=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
																														IKReal x752=((x751)+(x750)+(x747)+(x745)+(x743)+(x749));
																														j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x752) != 0)?((IKReal)1/(x752)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((((IKabs(x752) != 0)?((IKReal)1/(x752)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
																														sj3array[0]=IKsin(j3array[0]);
																														cj3array[0]=IKcos(j3array[0]);
																														if( j3array[0] > IKPI )
																														{
																															j3array[0]-=IK2PI;
																														}
																														else if( j3array[0] < -IKPI )
																														{
																															j3array[0]+=IK2PI;
																														}
																														j3valid[0] = true;
																														for(int ij3 = 0; ij3 < 1; ++ij3)
																														{
																															if( !j3valid[ij3] )
																															{
																																continue;
																															}
																															j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																															{
																																vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																solution.basesol.resize(6);
																																solution.basesol[0].foffset = j3;
																																solution.basesol[1].foffset = j4;
																																solution.basesol[2].foffset = j5;
																																solution.basesol[3].foffset = j6;
																																solution.basesol[4].foffset = j7;
																																solution.basesol[5].foffset = j8;
																																solution.vfree.resize(0);
																															}
																														}
																													}

																												}

																											}

																										} else
																										{
																											{
																												IKReal j3array[1], cj3array[1], sj3array[1];
																												bool j3valid[1]={false};
																												j3array[0]=IKatan2(((gconst11)*(((((r02)*(sj7)))+(((-1.00000000000000)*(cj4)*(cj8)*(r11)*(sj5)))+(((cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj4)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj4)*(r10)*(sj5)*(sj8)))))), ((gconst11)*(((((-1.00000000000000)*(cj5)*(cj8)*(r01)*(sj4)))+(((cj7)*(r11)*(sj8)))+(((-1.00000000000000)*(cj4)*(cj8)*(r01)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj4)*(r00)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r12)*(sj7)))))));
																												sj3array[0]=IKsin(j3array[0]);
																												cj3array[0]=IKcos(j3array[0]);
																												if( j3array[0] > IKPI )
																												{
																													j3array[0]-=IK2PI;
																												}
																												else if( j3array[0] < -IKPI )
																												{
																													j3array[0]+=IK2PI;
																												}
																												j3valid[0] = true;
																												for(int ij3 = 0; ij3 < 1; ++ij3)
																												{
																													if( !j3valid[ij3] )
																													{
																														continue;
																													}
																													j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j3;
																														solution.basesol[1].foffset = j4;
																														solution.basesol[2].foffset = j5;
																														solution.basesol[3].foffset = j6;
																														solution.basesol[4].foffset = j7;
																														solution.basesol[5].foffset = j8;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}
																								}
																							}

																						}

																					}

																				} else
																				{
																					if( 1 )
																					{
																						continue;

																					} else
																					{
																					}
																				}
																			}
																		}

																	} else
																	{
																		{
																			IKReal j3array[1], cj3array[1], sj3array[1];
																			bool j3valid[1]={false};
																			IKReal x753=(sj8)*(sj8);
																			IKReal x754=(cj8)*(cj8);
																			IKReal x755=((cj7)*(r01)*(r10)*(x753));
																			IKReal x756=((cj7)*(r01)*(r10)*(x754));
																			IKReal x757=((r00)*(r12)*(sj7)*(sj8));
																			IKReal x758=((cj8)*(r01)*(r12)*(sj7));
																			IKReal x759=((x755)+(x757)+(x756)+(x758));
																			IKReal x760=((cj7)*(r00)*(r11)*(x753));
																			IKReal x761=((cj7)*(r00)*(r11)*(x754));
																			IKReal x762=((cj8)*(r02)*(r11)*(sj7));
																			IKReal x763=((r02)*(r10)*(sj7)*(sj8));
																			IKReal x764=((x760)+(x761)+(x762)+(x763));
																			j3array[0]=IKatan2(((((IKabs(((x764)+(((-1.00000000000000)*(x759))))) != 0)?((IKReal)1/(((x764)+(((-1.00000000000000)*(x759)))))):(IKReal)1.0e30))*(((((cj6)*(r12)*(sj7)))+(((cj6)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj6)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x764)))+(x759))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x764)))+(x759)))):(IKReal)1.0e30))*(((((cj6)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj6)*(r02)*(sj7)))))));
																			sj3array[0]=IKsin(j3array[0]);
																			cj3array[0]=IKcos(j3array[0]);
																			if( j3array[0] > IKPI )
																			{
																				j3array[0]-=IK2PI;
																			}
																			else if( j3array[0] < -IKPI )
																			{
																				j3array[0]+=IK2PI;
																			}
																			j3valid[0] = true;
																			for(int ij3 = 0; ij3 < 1; ++ij3)
																			{
																				if( !j3valid[ij3] )
																				{
																					continue;
																				}
																				j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																				{
																					IKReal dummyeval[1];
																					IKReal gconst3;
																					gconst3=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
																					dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal evalcond[9];
																							evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
																							evalcond[1]=((0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																							evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
																							evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																							evalcond[4]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																							evalcond[5]=((0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
																							evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																							evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																							evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																							if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									IKReal gconst4;
																									gconst4=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																									dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												{
																													IKReal dummyeval[1];
																													dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														continue;

																													} else
																													{
																														{
																															IKReal j4array[1], cj4array[1], sj4array[1];
																															bool j4valid[1]={false};
																															IKReal x765=(cj5)*(cj5);
																															IKReal x766=(sj5)*(sj5);
																															IKReal x767=((x765)+(x766));
																															j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x767) != 0)?((IKReal)1/(x767)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x767) != 0)?((IKReal)1/(x767)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																															sj4array[0]=IKsin(j4array[0]);
																															cj4array[0]=IKcos(j4array[0]);
																															if( j4array[0] > IKPI )
																															{
																																j4array[0]-=IK2PI;
																															}
																															else if( j4array[0] < -IKPI )
																															{
																																j4array[0]+=IK2PI;
																															}
																															j4valid[0] = true;
																															for(int ij4 = 0; ij4 < 1; ++ij4)
																															{
																																if( !j4valid[ij4] )
																																{
																																	continue;
																																}
																																j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j3;
																																	solution.basesol[1].foffset = j4;
																																	solution.basesol[2].foffset = j5;
																																	solution.basesol[3].foffset = j6;
																																	solution.basesol[4].foffset = j7;
																																	solution.basesol[5].foffset = j8;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}

																											} else
																											{
																												{
																													IKReal j4array[1], cj4array[1], sj4array[1];
																													bool j4valid[1]={false};
																													IKReal x768=(cj5)*(cj5);
																													IKReal x769=(sj5)*(sj5);
																													IKReal x770=((x768)+(x769));
																													j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x770) != 0)?((IKReal)1/(x770)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x770) != 0)?((IKReal)1/(x770)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																													sj4array[0]=IKsin(j4array[0]);
																													cj4array[0]=IKcos(j4array[0]);
																													if( j4array[0] > IKPI )
																													{
																														j4array[0]-=IK2PI;
																													}
																													else if( j4array[0] < -IKPI )
																													{
																														j4array[0]+=IK2PI;
																													}
																													j4valid[0] = true;
																													for(int ij4 = 0; ij4 < 1; ++ij4)
																													{
																														if( !j4valid[ij4] )
																														{
																															continue;
																														}
																														j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j3;
																															solution.basesol[1].foffset = j4;
																															solution.basesol[2].foffset = j5;
																															solution.basesol[3].foffset = j6;
																															solution.basesol[4].foffset = j7;
																															solution.basesol[5].foffset = j8;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j4array[1], cj4array[1], sj4array[1];
																											bool j4valid[1]={false};
																											j4array[0]=IKatan2(((gconst4)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst4)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																											sj4array[0]=IKsin(j4array[0]);
																											cj4array[0]=IKcos(j4array[0]);
																											if( j4array[0] > IKPI )
																											{
																												j4array[0]-=IK2PI;
																											}
																											else if( j4array[0] < -IKPI )
																											{
																												j4array[0]+=IK2PI;
																											}
																											j4valid[0] = true;
																											for(int ij4 = 0; ij4 < 1; ++ij4)
																											{
																												if( !j4valid[ij4] )
																												{
																													continue;
																												}
																												j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j3;
																													solution.basesol[1].foffset = j4;
																													solution.basesol[2].foffset = j5;
																													solution.basesol[3].foffset = j6;
																													solution.basesol[4].foffset = j7;
																													solution.basesol[5].foffset = j8;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
																								evalcond[1]=((-0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																								evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
																								evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																								evalcond[4]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																								evalcond[5]=((-0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
																								evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																								evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																								evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																								if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																								{
																									{
																										IKReal dummyeval[1];
																										IKReal gconst5;
																										gconst5=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																										dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											continue;

																										} else
																										{
																											{
																												IKReal j4array[1], cj4array[1], sj4array[1];
																												bool j4valid[1]={false};
																												j4array[0]=IKatan2(((gconst5)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst5)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																												sj4array[0]=IKsin(j4array[0]);
																												cj4array[0]=IKcos(j4array[0]);
																												if( j4array[0] > IKPI )
																												{
																													j4array[0]-=IK2PI;
																												}
																												else if( j4array[0] < -IKPI )
																												{
																													j4array[0]+=IK2PI;
																												}
																												j4valid[0] = true;
																												for(int ij4 = 0; ij4 < 1; ++ij4)
																												{
																													if( !j4valid[ij4] )
																													{
																														continue;
																													}
																													j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j3;
																														solution.basesol[1].foffset = j4;
																														solution.basesol[2].foffset = j5;
																														solution.basesol[3].foffset = j6;
																														solution.basesol[4].foffset = j7;
																														solution.basesol[5].foffset = j8;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}

																								} else
																								{
																									if( 1 )
																									{
																										continue;

																									} else
																									{
																									}
																								}
																							}
																						}

																					} else
																					{
																						{
																							IKReal j4array[1], cj4array[1], sj4array[1];
																							bool j4valid[1]={false};
																							j4array[0]=IKatan2(((gconst3)*(((((cj5)*(r20)*(sj8)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj5)*(cj8)*(r21)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))))), ((gconst3)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))))));
																							sj4array[0]=IKsin(j4array[0]);
																							cj4array[0]=IKcos(j4array[0]);
																							if( j4array[0] > IKPI )
																							{
																								j4array[0]-=IK2PI;
																							}
																							else if( j4array[0] < -IKPI )
																							{
																								j4array[0]+=IK2PI;
																							}
																							j4valid[0] = true;
																							for(int ij4 = 0; ij4 < 1; ++ij4)
																							{
																								if( !j4valid[ij4] )
																								{
																									continue;
																								}
																								j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j3;
																									solution.basesol[1].foffset = j4;
																									solution.basesol[2].foffset = j5;
																									solution.basesol[3].foffset = j6;
																									solution.basesol[4].foffset = j7;
																									solution.basesol[5].foffset = j8;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}
																			}
																		}

																	}

																}

															} else
															{
																{
																	IKReal j3array[1], cj3array[1], sj3array[1];
																	bool j3valid[1]={false};
																	j3array[0]=IKatan2(((gconst1)*(((((cj6)*(r11)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj6)))+(((-1.00000000000000)*(r10)*(sj6)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r10)*(sj7)))+(((cj6)*(cj7)*(r12)))))), ((gconst1)*(((((cj6)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(r00)*(sj6)*(sj8)))+(((cj6)*(cj7)*(r02)))+(((-1.00000000000000)*(cj8)*(r01)*(sj6)))))));
																	sj3array[0]=IKsin(j3array[0]);
																	cj3array[0]=IKcos(j3array[0]);
																	if( j3array[0] > IKPI )
																	{
																		j3array[0]-=IK2PI;
																	}
																	else if( j3array[0] < -IKPI )
																	{
																		j3array[0]+=IK2PI;
																	}
																	j3valid[0] = true;
																	for(int ij3 = 0; ij3 < 1; ++ij3)
																	{
																		if( !j3valid[ij3] )
																		{
																			continue;
																		}
																		j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																		{
																			IKReal dummyeval[1];
																			IKReal gconst3;
																			gconst3=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
																			dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				{
																					IKReal evalcond[9];
																					evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
																					evalcond[1]=((0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																					evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
																					evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																					evalcond[4]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																					evalcond[5]=((0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
																					evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																					evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																					evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																					if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							IKReal gconst4;
																							gconst4=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																							dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												continue;

																											} else
																											{
																												{
																													IKReal j4array[1], cj4array[1], sj4array[1];
																													bool j4valid[1]={false};
																													IKReal x771=(cj5)*(cj5);
																													IKReal x772=(sj5)*(sj5);
																													IKReal x773=((x772)+(x771));
																													j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x773) != 0)?((IKReal)1/(x773)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x773) != 0)?((IKReal)1/(x773)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																													sj4array[0]=IKsin(j4array[0]);
																													cj4array[0]=IKcos(j4array[0]);
																													if( j4array[0] > IKPI )
																													{
																														j4array[0]-=IK2PI;
																													}
																													else if( j4array[0] < -IKPI )
																													{
																														j4array[0]+=IK2PI;
																													}
																													j4valid[0] = true;
																													for(int ij4 = 0; ij4 < 1; ++ij4)
																													{
																														if( !j4valid[ij4] )
																														{
																															continue;
																														}
																														j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j3;
																															solution.basesol[1].foffset = j4;
																															solution.basesol[2].foffset = j5;
																															solution.basesol[3].foffset = j6;
																															solution.basesol[4].foffset = j7;
																															solution.basesol[5].foffset = j8;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j4array[1], cj4array[1], sj4array[1];
																											bool j4valid[1]={false};
																											IKReal x774=(cj5)*(cj5);
																											IKReal x775=(sj5)*(sj5);
																											IKReal x776=((x775)+(x774));
																											j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x776) != 0)?((IKReal)1/(x776)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x776) != 0)?((IKReal)1/(x776)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																											sj4array[0]=IKsin(j4array[0]);
																											cj4array[0]=IKcos(j4array[0]);
																											if( j4array[0] > IKPI )
																											{
																												j4array[0]-=IK2PI;
																											}
																											else if( j4array[0] < -IKPI )
																											{
																												j4array[0]+=IK2PI;
																											}
																											j4valid[0] = true;
																											for(int ij4 = 0; ij4 < 1; ++ij4)
																											{
																												if( !j4valid[ij4] )
																												{
																													continue;
																												}
																												j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j3;
																													solution.basesol[1].foffset = j4;
																													solution.basesol[2].foffset = j5;
																													solution.basesol[3].foffset = j6;
																													solution.basesol[4].foffset = j7;
																													solution.basesol[5].foffset = j8;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j4array[1], cj4array[1], sj4array[1];
																									bool j4valid[1]={false};
																									j4array[0]=IKatan2(((gconst4)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst4)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																									sj4array[0]=IKsin(j4array[0]);
																									cj4array[0]=IKcos(j4array[0]);
																									if( j4array[0] > IKPI )
																									{
																										j4array[0]-=IK2PI;
																									}
																									else if( j4array[0] < -IKPI )
																									{
																										j4array[0]+=IK2PI;
																									}
																									j4valid[0] = true;
																									for(int ij4 = 0; ij4 < 1; ++ij4)
																									{
																										if( !j4valid[ij4] )
																										{
																											continue;
																										}
																										j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j3;
																											solution.basesol[1].foffset = j4;
																											solution.basesol[2].foffset = j5;
																											solution.basesol[3].foffset = j6;
																											solution.basesol[4].foffset = j7;
																											solution.basesol[5].foffset = j8;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
																						evalcond[1]=((-0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																						evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
																						evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																						evalcond[4]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																						evalcond[5]=((-0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
																						evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																						evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																						evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																						if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																						{
																							{
																								IKReal dummyeval[1];
																								IKReal gconst5;
																								gconst5=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																								dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									continue;

																								} else
																								{
																									{
																										IKReal j4array[1], cj4array[1], sj4array[1];
																										bool j4valid[1]={false};
																										j4array[0]=IKatan2(((gconst5)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst5)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																										sj4array[0]=IKsin(j4array[0]);
																										cj4array[0]=IKcos(j4array[0]);
																										if( j4array[0] > IKPI )
																										{
																											j4array[0]-=IK2PI;
																										}
																										else if( j4array[0] < -IKPI )
																										{
																											j4array[0]+=IK2PI;
																										}
																										j4valid[0] = true;
																										for(int ij4 = 0; ij4 < 1; ++ij4)
																										{
																											if( !j4valid[ij4] )
																											{
																												continue;
																											}
																											j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																											{
																												vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																												solution.basesol.resize(6);
																												solution.basesol[0].foffset = j3;
																												solution.basesol[1].foffset = j4;
																												solution.basesol[2].foffset = j5;
																												solution.basesol[3].foffset = j6;
																												solution.basesol[4].foffset = j7;
																												solution.basesol[5].foffset = j8;
																												solution.vfree.resize(0);
																											}
																										}
																									}

																								}

																							}

																						} else
																						{
																							if( 1 )
																							{
																								continue;

																							} else
																							{
																							}
																						}
																					}
																				}

																			} else
																			{
																				{
																					IKReal j4array[1], cj4array[1], sj4array[1];
																					bool j4valid[1]={false};
																					j4array[0]=IKatan2(((gconst3)*(((((cj5)*(r20)*(sj8)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj5)*(cj8)*(r21)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))))), ((gconst3)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))))));
																					sj4array[0]=IKsin(j4array[0]);
																					cj4array[0]=IKcos(j4array[0]);
																					if( j4array[0] > IKPI )
																					{
																						j4array[0]-=IK2PI;
																					}
																					else if( j4array[0] < -IKPI )
																					{
																						j4array[0]+=IK2PI;
																					}
																					j4valid[0] = true;
																					for(int ij4 = 0; ij4 < 1; ++ij4)
																					{
																						if( !j4valid[ij4] )
																						{
																							continue;
																						}
																						j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																						{
																							vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																							solution.basesol.resize(6);
																							solution.basesol[0].foffset = j3;
																							solution.basesol[1].foffset = j4;
																							solution.basesol[2].foffset = j5;
																							solution.basesol[3].foffset = j6;
																							solution.basesol[4].foffset = j7;
																							solution.basesol[5].foffset = j8;
																							solution.vfree.resize(0);
																						}
																					}
																				}

																			}

																		}
																	}
																}

															}

														}

													} else
													{
														{
															IKReal j4array[1], cj4array[1], sj4array[1];
															bool j4valid[1]={false};
															j4array[0]=IKatan2(((gconst2)*(((((cj5)*(r20)*(sj8)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj5)*(cj8)*(r21)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))))), ((gconst2)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))))));
															sj4array[0]=IKsin(j4array[0]);
															cj4array[0]=IKcos(j4array[0]);
															if( j4array[0] > IKPI )
															{
																j4array[0]-=IK2PI;
															}
															else if( j4array[0] < -IKPI )
															{
																j4array[0]+=IK2PI;
															}
															j4valid[0] = true;
															for(int ij4 = 0; ij4 < 1; ++ij4)
															{
																if( !j4valid[ij4] )
																{
																	continue;
																}
																j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																{
																	IKReal dummyeval[1];
																	IKReal gconst6;
																	IKReal x777=(sj8)*(sj8);
																	IKReal x778=(cj8)*(cj8);
																	gconst6=IKsign(((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x778)))+(((r01)*(r10)*(sj7)*(x777)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x778)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x777)))));
																	IKReal x779=(sj8)*(sj8);
																	IKReal x780=(cj8)*(cj8);
																	dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x780)))+(((r01)*(r10)*(sj7)*(x779)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x780)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x779))));
																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																	{
																		{
																			IKReal dummyeval[1];
																			IKReal x781=(sj8)*(sj8);
																			IKReal x782=(cj8)*(cj8);
																			dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((cj7)*(r00)*(r11)*(x782)))+(((cj7)*(r00)*(r11)*(x781)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x782)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x781)))+(((r02)*(r10)*(sj7)*(sj8))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				continue;

																			} else
																			{
																				{
																					IKReal j3array[1], cj3array[1], sj3array[1];
																					bool j3valid[1]={false};
																					IKReal x783=(sj8)*(sj8);
																					IKReal x784=(cj8)*(cj8);
																					IKReal x785=((cj7)*(r01)*(r10)*(x783));
																					IKReal x786=((cj7)*(r01)*(r10)*(x784));
																					IKReal x787=((r00)*(r12)*(sj7)*(sj8));
																					IKReal x788=((cj8)*(r01)*(r12)*(sj7));
																					IKReal x789=((x786)+(x787)+(x785)+(x788));
																					IKReal x790=((cj7)*(r00)*(r11)*(x783));
																					IKReal x791=((cj7)*(r00)*(r11)*(x784));
																					IKReal x792=((cj8)*(r02)*(r11)*(sj7));
																					IKReal x793=((r02)*(r10)*(sj7)*(sj8));
																					IKReal x794=((x791)+(x790)+(x793)+(x792));
																					j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x789)))+(x794))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x789)))+(x794)))):(IKReal)1.0e30))*(((((cj6)*(r12)*(sj7)))+(((cj6)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj6)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x794)))+(x789))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x794)))+(x789)))):(IKReal)1.0e30))*(((((cj6)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj6)*(r02)*(sj7)))))));
																					sj3array[0]=IKsin(j3array[0]);
																					cj3array[0]=IKcos(j3array[0]);
																					if( j3array[0] > IKPI )
																					{
																						j3array[0]-=IK2PI;
																					}
																					else if( j3array[0] < -IKPI )
																					{
																						j3array[0]+=IK2PI;
																					}
																					j3valid[0] = true;
																					for(int ij3 = 0; ij3 < 1; ++ij3)
																					{
																						if( !j3valid[ij3] )
																						{
																							continue;
																						}
																						j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																						{
																							vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																							solution.basesol.resize(6);
																							solution.basesol[0].foffset = j3;
																							solution.basesol[1].foffset = j4;
																							solution.basesol[2].foffset = j5;
																							solution.basesol[3].foffset = j6;
																							solution.basesol[4].foffset = j7;
																							solution.basesol[5].foffset = j8;
																							solution.vfree.resize(0);
																						}
																					}
																				}

																			}

																		}

																	} else
																	{
																		{
																			IKReal j3array[1], cj3array[1], sj3array[1];
																			bool j3valid[1]={false};
																			j3array[0]=IKatan2(((gconst6)*(((((cj6)*(r11)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj6)))+(((-1.00000000000000)*(r10)*(sj6)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r10)*(sj7)))+(((cj6)*(cj7)*(r12)))))), ((gconst6)*(((((cj6)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(r00)*(sj6)*(sj8)))+(((cj6)*(cj7)*(r02)))+(((-1.00000000000000)*(cj8)*(r01)*(sj6)))))));
																			sj3array[0]=IKsin(j3array[0]);
																			cj3array[0]=IKcos(j3array[0]);
																			if( j3array[0] > IKPI )
																			{
																				j3array[0]-=IK2PI;
																			}
																			else if( j3array[0] < -IKPI )
																			{
																				j3array[0]+=IK2PI;
																			}
																			j3valid[0] = true;
																			for(int ij3 = 0; ij3 < 1; ++ij3)
																			{
																				if( !j3valid[ij3] )
																				{
																					continue;
																				}
																				j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																				{
																					vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																					solution.basesol.resize(6);
																					solution.basesol[0].foffset = j3;
																					solution.basesol[1].foffset = j4;
																					solution.basesol[2].foffset = j5;
																					solution.basesol[3].foffset = j6;
																					solution.basesol[4].foffset = j7;
																					solution.basesol[5].foffset = j8;
																					solution.vfree.resize(0);
																				}
																			}
																		}

																	}

																}
															}
														}

													}

												}
											}
										}

									}

								}

							} else
							{
								{
									IKReal j3array[1], cj3array[1], sj3array[1];
									bool j3valid[1]={false};
									j3array[0]=IKatan2(((gconst0)*(((((cj6)*(r11)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj6)))+(((-1.00000000000000)*(r10)*(sj6)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r10)*(sj7)))+(((cj6)*(cj7)*(r12)))))), ((gconst0)*(((((cj6)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(r00)*(sj6)*(sj8)))+(((cj6)*(cj7)*(r02)))+(((-1.00000000000000)*(cj8)*(r01)*(sj6)))))));
									sj3array[0]=IKsin(j3array[0]);
									cj3array[0]=IKcos(j3array[0]);
									if( j3array[0] > IKPI )
									{
										j3array[0]-=IK2PI;
									}
									else if( j3array[0] < -IKPI )
									{
										j3array[0]+=IK2PI;
									}
									j3valid[0] = true;
									for(int ij3 = 0; ij3 < 1; ++ij3)
									{
										if( !j3valid[ij3] )
										{
											continue;
										}
										j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

										{
											IKReal dummyeval[1];
											dummyeval[0]=sj6;
											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
											{
												{
													IKReal dummyeval[1];
													dummyeval[0]=cj6;
													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
													{
														{
															IKReal evalcond[7];
															evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j6)), 6.28318530717959)));
															evalcond[1]=((((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
															evalcond[2]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
															evalcond[3]=((0.0950000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
															evalcond[4]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
															evalcond[5]=((1.00000000000000)+(((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
															evalcond[6]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((cj3)*(cj8)*(r00)*(sj7))));
															if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
															{
																{
																	IKReal j5array[1], cj5array[1], sj5array[1];
																	bool j5valid[1]={false};
																	j5array[0]=IKatan2(((0.120000000000000)+(((-4.00000000000000)*(cj8)*(npy)))+(((-4.00000000000000)*(npx)*(sj8)))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
																	sj5array[0]=IKsin(j5array[0]);
																	cj5array[0]=IKcos(j5array[0]);
																	if( j5array[0] > IKPI )
																	{
																		j5array[0]-=IK2PI;
																	}
																	else if( j5array[0] < -IKPI )
																	{
																		j5array[0]+=IK2PI;
																	}
																	j5valid[0] = true;
																	for(int ij5 = 0; ij5 < 1; ++ij5)
																	{
																		if( !j5valid[ij5] )
																		{
																			continue;
																		}
																		j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

																		{
																			IKReal dummyeval[1];
																			IKReal gconst15;
																			gconst15=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																			dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				continue;

																			} else
																			{
																				{
																					IKReal j4array[1], cj4array[1], sj4array[1];
																					bool j4valid[1]={false};
																					j4array[0]=IKatan2(((gconst15)*(((((cj5)*(r20)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((r22)*(sj5)*(sj7)))+(((cj5)*(cj8)*(r21)))))), ((gconst15)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj8)*(r21)*(sj5)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																					sj4array[0]=IKsin(j4array[0]);
																					cj4array[0]=IKcos(j4array[0]);
																					if( j4array[0] > IKPI )
																					{
																						j4array[0]-=IK2PI;
																					}
																					else if( j4array[0] < -IKPI )
																					{
																						j4array[0]+=IK2PI;
																					}
																					j4valid[0] = true;
																					for(int ij4 = 0; ij4 < 1; ++ij4)
																					{
																						if( !j4valid[ij4] )
																						{
																							continue;
																						}
																						j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																						{
																							vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																							solution.basesol.resize(6);
																							solution.basesol[0].foffset = j3;
																							solution.basesol[1].foffset = j4;
																							solution.basesol[2].foffset = j5;
																							solution.basesol[3].foffset = j6;
																							solution.basesol[4].foffset = j7;
																							solution.basesol[5].foffset = j8;
																							solution.vfree.resize(0);
																						}
																					}
																				}

																			}

																		}
																	}
																}

															} else
															{
																evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j6)), 6.28318530717959)));
																evalcond[1]=((((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																evalcond[2]=((((-1.00000000000000)*(cj8)*(r20)*(sj7)))+(((cj7)*(r22)))+(((r21)*(sj7)*(sj8))));
																evalcond[3]=((-0.0950000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
																evalcond[4]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																evalcond[5]=((-1.00000000000000)+(((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																evalcond[6]=((((cj8)*(r10)*(sj3)*(sj7)))+(((-1.00000000000000)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(r02)))+(((-1.00000000000000)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(r01)*(sj7)*(sj8)))+(((cj3)*(cj8)*(r00)*(sj7))));
																if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
																{
																	{
																		IKReal j5array[1], cj5array[1], sj5array[1];
																		bool j5valid[1]={false};
																		j5array[0]=IKatan2(((0.120000000000000)+(((4.00000000000000)*(cj8)*(npy)))+(((4.00000000000000)*(npx)*(sj8)))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
																		sj5array[0]=IKsin(j5array[0]);
																		cj5array[0]=IKcos(j5array[0]);
																		if( j5array[0] > IKPI )
																		{
																			j5array[0]-=IK2PI;
																		}
																		else if( j5array[0] < -IKPI )
																		{
																			j5array[0]+=IK2PI;
																		}
																		j5valid[0] = true;
																		for(int ij5 = 0; ij5 < 1; ++ij5)
																		{
																			if( !j5valid[ij5] )
																			{
																				continue;
																			}
																			j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

																			{
																				IKReal dummyeval[1];
																				IKReal gconst16;
																				gconst16=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																				dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																				if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																				{
																					{
																						IKReal dummyeval[1];
																						dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							continue;

																						} else
																						{
																							{
																								IKReal j4array[1], cj4array[1], sj4array[1];
																								bool j4valid[1]={false};
																								IKReal x795=(cj5)*(cj5);
																								IKReal x796=(sj5)*(sj5);
																								IKReal x797=((x795)+(x796));
																								j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x797) != 0)?((IKReal)1/(x797)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r20)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj8)*(r21)))))), ((((IKabs(x797) != 0)?((IKReal)1/(x797)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(r20)*(sj5)*(sj8)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																								sj4array[0]=IKsin(j4array[0]);
																								cj4array[0]=IKcos(j4array[0]);
																								if( j4array[0] > IKPI )
																								{
																									j4array[0]-=IK2PI;
																								}
																								else if( j4array[0] < -IKPI )
																								{
																									j4array[0]+=IK2PI;
																								}
																								j4valid[0] = true;
																								for(int ij4 = 0; ij4 < 1; ++ij4)
																								{
																									if( !j4valid[ij4] )
																									{
																										continue;
																									}
																									j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																									{
																										vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																										solution.basesol.resize(6);
																										solution.basesol[0].foffset = j3;
																										solution.basesol[1].foffset = j4;
																										solution.basesol[2].foffset = j5;
																										solution.basesol[3].foffset = j6;
																										solution.basesol[4].foffset = j7;
																										solution.basesol[5].foffset = j8;
																										solution.vfree.resize(0);
																									}
																								}
																							}

																						}

																					}

																				} else
																				{
																					{
																						IKReal j4array[1], cj4array[1], sj4array[1];
																						bool j4valid[1]={false};
																						j4array[0]=IKatan2(((gconst16)*(((((cj3)*(r00)*(sj5)*(sj8)))+(((cj5)*(r20)*(sj8)))+(((cj3)*(cj8)*(r01)*(sj5)))+(((r10)*(sj3)*(sj5)*(sj8)))+(((cj8)*(r11)*(sj3)*(sj5)))+(((cj5)*(cj8)*(r21)))))), ((gconst16)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(r10)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj5)*(r00)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj8)*(r01)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj3)))))));
																						sj4array[0]=IKsin(j4array[0]);
																						cj4array[0]=IKcos(j4array[0]);
																						if( j4array[0] > IKPI )
																						{
																							j4array[0]-=IK2PI;
																						}
																						else if( j4array[0] < -IKPI )
																						{
																							j4array[0]+=IK2PI;
																						}
																						j4valid[0] = true;
																						for(int ij4 = 0; ij4 < 1; ++ij4)
																						{
																							if( !j4valid[ij4] )
																							{
																								continue;
																							}
																							j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																							{
																								vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																								solution.basesol.resize(6);
																								solution.basesol[0].foffset = j3;
																								solution.basesol[1].foffset = j4;
																								solution.basesol[2].foffset = j5;
																								solution.basesol[3].foffset = j6;
																								solution.basesol[4].foffset = j7;
																								solution.basesol[5].foffset = j8;
																								solution.vfree.resize(0);
																							}
																						}
																					}

																				}

																			}
																		}
																	}

																} else
																{
																	evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
																	evalcond[1]=((0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																	evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
																	evalcond[3]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																	evalcond[4]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																	evalcond[5]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																	evalcond[6]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																	if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
																	{
																		{
																			IKReal j5array[1], cj5array[1], sj5array[1];
																			bool j5valid[1]={false};
																			j5array[0]=IKatan2(((0.120000000000000)+(((-4.00000000000000)*(cj8)*(npx)*(sj7)))+(((4.00000000000000)*(cj7)*(npz)))+(((0.360000000000000)*(sj7)))+(((4.00000000000000)*(npy)*(sj7)*(sj8)))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
																			sj5array[0]=IKsin(j5array[0]);
																			cj5array[0]=IKcos(j5array[0]);
																			if( j5array[0] > IKPI )
																			{
																				j5array[0]-=IK2PI;
																			}
																			else if( j5array[0] < -IKPI )
																			{
																				j5array[0]+=IK2PI;
																			}
																			j5valid[0] = true;
																			for(int ij5 = 0; ij5 < 1; ++ij5)
																			{
																				if( !j5valid[ij5] )
																				{
																					continue;
																				}
																				j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

																				{
																					IKReal dummyeval[1];
																					IKReal gconst17;
																					gconst17=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																					dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										continue;

																									} else
																									{
																										{
																											IKReal j4array[1], cj4array[1], sj4array[1];
																											bool j4valid[1]={false};
																											IKReal x798=(cj5)*(cj5);
																											IKReal x799=(sj5)*(sj5);
																											IKReal x800=((x799)+(x798));
																											j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x800) != 0)?((IKReal)1/(x800)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x800) != 0)?((IKReal)1/(x800)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																											sj4array[0]=IKsin(j4array[0]);
																											cj4array[0]=IKcos(j4array[0]);
																											if( j4array[0] > IKPI )
																											{
																												j4array[0]-=IK2PI;
																											}
																											else if( j4array[0] < -IKPI )
																											{
																												j4array[0]+=IK2PI;
																											}
																											j4valid[0] = true;
																											for(int ij4 = 0; ij4 < 1; ++ij4)
																											{
																												if( !j4valid[ij4] )
																												{
																													continue;
																												}
																												j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j3;
																													solution.basesol[1].foffset = j4;
																													solution.basesol[2].foffset = j5;
																													solution.basesol[3].foffset = j6;
																													solution.basesol[4].foffset = j7;
																													solution.basesol[5].foffset = j8;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j4array[1], cj4array[1], sj4array[1];
																									bool j4valid[1]={false};
																									IKReal x801=(cj5)*(cj5);
																									IKReal x802=(sj5)*(sj5);
																									IKReal x803=((x801)+(x802));
																									j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x803) != 0)?((IKReal)1/(x803)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x803) != 0)?((IKReal)1/(x803)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																									sj4array[0]=IKsin(j4array[0]);
																									cj4array[0]=IKcos(j4array[0]);
																									if( j4array[0] > IKPI )
																									{
																										j4array[0]-=IK2PI;
																									}
																									else if( j4array[0] < -IKPI )
																									{
																										j4array[0]+=IK2PI;
																									}
																									j4valid[0] = true;
																									for(int ij4 = 0; ij4 < 1; ++ij4)
																									{
																										if( !j4valid[ij4] )
																										{
																											continue;
																										}
																										j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j3;
																											solution.basesol[1].foffset = j4;
																											solution.basesol[2].foffset = j5;
																											solution.basesol[3].foffset = j6;
																											solution.basesol[4].foffset = j7;
																											solution.basesol[5].foffset = j8;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j4array[1], cj4array[1], sj4array[1];
																							bool j4valid[1]={false};
																							j4array[0]=IKatan2(((gconst17)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst17)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																							sj4array[0]=IKsin(j4array[0]);
																							cj4array[0]=IKcos(j4array[0]);
																							if( j4array[0] > IKPI )
																							{
																								j4array[0]-=IK2PI;
																							}
																							else if( j4array[0] < -IKPI )
																							{
																								j4array[0]+=IK2PI;
																							}
																							j4valid[0] = true;
																							for(int ij4 = 0; ij4 < 1; ++ij4)
																							{
																								if( !j4valid[ij4] )
																								{
																									continue;
																								}
																								j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j3;
																									solution.basesol[1].foffset = j4;
																									solution.basesol[2].foffset = j5;
																									solution.basesol[3].foffset = j6;
																									solution.basesol[4].foffset = j7;
																									solution.basesol[5].foffset = j8;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}
																			}
																		}

																	} else
																	{
																		evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
																		evalcond[1]=((-0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																		evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
																		evalcond[3]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																		evalcond[4]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																		evalcond[5]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																		evalcond[6]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																		if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
																		{
																			{
																				IKReal j5array[1], cj5array[1], sj5array[1];
																				bool j5valid[1]={false};
																				j5array[0]=IKatan2(((0.120000000000000)+(((4.00000000000000)*(cj8)*(npx)*(sj7)))+(((-4.00000000000000)*(cj7)*(npz)))+(((-0.360000000000000)*(sj7)))+(((-4.00000000000000)*(npy)*(sj7)*(sj8)))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
																				sj5array[0]=IKsin(j5array[0]);
																				cj5array[0]=IKcos(j5array[0]);
																				if( j5array[0] > IKPI )
																				{
																					j5array[0]-=IK2PI;
																				}
																				else if( j5array[0] < -IKPI )
																				{
																					j5array[0]+=IK2PI;
																				}
																				j5valid[0] = true;
																				for(int ij5 = 0; ij5 < 1; ++ij5)
																				{
																					if( !j5valid[ij5] )
																					{
																						continue;
																					}
																					j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

																					{
																						IKReal dummyeval[1];
																						IKReal gconst18;
																						gconst18=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																						dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							continue;

																						} else
																						{
																							{
																								IKReal j4array[1], cj4array[1], sj4array[1];
																								bool j4valid[1]={false};
																								j4array[0]=IKatan2(((gconst18)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst18)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																								sj4array[0]=IKsin(j4array[0]);
																								cj4array[0]=IKcos(j4array[0]);
																								if( j4array[0] > IKPI )
																								{
																									j4array[0]-=IK2PI;
																								}
																								else if( j4array[0] < -IKPI )
																								{
																									j4array[0]+=IK2PI;
																								}
																								j4valid[0] = true;
																								for(int ij4 = 0; ij4 < 1; ++ij4)
																								{
																									if( !j4valid[ij4] )
																									{
																										continue;
																									}
																									j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																									{
																										vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																										solution.basesol.resize(6);
																										solution.basesol[0].foffset = j3;
																										solution.basesol[1].foffset = j4;
																										solution.basesol[2].foffset = j5;
																										solution.basesol[3].foffset = j6;
																										solution.basesol[4].foffset = j7;
																										solution.basesol[5].foffset = j8;
																										solution.vfree.resize(0);
																									}
																								}
																							}

																						}

																					}
																				}
																			}

																		} else
																		{
																			if( 1 )
																			{
																				continue;

																			} else
																			{
																			}
																		}
																	}
																}
															}
														}

													} else
													{
														{
															IKReal j5array[1], cj5array[1], sj5array[1];
															bool j5valid[1]={false};
															j5array[0]=IKatan2(((((IKabs(cj6) != 0)?((IKReal)1/(cj6)):(IKReal)1.0e30))*(((((-4.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.120000000000000)*(cj6)))+(((0.380000000000000)*(sj6)))+(((4.00000000000000)*(cj7)*(npz)))+(((0.360000000000000)*(sj7)))+(((4.00000000000000)*(npy)*(sj7)*(sj8)))))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
															sj5array[0]=IKsin(j5array[0]);
															cj5array[0]=IKcos(j5array[0]);
															if( j5array[0] > IKPI )
															{
																j5array[0]-=IK2PI;
															}
															else if( j5array[0] < -IKPI )
															{
																j5array[0]+=IK2PI;
															}
															j5valid[0] = true;
															for(int ij5 = 0; ij5 < 1; ++ij5)
															{
																if( !j5valid[ij5] )
																{
																	continue;
																}
																j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

																{
																	IKReal dummyeval[1];
																	IKReal gconst12;
																	gconst12=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
																	dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																	{
																		{
																			IKReal evalcond[9];
																			evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
																			evalcond[1]=((0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																			evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
																			evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																			evalcond[4]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																			evalcond[5]=((0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
																			evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																			evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																			evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																			if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																			{
																				{
																					IKReal dummyeval[1];
																					IKReal gconst13;
																					gconst13=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																					dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										continue;

																									} else
																									{
																										{
																											IKReal j4array[1], cj4array[1], sj4array[1];
																											bool j4valid[1]={false};
																											IKReal x804=(cj5)*(cj5);
																											IKReal x805=(sj5)*(sj5);
																											IKReal x806=((x805)+(x804));
																											j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x806) != 0)?((IKReal)1/(x806)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x806) != 0)?((IKReal)1/(x806)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																											sj4array[0]=IKsin(j4array[0]);
																											cj4array[0]=IKcos(j4array[0]);
																											if( j4array[0] > IKPI )
																											{
																												j4array[0]-=IK2PI;
																											}
																											else if( j4array[0] < -IKPI )
																											{
																												j4array[0]+=IK2PI;
																											}
																											j4valid[0] = true;
																											for(int ij4 = 0; ij4 < 1; ++ij4)
																											{
																												if( !j4valid[ij4] )
																												{
																													continue;
																												}
																												j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j3;
																													solution.basesol[1].foffset = j4;
																													solution.basesol[2].foffset = j5;
																													solution.basesol[3].foffset = j6;
																													solution.basesol[4].foffset = j7;
																													solution.basesol[5].foffset = j8;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j4array[1], cj4array[1], sj4array[1];
																									bool j4valid[1]={false};
																									IKReal x807=(cj5)*(cj5);
																									IKReal x808=(sj5)*(sj5);
																									IKReal x809=((x808)+(x807));
																									j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x809) != 0)?((IKReal)1/(x809)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x809) != 0)?((IKReal)1/(x809)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																									sj4array[0]=IKsin(j4array[0]);
																									cj4array[0]=IKcos(j4array[0]);
																									if( j4array[0] > IKPI )
																									{
																										j4array[0]-=IK2PI;
																									}
																									else if( j4array[0] < -IKPI )
																									{
																										j4array[0]+=IK2PI;
																									}
																									j4valid[0] = true;
																									for(int ij4 = 0; ij4 < 1; ++ij4)
																									{
																										if( !j4valid[ij4] )
																										{
																											continue;
																										}
																										j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j3;
																											solution.basesol[1].foffset = j4;
																											solution.basesol[2].foffset = j5;
																											solution.basesol[3].foffset = j6;
																											solution.basesol[4].foffset = j7;
																											solution.basesol[5].foffset = j8;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j4array[1], cj4array[1], sj4array[1];
																							bool j4valid[1]={false};
																							j4array[0]=IKatan2(((gconst13)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst13)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																							sj4array[0]=IKsin(j4array[0]);
																							cj4array[0]=IKcos(j4array[0]);
																							if( j4array[0] > IKPI )
																							{
																								j4array[0]-=IK2PI;
																							}
																							else if( j4array[0] < -IKPI )
																							{
																								j4array[0]+=IK2PI;
																							}
																							j4valid[0] = true;
																							for(int ij4 = 0; ij4 < 1; ++ij4)
																							{
																								if( !j4valid[ij4] )
																								{
																									continue;
																								}
																								j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j3;
																									solution.basesol[1].foffset = j4;
																									solution.basesol[2].foffset = j5;
																									solution.basesol[3].foffset = j6;
																									solution.basesol[4].foffset = j7;
																									solution.basesol[5].foffset = j8;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}

																			} else
																			{
																				evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
																				evalcond[1]=((-0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																				evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
																				evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																				evalcond[4]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																				evalcond[5]=((-0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
																				evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																				evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																				evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																				if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																				{
																					{
																						IKReal dummyeval[1];
																						IKReal gconst14;
																						gconst14=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																						dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							continue;

																						} else
																						{
																							{
																								IKReal j4array[1], cj4array[1], sj4array[1];
																								bool j4valid[1]={false};
																								j4array[0]=IKatan2(((gconst14)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst14)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																								sj4array[0]=IKsin(j4array[0]);
																								cj4array[0]=IKcos(j4array[0]);
																								if( j4array[0] > IKPI )
																								{
																									j4array[0]-=IK2PI;
																								}
																								else if( j4array[0] < -IKPI )
																								{
																									j4array[0]+=IK2PI;
																								}
																								j4valid[0] = true;
																								for(int ij4 = 0; ij4 < 1; ++ij4)
																								{
																									if( !j4valid[ij4] )
																									{
																										continue;
																									}
																									j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																									{
																										vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																										solution.basesol.resize(6);
																										solution.basesol[0].foffset = j3;
																										solution.basesol[1].foffset = j4;
																										solution.basesol[2].foffset = j5;
																										solution.basesol[3].foffset = j6;
																										solution.basesol[4].foffset = j7;
																										solution.basesol[5].foffset = j8;
																										solution.vfree.resize(0);
																									}
																								}
																							}

																						}

																					}

																				} else
																				{
																					if( 1 )
																					{
																						continue;

																					} else
																					{
																					}
																				}
																			}
																		}

																	} else
																	{
																		{
																			IKReal j4array[1], cj4array[1], sj4array[1];
																			bool j4valid[1]={false};
																			j4array[0]=IKatan2(((gconst12)*(((((cj5)*(r20)*(sj8)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj5)*(cj8)*(r21)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))))), ((gconst12)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))))));
																			sj4array[0]=IKsin(j4array[0]);
																			cj4array[0]=IKcos(j4array[0]);
																			if( j4array[0] > IKPI )
																			{
																				j4array[0]-=IK2PI;
																			}
																			else if( j4array[0] < -IKPI )
																			{
																				j4array[0]+=IK2PI;
																			}
																			j4valid[0] = true;
																			for(int ij4 = 0; ij4 < 1; ++ij4)
																			{
																				if( !j4valid[ij4] )
																				{
																					continue;
																				}
																				j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																				{
																					vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																					solution.basesol.resize(6);
																					solution.basesol[0].foffset = j3;
																					solution.basesol[1].foffset = j4;
																					solution.basesol[2].foffset = j5;
																					solution.basesol[3].foffset = j6;
																					solution.basesol[4].foffset = j7;
																					solution.basesol[5].foffset = j8;
																					solution.vfree.resize(0);
																				}
																			}
																		}

																	}

																}
															}
														}

													}

												}

											} else
											{
												{
													IKReal j5array[1], cj5array[1], sj5array[1];
													bool j5valid[1]={false};
													j5array[0]=IKatan2(((((IKabs(sj6) != 0)?((IKReal)1/(sj6)):(IKReal)1.0e30))*(((((0.120000000000000)*(sj6)))+(((-0.380000000000000)*(cj6)))+(((-4.00000000000000)*(cj8)*(npy)))+(((-4.00000000000000)*(npx)*(sj8)))))), ((-0.940000000000000)+(((-0.360000000000000)*(cj7)))+(((-4.00000000000000)*(cj7)*(npy)*(sj8)))+(((4.00000000000000)*(cj7)*(cj8)*(npx)))+(((4.00000000000000)*(npz)*(sj7)))));
													sj5array[0]=IKsin(j5array[0]);
													cj5array[0]=IKcos(j5array[0]);
													if( j5array[0] > IKPI )
													{
														j5array[0]-=IK2PI;
													}
													else if( j5array[0] < -IKPI )
													{
														j5array[0]+=IK2PI;
													}
													j5valid[0] = true;
													for(int ij5 = 0; ij5 < 1; ++ij5)
													{
														if( !j5valid[ij5] )
														{
															continue;
														}
														j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

														{
															IKReal dummyeval[1];
															IKReal gconst12;
															gconst12=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
															dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
															{
																{
																	IKReal evalcond[9];
																	evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
																	evalcond[1]=((0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																	evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
																	evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																	evalcond[4]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																	evalcond[5]=((0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
																	evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																	evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																	evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																	if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																	{
																		{
																			IKReal dummyeval[1];
																			IKReal gconst13;
																			gconst13=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																			dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				{
																					IKReal dummyeval[1];
																					dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								continue;

																							} else
																							{
																								{
																									IKReal j4array[1], cj4array[1], sj4array[1];
																									bool j4valid[1]={false};
																									IKReal x810=(cj5)*(cj5);
																									IKReal x811=(sj5)*(sj5);
																									IKReal x812=((x810)+(x811));
																									j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x812) != 0)?((IKReal)1/(x812)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x812) != 0)?((IKReal)1/(x812)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																									sj4array[0]=IKsin(j4array[0]);
																									cj4array[0]=IKcos(j4array[0]);
																									if( j4array[0] > IKPI )
																									{
																										j4array[0]-=IK2PI;
																									}
																									else if( j4array[0] < -IKPI )
																									{
																										j4array[0]+=IK2PI;
																									}
																									j4valid[0] = true;
																									for(int ij4 = 0; ij4 < 1; ++ij4)
																									{
																										if( !j4valid[ij4] )
																										{
																											continue;
																										}
																										j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j3;
																											solution.basesol[1].foffset = j4;
																											solution.basesol[2].foffset = j5;
																											solution.basesol[3].foffset = j6;
																											solution.basesol[4].foffset = j7;
																											solution.basesol[5].foffset = j8;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j4array[1], cj4array[1], sj4array[1];
																							bool j4valid[1]={false};
																							IKReal x813=(cj5)*(cj5);
																							IKReal x814=(sj5)*(sj5);
																							IKReal x815=((x814)+(x813));
																							j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x815) != 0)?((IKReal)1/(x815)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x815) != 0)?((IKReal)1/(x815)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																							sj4array[0]=IKsin(j4array[0]);
																							cj4array[0]=IKcos(j4array[0]);
																							if( j4array[0] > IKPI )
																							{
																								j4array[0]-=IK2PI;
																							}
																							else if( j4array[0] < -IKPI )
																							{
																								j4array[0]+=IK2PI;
																							}
																							j4valid[0] = true;
																							for(int ij4 = 0; ij4 < 1; ++ij4)
																							{
																								if( !j4valid[ij4] )
																								{
																									continue;
																								}
																								j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j3;
																									solution.basesol[1].foffset = j4;
																									solution.basesol[2].foffset = j5;
																									solution.basesol[3].foffset = j6;
																									solution.basesol[4].foffset = j7;
																									solution.basesol[5].foffset = j8;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}

																			} else
																			{
																				{
																					IKReal j4array[1], cj4array[1], sj4array[1];
																					bool j4valid[1]={false};
																					j4array[0]=IKatan2(((gconst13)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst13)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																					sj4array[0]=IKsin(j4array[0]);
																					cj4array[0]=IKcos(j4array[0]);
																					if( j4array[0] > IKPI )
																					{
																						j4array[0]-=IK2PI;
																					}
																					else if( j4array[0] < -IKPI )
																					{
																						j4array[0]+=IK2PI;
																					}
																					j4valid[0] = true;
																					for(int ij4 = 0; ij4 < 1; ++ij4)
																					{
																						if( !j4valid[ij4] )
																						{
																							continue;
																						}
																						j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																						{
																							vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																							solution.basesol.resize(6);
																							solution.basesol[0].foffset = j3;
																							solution.basesol[1].foffset = j4;
																							solution.basesol[2].foffset = j5;
																							solution.basesol[3].foffset = j6;
																							solution.basesol[4].foffset = j7;
																							solution.basesol[5].foffset = j8;
																							solution.vfree.resize(0);
																						}
																					}
																				}

																			}

																		}

																	} else
																	{
																		evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
																		evalcond[1]=((-0.0950000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																		evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
																		evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																		evalcond[4]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																		evalcond[5]=((-0.0300000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
																		evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																		evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																		evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																		if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																		{
																			{
																				IKReal dummyeval[1];
																				IKReal gconst14;
																				gconst14=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																				dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																				if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																				{
																					continue;

																				} else
																				{
																					{
																						IKReal j4array[1], cj4array[1], sj4array[1];
																						bool j4valid[1]={false};
																						j4array[0]=IKatan2(((gconst14)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst14)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																						sj4array[0]=IKsin(j4array[0]);
																						cj4array[0]=IKcos(j4array[0]);
																						if( j4array[0] > IKPI )
																						{
																							j4array[0]-=IK2PI;
																						}
																						else if( j4array[0] < -IKPI )
																						{
																							j4array[0]+=IK2PI;
																						}
																						j4valid[0] = true;
																						for(int ij4 = 0; ij4 < 1; ++ij4)
																						{
																							if( !j4valid[ij4] )
																							{
																								continue;
																							}
																							j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																							{
																								vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																								solution.basesol.resize(6);
																								solution.basesol[0].foffset = j3;
																								solution.basesol[1].foffset = j4;
																								solution.basesol[2].foffset = j5;
																								solution.basesol[3].foffset = j6;
																								solution.basesol[4].foffset = j7;
																								solution.basesol[5].foffset = j8;
																								solution.vfree.resize(0);
																							}
																						}
																					}

																				}

																			}

																		} else
																		{
																			if( 1 )
																			{
																				continue;

																			} else
																			{
																			}
																		}
																	}
																}

															} else
															{
																{
																	IKReal j4array[1], cj4array[1], sj4array[1];
																	bool j4valid[1]={false};
																	j4array[0]=IKatan2(((gconst12)*(((((cj5)*(r20)*(sj8)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj5)*(cj8)*(r21)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))))), ((gconst12)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))))));
																	sj4array[0]=IKsin(j4array[0]);
																	cj4array[0]=IKcos(j4array[0]);
																	if( j4array[0] > IKPI )
																	{
																		j4array[0]-=IK2PI;
																	}
																	else if( j4array[0] < -IKPI )
																	{
																		j4array[0]+=IK2PI;
																	}
																	j4valid[0] = true;
																	for(int ij4 = 0; ij4 < 1; ++ij4)
																	{
																		if( !j4valid[ij4] )
																		{
																			continue;
																		}
																		j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																		{
																			vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																			solution.basesol.resize(6);
																			solution.basesol[0].foffset = j3;
																			solution.basesol[1].foffset = j4;
																			solution.basesol[2].foffset = j5;
																			solution.basesol[3].foffset = j6;
																			solution.basesol[4].foffset = j7;
																			solution.basesol[5].foffset = j8;
																			solution.vfree.resize(0);
																		}
																	}
																}

															}

														}
													}
												}

											}

										}
									}
								}

							}

						}
					}
				}
				return vsolutions.size()>0;
			}

			static inline bool checkconsistency8(const IKReal* Breal)
			{
				IKReal norm = 0.1;
				for(int i = 0; i < 7; ++i)
				{
					norm += IKabs(Breal[i]);
				}
								 // have to increase the threshold since many computations are involved
				IKReal tol = 1e-5*norm;
				return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
			}
			/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
			///
			/// matcoeffs is of length 54*3, for 3 matrices
			static inline void solvedialyticpoly8qep(const IKReal* matcoeffs, IKReal* rawroots, int& numroots)
			{
				const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
				IKReal IKFAST_ALIGNED16(M[16*16]) = {0};
				IKReal IKFAST_ALIGNED16(A[8*8]);
				IKReal IKFAST_ALIGNED16(work[16*16*15]);
				int ipiv[8];
				int info, coeffindex;
				const int worksize=16*16*15;
				const int matrixdim = 8;
				const int matrixdim2 = 16;
				numroots = 0;
				// first setup M = [0 I; -C -B] and A
				coeffindex = 0;
				for(int j = 0; j < 4; ++j)
				{
					for(int k = 0; k < 6; ++k)
					{
						M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
					}
				}
				for(int j = 0; j < 4; ++j)
				{
					for(int k = 0; k < 6; ++k)
					{
						M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
					}
				}
				for(int j = 0; j < 4; ++j)
				{
					for(int k = 0; k < 6; ++k)
					{
						A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
					}
					for(int k = 0; k < 2; ++k)
					{
						A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
					}
				}
				const IKReal lfpossibilities[4][4] =
				{
					{
						1,-1,1,1
					}
					,
					{
						1,0,-2,1
					}
					,
					{
						1,1,2,0
					}
					,
					{
						1,-1,4,1
					}
				};
				int lfindex = -1;
				bool bsingular = true;
				do
				{
					dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
					if( info == 0 )
					{
						bsingular = false;
						for(int j = 0; j < matrixdim; ++j)
						{
							if( IKabs(A[j*matrixdim+j]) < 100*tol )
							{
								bsingular = true;
								break;
							}
						}
						if( !bsingular )
						{
							break;
						}
					}
					if( lfindex == 3 )
					{
						break;
					}
					// transform by the linear functional
					lfindex++;
					const IKReal* lf = lfpossibilities[lfindex];
					// have to reinitialize A
					coeffindex = 0;
					for(int j = 0; j < 4; ++j)
					{
						for(int k = 0; k < 6; ++k)
						{
							IKReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
							A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
							M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
							M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
							coeffindex++;
						}
						for(int k = 0; k < 2; ++k)
						{
							A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
						}
					}
				} while(lfindex<4);

				if( bsingular )
				{
					return;
				}
				dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
				if( info != 0 )
				{
					return;
				}

				// set identity in upper corner
				for(int j = 0; j < matrixdim; ++j)
				{
					M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
				}
				IKReal IKFAST_ALIGNED16(wr[16]);
				IKReal IKFAST_ALIGNED16(wi[16]);
				IKReal IKFAST_ALIGNED16(vr[16*16]);
				int one=1;
				dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
				if( info != 0 )
				{
					return;
				}
				IKReal Breal[matrixdim-1];
				for(int i = 0; i < matrixdim2; ++i)
				{
					if( IKabs(wi[i]) < tol*100 )
					{
						IKReal* ev = vr+matrixdim2*i;
						if( IKabs(wr[i]) > 1 )
						{
							ev += matrixdim;
						}
						// consistency has to be checked!!
						if( IKabs(ev[0]) < tol )
						{
							continue;
						}
						IKReal iconst = 1/ev[0];
						for(int j = 1; j < matrixdim; ++j)
						{
							Breal[j-1] = ev[j]*iconst;
						}
						if( checkconsistency8(Breal) )
						{
							if( lfindex >= 0 )
							{
								const IKReal* lf = lfpossibilities[lfindex];
								rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
							}
							else
							{
								rawroots[numroots++] = wr[i];
							}
							bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
							bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
							if( bsmall0 && bsmall1 )
							{
								rawroots[numroots++] = ev[2]/ev[0];
								rawroots[numroots++] = ev[1]/ev[0];
							}
							else if( bsmall0 && !bsmall1 )
							{
								rawroots[numroots++] = ev[3]/ev[1];
								rawroots[numroots++] = ev[1]/ev[0];
							}
							else if( !bsmall0 && bsmall1 )
							{
								rawroots[numroots++] = ev[6]/ev[4];
								rawroots[numroots++] = ev[7]/ev[6];
							}
							else if( !bsmall0 && !bsmall1 )
							{
								rawroots[numroots++] = ev[7]/ev[5];
								rawroots[numroots++] = ev[7]/ev[6];
							}
						}
					}
				}
			}
	};

	/// solves the inverse kinematics equations.
	/// \param pfree is an array specifying the free joints of the chain.
	IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions)
	{
		IKSolver solver;
		return solver.ik(eetrans,eerot,pfree,vsolutions);
	}

	IKFAST_API const char* getKinematicsHash() { return "c485cd750318d2b4eac8565f01548f9e"; }

	#ifdef IKFAST_NAMESPACE
}								 // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
	if( argc != 12+getNumFreeParameters()+1 )
	{
		printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
			"Returns the ik solutions given the transformation of the end effector specified by\n"
			"a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
			"There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
		return 1;
	}

	std::vector<IKSolution> vsolutions;
	std::vector<IKReal> vfree(getNumFreeParameters());
	IKReal eerot[9],eetrans[3];
	eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
	eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
	eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
	for(std::size_t i = 0; i < vfree.size(); ++i)
		vfree[i] = atof(argv[13+i]);
	bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

	if( !bSuccess )
	{
		fprintf(stderr,"Failed to get ik solution\n");
		return -1;
	}

	printf("Found %d ik solutions:\n", (int)vsolutions.size());
	std::vector<IKReal> sol(getNumJoints());
	for(std::size_t i = 0; i < vsolutions.size(); ++i)
	{
		printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
		std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
		vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
		for( std::size_t j = 0; j < sol.size(); ++j)
			printf("%.15f, ", sol[j]);
		printf("\n");
	}
	return 0;
}
#endif
