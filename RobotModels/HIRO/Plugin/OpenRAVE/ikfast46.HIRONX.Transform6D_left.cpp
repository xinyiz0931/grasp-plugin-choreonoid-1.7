/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 46 generated on 2011-09-17 03:37:39.172153
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IKReal)6.28318530717959)
#define IKPI  ((IKReal)3.14159265358979)
#define IKPI_2  ((IKReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

#ifdef IKFAST_REAL
typedef IKFAST_REAL IKReal;
#else
typedef double IKReal;
#endif

class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(std::size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IKReal)0.000001)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return 1.0f;
    }
    else if( f < 0 ) {
        return -1.0f;
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81;
x0=IKcos(j[0]);
x1=IKsin(j[0]);
x2=IKsin(j[3]);
x3=IKcos(j[3]);
x4=IKcos(j[1]);
x5=IKcos(j[2]);
x6=((x0)*(x4)*(x5));
x7=IKsin(j[1]);
x8=IKsin(j[2]);
x9=((x0)*(x7)*(x8));
x10=IKsin(j[5]);
x11=IKsin(j[4]);
x12=((x1)*(x2));
x13=((x6)+(((-1.00000000000000)*(x9))));
x14=((x13)*(x3));
x15=((((-1.00000000000000)*(x14)))+(x12));
x16=((x11)*(x15));
x17=IKcos(j[4]);
x18=((x0)*(x4)*(x8));
x19=((x0)*(x5)*(x7));
x20=((x19)+(x18));
x21=((-1.00000000000000)*(x20));
x22=((x17)*(x21));
x23=((x16)+(x22));
x24=((-1.00000000000000)*(x23));
x25=IKcos(j[5]);
x26=((x9)+(((-1.00000000000000)*(x6))));
x27=((x2)*(x26));
x28=((x1)*(x3));
x29=((0.0900000000000000)*(x19));
x30=((0.0900000000000000)*(x18));
x31=((x30)+(x29));
x32=((0.0900000000000000)*(x12));
x33=((0.0900000000000000)*(x14));
x34=((((-1.00000000000000)*(x33)))+(x32));
x35=((x1)*(x4)*(x5));
x36=((x1)*(x7)*(x8));
x37=((x4)*(x8));
x38=((x5)*(x7));
x39=((x38)+(x37));
x40=((x7)*(x8));
x41=((x4)*(x5));
x42=((((-1.00000000000000)*(x41)))+(x40));
x43=((x17)*(x42));
x44=((x11)*(x3)*(x39));
x45=((x44)+(x43));
x46=((-1.00000000000000)*(x45));
x47=((((-1.00000000000000)*(x35)))+(x36));
x48=((x2)*(x47));
x49=((x0)*(x3));
x50=((x48)+(x49));
x51=((x0)*(x2));
x52=((((-1.00000000000000)*(x36)))+(x35));
x53=((x3)*(x52));
x54=((x51)+(x53));
x55=((-1.00000000000000)*(x54));
x56=((x11)*(x55));
x57=((x1)*(x37));
x58=((x1)*(x38));
x59=((x58)+(x57));
x60=((-1.00000000000000)*(x59));
x61=((x17)*(x60));
x62=((x56)+(x61));
x63=((-1.00000000000000)*(x62));
x64=((0.0900000000000000)*(x51));
x65=((0.0900000000000000)*(x53));
x66=((x64)+(x65));
x67=((-1.00000000000000)*(x66));
x68=((0.0900000000000000)*(x40));
x69=((0.0900000000000000)*(x41));
x70=((0.0900000000000000)*(x38));
x71=((0.0900000000000000)*(x37));
x72=((x71)+(x70));
x73=((0.0900000000000000)*(x57));
x74=((0.0900000000000000)*(x58));
x75=((x74)+(x73));
x76=((-1.00000000000000)*(x39));
x77=((-1.00000000000000)*(x50));
x78=((((-1.00000000000000)*(x40)))+(x41));
x79=((x69)+(((-1.00000000000000)*(x68))));
x80=((x68)+(((-1.00000000000000)*(x69))));
x81=((-1.00000000000000)*(x75));
eerot[0]=((((x10)*(((((-1.00000000000000)*(x27)))+(x28)))))+(((x24)*(x25))));
eerot[1]=((((x25)*(((((-1.00000000000000)*(x28)))+(x27)))))+(((x10)*(x24))));
eerot[2]=((((x11)*(x20)))+(((x15)*(x17))));
eetrans[0]=((((-0.250000000000000)*(x0)*(x7)))+(((-0.0300000000000000)*(x6)))+(((0.0300000000000000)*(x9)))+(((x17)*(x34)))+(((x11)*(x34)))+(((x11)*(x31)))+(((-0.235000000000000)*(x19)))+(((-0.235000000000000)*(x18)))+(((-0.0950000000000000)*(x1)))+(((-1.00000000000000)*(x17)*(x31))));
eerot[3]=((((0.258820142606703)*(x10)*(x2)*(x76)))+(((0.965925532213041)*(x10)*(x77)))+(((0.258820142606703)*(x25)*(x46)))+(((0.965925532213041)*(x25)*(x63))));
eerot[4]=((((0.965925532213041)*(x25)*(x50)))+(((0.965925532213041)*(x10)*(x63)))+(((0.258820142606703)*(x10)*(x46)))+(((0.258820142606703)*(x2)*(x25)*(x39))));
eerot[5]=((((0.258820142606703)*(x17)*(x3)*(x39)))+(((0.258820142606703)*(x11)*(x78)))+(((0.965925532213041)*(x17)*(x55)))+(((0.965925532213041)*(x11)*(x59))));
eetrans[1]=((0.145000000000000)+(((-0.0608227335125751)*(x41)))+(((0.258820142606703)*(x11)*(x3)*(x72)))+(((-0.226992500070065)*(x58)))+(((-0.226992500070065)*(x57)))+(((0.0608227335125751)*(x40)))+(((0.258820142606703)*(x11)*(x79)))+(((0.00776460427820108)*(x38)))+(((0.00776460427820108)*(x37)))+(((0.0917629255602389)*(x0)))+(((0.965925532213041)*(x17)*(x67)))+(((0.965925532213041)*(x11)*(x75)))+(((0.965925532213041)*(x17)*(x81)))+(((0.258820142606703)*(x17)*(x80)))+(((0.0289777659663912)*(x36)))+(((-0.0647050356516757)*(x4)))+(((-0.241481383053260)*(x1)*(x7)))+(((0.965925532213041)*(x11)*(x67)))+(((0.258820142606703)*(x17)*(x3)*(x72)))+(((-0.0289777659663912)*(x35))));
eerot[6]=((((0.965925532213041)*(x10)*(x2)*(x76)))+(((0.965925532213041)*(x25)*(x46)))+(((-0.258820142606703)*(x10)*(x77)))+(((-0.258820142606703)*(x25)*(x63))));
eerot[7]=((((0.965925532213041)*(x10)*(x46)))+(((0.965925532213041)*(x2)*(x25)*(x39)))+(((-0.258820142606703)*(x10)*(x63)))+(((-0.258820142606703)*(x25)*(x50))));
eerot[8]=((((0.965925532213041)*(x11)*(x78)))+(((-0.258820142606703)*(x17)*(x55)))+(((-0.258820142606703)*(x11)*(x59)))+(((0.965925532213041)*(x17)*(x3)*(x39))));
eetrans[2]=((0.370296000000000)+(((0.965925532213041)*(x11)*(x3)*(x72)))+(((0.226992500070065)*(x40)))+(((-0.226992500070065)*(x41)))+(((-0.258820142606703)*(x17)*(x81)))+(((0.00776460427820108)*(x35)))+(((-0.0245879135476367)*(x0)))+(((0.0608227335125751)*(x57)))+(((0.0608227335125751)*(x58)))+(((0.965925532213041)*(x11)*(x79)))+(((0.965925532213041)*(x17)*(x80)))+(((-0.258820142606703)*(x11)*(x75)))+(((-0.258820142606703)*(x17)*(x67)))+(((0.0289777659663912)*(x38)))+(((0.0289777659663912)*(x37)))+(((0.0647050356516757)*(x1)*(x7)))+(((-0.00776460427820108)*(x36)))+(((-0.258820142606703)*(x11)*(x67)))+(((0.965925532213041)*(x17)*(x3)*(x72)))+(((-0.241481383053260)*(x4))));
}

IKFAST_API int getNumFreeParameters() { return 0; }
IKFAST_API int* getFreeParameters() { return NULL; }
IKFAST_API int getNumJoints() { return 6; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

class IKSolver {
public:
IKReal j13,cj13,sj13,htj13,j14,cj14,sj14,htj14,j15,cj15,sj15,htj15,j16,cj16,sj16,htj16,j17,cj17,sj17,htj17,j18,cj18,sj18,htj18,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
vsolutions.resize(0); vsolutions.reserve(8);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.00000000000000)*(r00));
new_r01=r01;
new_r02=((-1.00000000000000)*(r02));
new_px=((((-0.0900000000000000)*(r02)))+(px));
new_r10=((((0.258820142606703)*(r20)))+(((-0.965925532213041)*(r10))));
new_r11=((((-0.258820142606703)*(r21)))+(((0.965925532213041)*(r11))));
new_r12=((((0.258820142606703)*(r22)))+(((-0.965925532213041)*(r12))));
new_py=((-0.0442191386441994)+(((0.965925532213041)*(py)))+(((-0.258820142606703)*(pz)))+(((-0.0869332978991737)*(r12)))+(((0.0232938128346032)*(r22))));
new_r20=((((-0.965925532213041)*(r20)))+(((-0.258820142606703)*(r10))));
new_r21=((((0.965925532213041)*(r21)))+(((0.258820142606703)*(r11))));
new_r22=((((-0.965925532213041)*(r22)))+(((-0.258820142606703)*(r12))));
new_pz=((-0.395207281554332)+(((-0.0232938128346032)*(r12)))+(((0.965925532213041)*(pz)))+(((0.258820142606703)*(py)))+(((-0.0869332978991737)*(r22))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
IKReal op[72], zeror[48];
int numroots;
IKReal x82=((0.0600000000000000)*(npz));
IKReal x83=((0.650000000000000)*(npx));
IKReal x84=((0.0600000000000000)*(npy));
IKReal x85=((0.0950000000000000)*(r22));
IKReal x86=((0.120000000000000)*(npx));
IKReal x87=((-1.30000000000000)*(npy));
IKReal x88=((-0.0950000000000000)*(r21));
IKReal x89=((rxp0_2)+(x85));
IKReal x90=((-0.190000000000000)*(r20));
IKReal x91=((2.00000000000000)*(rxp1_2));
IKReal x92=((0.0950000000000000)*(r21));
IKReal x93=((0.940000000000000)*(npz));
IKReal x94=((0.190000000000000)*(r20));
IKReal x95=((2.00000000000000)*(rxp2_2));
IKReal x96=((0.180000000000000)*(r21));
IKReal x97=((0.360000000000000)*(r20));
IKReal x98=((0.380000000000000)*(r21));
IKReal x99=((0.00570000000000000)+(x84));
IKReal x100=((0.290000000000000)*(npx));
IKReal x101=((0.00570000000000000)+(((-1.00000000000000)*(x84))));
IKReal x102=((rxp0_2)+(((-1.00000000000000)*(x85))));
IKReal x103=((-1.00000000000000)*(x89));
IKReal x104=((-0.0114000000000000)+(x99));
IKReal x105=((0.580000000000000)*(npy));
IKReal x106=((-0.00570000000000000)+(((-1.00000000000000)*(x84))));
IKReal x107=((pp)+(x82));
IKReal x108=((-2.00000000000000)*(rxp1_2));
IKReal x109=((x85)+(((-1.00000000000000)*(rxp0_2))));
op[0]=((-0.0350000000000000)+(((-1.00000000000000)*(x107)))+(x83));
op[1]=x99;
op[2]=x87;
op[3]=x86;
op[4]=((-0.0350000000000000)+(((-1.00000000000000)*(x107)))+(((-1.00000000000000)*(x83))));
op[5]=x101;
op[6]=x109;
op[7]=x88;
op[8]=x91;
op[9]=x90;
op[10]=x89;
op[11]=x92;
op[12]=x104;
op[13]=((-0.0350000000000000)+(x82)+(x83)+(((-1.00000000000000)*(pp))));
op[14]=x86;
op[15]=x87;
op[16]=x106;
op[17]=((-0.0350000000000000)+(x82)+(((-1.00000000000000)*(x83)))+(((-1.00000000000000)*(pp))));
op[18]=x88;
op[19]=x103;
op[20]=x90;
op[21]=x91;
op[22]=x92;
op[23]=x102;
op[24]=((-0.0108000000000000)+(x86)+(x93));
op[25]=0;
op[26]=((-0.240000000000000)*(npy));
op[27]=0;
op[28]=((-0.0108000000000000)+(x93)+(((-1.00000000000000)*(x86))));
op[29]=0;
op[30]=((x96)+(((-1.00000000000000)*(x94)))+(((-1.00000000000000)*(x95))));
op[31]=0;
op[32]=((x98)+(x97));
op[33]=0;
op[34]=((x94)+(((-1.00000000000000)*(x96)))+(((-1.00000000000000)*(x95))));
op[35]=0;
op[36]=0;
op[37]=((0.0108000000000000)+(x93)+(((-1.00000000000000)*(x86))));
op[38]=0;
op[39]=((0.240000000000000)*(npy));
op[40]=0;
op[41]=((0.0108000000000000)+(x86)+(x93));
op[42]=0;
op[43]=((x94)+(x96)+(((-1.00000000000000)*(x95))));
op[44]=0;
op[45]=((x97)+(((-1.00000000000000)*(x98))));
op[46]=0;
op[47]=((((-1.00000000000000)*(x96)))+(((-1.00000000000000)*(x94)))+(((-1.00000000000000)*(x95))));
op[48]=((0.0496000000000000)+(((-1.00000000000000)*(x100)))+(x82)+(((-1.00000000000000)*(pp))));
op[49]=x99;
op[50]=x105;
op[51]=x86;
op[52]=((0.0496000000000000)+(x100)+(x82)+(((-1.00000000000000)*(pp))));
op[53]=x101;
op[54]=x102;
op[55]=x88;
op[56]=x108;
op[57]=x90;
op[58]=x103;
op[59]=x92;
op[60]=x104;
op[61]=((0.0496000000000000)+(((-1.00000000000000)*(x100)))+(((-1.00000000000000)*(x107))));
op[62]=x86;
op[63]=x105;
op[64]=x106;
op[65]=((0.0496000000000000)+(((-1.00000000000000)*(x107)))+(x100));
op[66]=x88;
op[67]=x89;
op[68]=x90;
op[69]=x108;
op[70]=x92;
op[71]=x109;
solvedialyticpoly8qep(op,zeror,numroots);
IKReal j17array[16], cj17array[16], sj17array[16], j18array[16], cj18array[16], sj18array[16], j16array[16], cj16array[16], sj16array[16];
int numsolutions = 0;
for(int ij17 = 0; ij17 < numroots; ij17 += 3)
{
IKReal htj17 = zeror[ij17+0], htj18 = zeror[ij17+1], htj16 = zeror[ij17+2];
j17array[numsolutions]=((2.00000000000000)*(atan(htj17)));
j18array[numsolutions]=((2.00000000000000)*(atan(htj18)));
j16array[numsolutions]=((2.00000000000000)*(atan(htj16)));
IKReal x110=(htj17)*(htj17);
IKReal x111=(htj18)*(htj18);
IKReal x112=(htj16)*(htj16);
cj17array[numsolutions]=((((IKabs(((1.00000000000000)+(x110))) != 0)?((IKReal)1/(((1.00000000000000)+(x110)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x110))))));
cj18array[numsolutions]=((((IKabs(((1.00000000000000)+(x111))) != 0)?((IKReal)1/(((1.00000000000000)+(x111)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x111))))));
cj16array[numsolutions]=((((IKabs(((1.00000000000000)+(x112))) != 0)?((IKReal)1/(((1.00000000000000)+(x112)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x112))))));
sj17array[numsolutions]=((2.00000000000000)*(htj17)*(((IKabs(((1.00000000000000)+((htj17)*(htj17)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj17)*(htj17))))):(IKReal)1.0e30)));
sj18array[numsolutions]=((2.00000000000000)*(htj18)*(((IKabs(((1.00000000000000)+((htj18)*(htj18)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj18)*(htj18))))):(IKReal)1.0e30)));
sj16array[numsolutions]=((2.00000000000000)*(htj16)*(((IKabs(((1.00000000000000)+((htj16)*(htj16)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj16)*(htj16))))):(IKReal)1.0e30)));
if( j17array[numsolutions] > IKPI )
{
    j17array[numsolutions]-=IK2PI;
}
else if( j17array[numsolutions] < -IKPI )
{
    j17array[numsolutions]+=IK2PI;
}
if( j18array[numsolutions] > IKPI )
{
    j18array[numsolutions]-=IK2PI;
}
else if( j18array[numsolutions] < -IKPI )
{
    j18array[numsolutions]+=IK2PI;
}
if( j16array[numsolutions] > IKPI )
{
    j16array[numsolutions]-=IK2PI;
}
else if( j16array[numsolutions] < -IKPI )
{
    j16array[numsolutions]+=IK2PI;
}
bool valid = true;
for( int kj17 = 0; kj17 < numsolutions; ++kj17)
{
    if( IKabs(cj17array[kj17]-cj17array[numsolutions]) < 0.00001 && IKabs(sj17array[kj17]-sj17array[numsolutions]) < 0.00001 &&IKabs(cj18array[kj17]-cj18array[numsolutions]) < 0.00001 && IKabs(sj18array[kj17]-sj18array[numsolutions]) < 0.00001 &&IKabs(cj16array[kj17]-cj16array[numsolutions]) < 0.00001 && IKabs(sj16array[kj17]-sj16array[numsolutions]) < 0.00001 && 1 )
    {
        valid=false; break;
    }
}
if( valid ) { numsolutions++; }
}
for(int ij17 = 0; ij17 < numsolutions; ++ij17)
    {
    j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];

    j18 = j18array[ij17]; cj18 = cj18array[ij17]; sj18 = sj18array[ij17];

    j16 = j16array[ij17]; cj16 = cj16array[ij17]; sj16 = sj16array[ij17];

{
IKReal dummyeval[1];
IKReal gconst0;
IKReal x113=(cj18)*(cj18);
IKReal x114=(sj18)*(sj18);
gconst0=IKsign(((((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x114)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x113)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11)))+(((r01)*(r10)*(sj17)*(x114)))+(((r01)*(r10)*(sj17)*(x113)))));
IKReal x115=(cj18)*(cj18);
IKReal x116=(sj18)*(sj18);
dummyeval[0]=((((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x116)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x115)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11)))+(((r01)*(r10)*(sj17)*(x116)))+(((r01)*(r10)*(sj17)*(x115))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj16;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj16;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[3];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j16)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(cj18)*(r20)*(sj17)))+(((cj17)*(r22)))+(((r21)*(sj17)*(sj18))));
evalcond[2]=((-0.0950000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
j15array[0]=IKatan2(((0.120000000000000)+(((-4.00000000000000)*(cj18)*(npy)))+(((-4.00000000000000)*(npx)*(sj18)))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IKReal dummyeval[1];
IKReal gconst19;
gconst19=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x117=(cj18)*(cj18);
IKReal x118=(sj18)*(sj18);
dummyeval[0]=((((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x117)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x118)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11)))+(((r01)*(r10)*(sj17)*(x117)))+(((r01)*(r10)*(sj17)*(x118))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x119=(sj17)*(sj17);
IKReal x120=(cj17)*(cj17);
dummyeval[0]=((((cj18)*(r00)*(r12)*(x119)))+(((cj18)*(r00)*(r12)*(x120)))+(((-1.00000000000000)*(r01)*(r12)*(sj18)*(x120)))+(((-1.00000000000000)*(cj18)*(r02)*(r10)*(x119)))+(((-1.00000000000000)*(r01)*(r12)*(sj18)*(x119)))+(((r02)*(r11)*(sj18)*(x120)))+(((r02)*(r11)*(sj18)*(x119)))+(((-1.00000000000000)*(cj18)*(r02)*(r10)*(x120))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x121=(sj17)*(sj17);
IKReal x122=(cj17)*(cj17);
IKReal x123=((r01)*(r12)*(sj18)*(x122));
IKReal x124=((cj18)*(r02)*(r10)*(x122));
IKReal x125=((r01)*(r12)*(sj18)*(x121));
IKReal x126=((cj18)*(r02)*(r10)*(x121));
IKReal x127=((x126)+(x124)+(x125)+(x123));
IKReal x128=((cj18)*(r00)*(r12)*(x122));
IKReal x129=((cj18)*(r00)*(r12)*(x121));
IKReal x130=((r02)*(r11)*(sj18)*(x121));
IKReal x131=((r02)*(r11)*(sj18)*(x122));
IKReal x132=((x131)+(x130)+(x128)+(x129));
j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x127)))+(x132))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x127)))+(x132)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((x127)+(((-1.00000000000000)*(x132))))) != 0)?((IKReal)1/(((x127)+(((-1.00000000000000)*(x132)))))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[1];
IKReal gconst20;
gconst20=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst20)*(((((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst20)*(((((r20)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r21)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x133=(cj18)*(cj18);
IKReal x134=(sj18)*(sj18);
IKReal x135=((r00)*(r11)*(sj17)*(x133));
IKReal x136=((cj17)*(cj18)*(r01)*(r12));
IKReal x137=((r00)*(r11)*(sj17)*(x134));
IKReal x138=((cj17)*(r00)*(r12)*(sj18));
IKReal x139=((x135)+(x137)+(x136)+(x138));
IKReal x140=((r01)*(r10)*(sj17)*(x133));
IKReal x141=((r01)*(r10)*(sj17)*(x134));
IKReal x142=((cj17)*(r02)*(r10)*(sj18));
IKReal x143=((cj17)*(cj18)*(r02)*(r11));
IKReal x144=((x140)+(x141)+(x142)+(x143));
j13array[0]=IKatan2(((((IKabs(((x144)+(((-1.00000000000000)*(x139))))) != 0)?((IKReal)1/(((x144)+(((-1.00000000000000)*(x139)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))), ((((IKabs(((((-1.00000000000000)*(x144)))+(x139))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x144)))+(x139)))):(IKReal)1.0e30))*(((((cj18)*(r01)))+(((r00)*(sj18)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[1];
IKReal gconst20;
gconst20=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst20)*(((((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst20)*(((((r20)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r21)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst19)*(((((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst19)*(((((r20)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r21)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IKReal dummyeval[1];
IKReal x145=(cj18)*(cj18);
IKReal x146=(sj18)*(sj18);
dummyeval[0]=((((r01)*(r10)*(sj17)*(x145)))+(((r01)*(r10)*(sj17)*(x146)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x145)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x146)))+(((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x147=(sj18)*(sj18);
IKReal x148=(cj18)*(cj18);
dummyeval[0]=((((-2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((-1.00000000000000)*(x148)*((r11)*(r11))))+(((-2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((-1.00000000000000)*(x148)*((r01)*(r01))))+(((-1.00000000000000)*(x147)*((r00)*(r00))))+(((-1.00000000000000)*(x147)*((r10)*(r10)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x149=(cj18)*(cj18);
IKReal x150=(sj18)*(sj18);
dummyeval[0]=((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r00)*(r01)*(x149)))+(((cj17)*(r10)*(r11)*(x149)))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x150)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x150)))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((r00)*(r02)*(sj17)*(sj18)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x151=(cj18)*(cj18);
IKReal x152=(sj18)*(sj18);
IKReal x153=((cj17)*(r00)*(r01)*(x152));
IKReal x154=(r11)*(r11);
IKReal x155=((cj17)*(cj18)*(sj18)*(x154));
IKReal x156=(r01)*(r01);
IKReal x157=((cj17)*(cj18)*(sj18)*(x156));
IKReal x158=((cj17)*(r10)*(r11)*(x152));
IKReal x159=((x157)+(x155)+(x153)+(x158));
IKReal x160=(r10)*(r10);
IKReal x161=((cj17)*(cj18)*(sj18)*(x160));
IKReal x162=((cj18)*(r11)*(r12)*(sj17));
IKReal x163=((cj17)*(r10)*(r11)*(x151));
IKReal x164=(r00)*(r00);
IKReal x165=((cj17)*(cj18)*(sj18)*(x164));
IKReal x166=((cj17)*(r00)*(r01)*(x151));
IKReal x167=((r00)*(r02)*(sj17)*(sj18));
IKReal x168=((cj18)*(r01)*(r02)*(sj17));
IKReal x169=((r10)*(r12)*(sj17)*(sj18));
IKReal x170=((x168)+(x169)+(x162)+(x163)+(x161)+(x166)+(x167)+(x165));
j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x159)))+(x170))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x159)))+(x170)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj14)))+(((-1.00000000000000)*(cj15)*(r10)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj14)*(r10)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj14)*(cj18)*(r11)*(sj15)))))), ((((IKabs(((((-1.00000000000000)*(x170)))+(x159))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x170)))+(x159)))):(IKReal)1.0e30))*(((((cj14)*(cj18)*(r01)*(sj15)))+(((cj15)*(r00)*(sj14)*(sj18)))+(((cj15)*(cj18)*(r01)*(sj14)))+(((cj14)*(r00)*(sj15)*(sj18)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x171=(sj18)*(sj18);
IKReal x172=(cj18)*(cj18);
IKReal x173=(r10)*(r10);
IKReal x174=((x171)*(x173));
IKReal x175=(r00)*(r00);
IKReal x176=((x171)*(x175));
IKReal x177=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
IKReal x178=(r01)*(r01);
IKReal x179=((x172)*(x178));
IKReal x180=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
IKReal x181=(r11)*(r11);
IKReal x182=((x172)*(x181));
IKReal x183=((x179)+(x174)+(x177)+(x176)+(x180)+(x182));
j13array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x183) != 0)?((IKReal)1/(x183)):(IKReal)1.0e30))*(((((cj14)*(cj15)*(r10)*(sj18)))+(((-1.00000000000000)*(r10)*(sj14)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj14)*(sj15)))+(((cj14)*(cj15)*(cj18)*(r11)))))), ((((IKabs(x183) != 0)?((IKReal)1/(x183)):(IKReal)1.0e30))*(((((r00)*(sj14)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj14)*(cj15)*(cj18)*(r01)))+(((cj18)*(r01)*(sj14)*(sj15)))+(((-1.00000000000000)*(cj14)*(cj15)*(r00)*(sj18)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x184=(cj18)*(cj18);
IKReal x185=(sj18)*(sj18);
IKReal x186=((r00)*(r11)*(sj17)*(x184));
IKReal x187=((cj17)*(cj18)*(r01)*(r12));
IKReal x188=((r00)*(r11)*(sj17)*(x185));
IKReal x189=((cj17)*(r00)*(r12)*(sj18));
IKReal x190=((x186)+(x187)+(x188)+(x189));
IKReal x191=((r01)*(r10)*(sj17)*(x184));
IKReal x192=((r01)*(r10)*(sj17)*(x185));
IKReal x193=((cj17)*(r02)*(r10)*(sj18));
IKReal x194=((cj17)*(cj18)*(r02)*(r11));
IKReal x195=((x193)+(x192)+(x191)+(x194));
j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x190)))+(x195))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x190)))+(x195)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))), ((((IKabs(((((-1.00000000000000)*(x195)))+(x190))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x195)))+(x190)))):(IKReal)1.0e30))*(((((cj18)*(r01)))+(((r00)*(sj18)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j16)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(cj18)*(r20)*(sj17)))+(((cj17)*(r22)))+(((r21)*(sj17)*(sj18))));
evalcond[2]=((0.0950000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
j15array[0]=IKatan2(((0.120000000000000)+(((4.00000000000000)*(cj18)*(npy)))+(((4.00000000000000)*(npx)*(sj18)))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x196=(cj18)*(cj18);
IKReal x197=(sj18)*(sj18);
dummyeval[0]=((((-1.00000000000000)*(cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r01)*(r12)))+(((r00)*(r11)*(sj17)*(x196)))+(((r00)*(r11)*(sj17)*(x197)))+(((cj17)*(r00)*(r12)*(sj18)))+(((-1.00000000000000)*(r01)*(r10)*(sj17)*(x196)))+(((-1.00000000000000)*(r01)*(r10)*(sj17)*(x197)))+(((-1.00000000000000)*(cj17)*(cj18)*(r02)*(r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x198=(cj17)*(cj17);
IKReal x199=(sj17)*(sj17);
dummyeval[0]=((((-1.00000000000000)*(r02)*(r11)*(sj18)*(x198)))+(((-1.00000000000000)*(r02)*(r11)*(sj18)*(x199)))+(((r01)*(r12)*(sj18)*(x198)))+(((r01)*(r12)*(sj18)*(x199)))+(((cj18)*(r02)*(r10)*(x199)))+(((cj18)*(r02)*(r10)*(x198)))+(((-1.00000000000000)*(cj18)*(r00)*(r12)*(x198)))+(((-1.00000000000000)*(cj18)*(r00)*(r12)*(x199))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x200=(cj17)*(cj17);
IKReal x201=(sj17)*(sj17);
IKReal x202=((cj18)*(r00)*(r12)*(x200));
IKReal x203=((cj18)*(r00)*(r12)*(x201));
IKReal x204=((r02)*(r11)*(sj18)*(x201));
IKReal x205=((r02)*(r11)*(sj18)*(x200));
IKReal x206=((x205)+(x204)+(x203)+(x202));
IKReal x207=((r01)*(r12)*(sj18)*(x200));
IKReal x208=((cj18)*(r02)*(r10)*(x200));
IKReal x209=((r01)*(r12)*(sj18)*(x201));
IKReal x210=((cj18)*(r02)*(r10)*(x201));
IKReal x211=((x210)+(x207)+(x209)+(x208));
j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x206)))+(x211))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x206)))+(x211)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((x206)+(((-1.00000000000000)*(x211))))) != 0)?((IKReal)1/(((x206)+(((-1.00000000000000)*(x211)))))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[1];
IKReal gconst21;
gconst21=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x212=(cj15)*(cj15);
IKReal x213=(sj15)*(sj15);
IKReal x214=((x212)+(x213));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x214) != 0)?((IKReal)1/(x214)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x214) != 0)?((IKReal)1/(x214)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r20)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst21)*(((((r10)*(sj13)*(sj15)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj13)*(r00)*(sj15)*(sj18)))+(((cj15)*(r20)*(sj18)))+(((cj13)*(cj18)*(r01)*(sj15)))+(((cj18)*(r11)*(sj13)*(sj15)))))), ((gconst21)*(((((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj13)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(r00)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj18)*(r01)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x215=(cj18)*(cj18);
IKReal x216=(sj18)*(sj18);
IKReal x217=((r01)*(r10)*(sj17)*(x215));
IKReal x218=((r01)*(r10)*(sj17)*(x216));
IKReal x219=((cj17)*(r02)*(r10)*(sj18));
IKReal x220=((cj17)*(cj18)*(r02)*(r11));
IKReal x221=((x217)+(x218)+(x219)+(x220));
IKReal x222=((r00)*(r11)*(sj17)*(x215));
IKReal x223=((cj17)*(cj18)*(r01)*(r12));
IKReal x224=((r00)*(r11)*(sj17)*(x216));
IKReal x225=((cj17)*(r00)*(r12)*(sj18));
IKReal x226=((x223)+(x222)+(x225)+(x224));
j13array[0]=IKatan2(((((IKabs(((x226)+(((-1.00000000000000)*(x221))))) != 0)?((IKReal)1/(((x226)+(((-1.00000000000000)*(x221)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))), ((((IKabs(((x221)+(((-1.00000000000000)*(x226))))) != 0)?((IKReal)1/(((x221)+(((-1.00000000000000)*(x226)))))):(IKReal)1.0e30))*(((((cj18)*(r01)))+(((r00)*(sj18)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[1];
IKReal gconst21;
gconst21=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x227=(cj15)*(cj15);
IKReal x228=(sj15)*(sj15);
IKReal x229=((x228)+(x227));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x229) != 0)?((IKReal)1/(x229)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x229) != 0)?((IKReal)1/(x229)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r20)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst21)*(((((r10)*(sj13)*(sj15)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj13)*(r00)*(sj15)*(sj18)))+(((cj15)*(r20)*(sj18)))+(((cj13)*(cj18)*(r01)*(sj15)))+(((cj18)*(r11)*(sj13)*(sj15)))))), ((gconst21)*(((((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj13)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(r00)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj18)*(r01)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x230=(cj15)*(cj15);
IKReal x231=(sj15)*(sj15);
IKReal x232=((x230)+(x231));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x232) != 0)?((IKReal)1/(x232)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x232) != 0)?((IKReal)1/(x232)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r20)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IKReal dummyeval[1];
IKReal x233=(cj18)*(cj18);
IKReal x234=(sj18)*(sj18);
dummyeval[0]=((((-1.00000000000000)*(cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r01)*(r12)))+(((cj17)*(r00)*(r12)*(sj18)))+(((-1.00000000000000)*(r01)*(r10)*(sj17)*(x234)))+(((-1.00000000000000)*(r01)*(r10)*(sj17)*(x233)))+(((r00)*(r11)*(sj17)*(x233)))+(((r00)*(r11)*(sj17)*(x234)))+(((-1.00000000000000)*(cj17)*(cj18)*(r02)*(r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x235=(sj18)*(sj18);
IKReal x236=(cj18)*(cj18);
dummyeval[0]=((((-2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((-2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((-1.00000000000000)*(x235)*((r10)*(r10))))+(((-1.00000000000000)*(x236)*((r11)*(r11))))+(((-1.00000000000000)*(x235)*((r00)*(r00))))+(((-1.00000000000000)*(x236)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x237=(cj18)*(cj18);
IKReal x238=(sj18)*(sj18);
dummyeval[0]=((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x238)))+(((cj18)*(r11)*(r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x238)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((cj17)*(r00)*(r01)*(x237)))+(((cj17)*(r10)*(r11)*(x237)))+(((r00)*(r02)*(sj17)*(sj18)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x239=(cj18)*(cj18);
IKReal x240=(sj18)*(sj18);
IKReal x241=((cj17)*(r00)*(r01)*(x240));
IKReal x242=(r11)*(r11);
IKReal x243=((cj17)*(cj18)*(sj18)*(x242));
IKReal x244=(r01)*(r01);
IKReal x245=((cj17)*(cj18)*(sj18)*(x244));
IKReal x246=((cj17)*(r10)*(r11)*(x240));
IKReal x247=((x243)+(x241)+(x246)+(x245));
IKReal x248=(r10)*(r10);
IKReal x249=((cj17)*(cj18)*(sj18)*(x248));
IKReal x250=((cj18)*(r11)*(r12)*(sj17));
IKReal x251=((cj17)*(r10)*(r11)*(x239));
IKReal x252=(r00)*(r00);
IKReal x253=((cj17)*(cj18)*(sj18)*(x252));
IKReal x254=((cj17)*(r00)*(r01)*(x239));
IKReal x255=((r00)*(r02)*(sj17)*(sj18));
IKReal x256=((cj18)*(r01)*(r02)*(sj17));
IKReal x257=((r10)*(r12)*(sj17)*(sj18));
IKReal x258=((x254)+(x255)+(x256)+(x257)+(x250)+(x251)+(x253)+(x249));
j13array[0]=IKatan2(((((IKabs(((x258)+(((-1.00000000000000)*(x247))))) != 0)?((IKReal)1/(((x258)+(((-1.00000000000000)*(x247)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj14)))+(((-1.00000000000000)*(cj15)*(r10)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj14)*(r10)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj14)*(cj18)*(r11)*(sj15)))))), ((((IKabs(((x247)+(((-1.00000000000000)*(x258))))) != 0)?((IKReal)1/(((x247)+(((-1.00000000000000)*(x258)))))):(IKReal)1.0e30))*(((((cj14)*(cj18)*(r01)*(sj15)))+(((cj15)*(r00)*(sj14)*(sj18)))+(((cj15)*(cj18)*(r01)*(sj14)))+(((cj14)*(r00)*(sj15)*(sj18)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x259=(sj18)*(sj18);
IKReal x260=(cj18)*(cj18);
IKReal x261=(r10)*(r10);
IKReal x262=((x259)*(x261));
IKReal x263=(r00)*(r00);
IKReal x264=((x259)*(x263));
IKReal x265=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
IKReal x266=(r01)*(r01);
IKReal x267=((x260)*(x266));
IKReal x268=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
IKReal x269=(r11)*(r11);
IKReal x270=((x260)*(x269));
IKReal x271=((x265)+(x264)+(x267)+(x262)+(x268)+(x270));
j13array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x271) != 0)?((IKReal)1/(x271)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj14)*(cj15)*(r10)*(sj18)))+(((cj18)*(r11)*(sj14)*(sj15)))+(((-1.00000000000000)*(cj14)*(cj15)*(cj18)*(r11)))+(((r10)*(sj14)*(sj15)*(sj18)))))), ((((IKabs(x271) != 0)?((IKReal)1/(x271)):(IKReal)1.0e30))*(((((cj14)*(cj15)*(cj18)*(r01)))+(((-1.00000000000000)*(r00)*(sj14)*(sj15)*(sj18)))+(((cj14)*(cj15)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(sj14)*(sj15)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x272=(cj18)*(cj18);
IKReal x273=(sj18)*(sj18);
IKReal x274=((r01)*(r10)*(sj17)*(x272));
IKReal x275=((r01)*(r10)*(sj17)*(x273));
IKReal x276=((cj17)*(r02)*(r10)*(sj18));
IKReal x277=((cj17)*(cj18)*(r02)*(r11));
IKReal x278=((x276)+(x277)+(x274)+(x275));
IKReal x279=((r00)*(r11)*(sj17)*(x272));
IKReal x280=((cj17)*(cj18)*(r01)*(r12));
IKReal x281=((r00)*(r11)*(sj17)*(x273));
IKReal x282=((cj17)*(r00)*(r12)*(sj18));
IKReal x283=((x279)+(x282)+(x281)+(x280));
j13array[0]=IKatan2(((((IKabs(((x283)+(((-1.00000000000000)*(x278))))) != 0)?((IKReal)1/(((x283)+(((-1.00000000000000)*(x278)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))), ((((IKabs(((x278)+(((-1.00000000000000)*(x283))))) != 0)?((IKReal)1/(((x278)+(((-1.00000000000000)*(x283)))))):(IKReal)1.0e30))*(((((cj18)*(r01)))+(((r00)*(sj18)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
evalcond[1]=((-0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
j15array[0]=IKatan2(((0.120000000000000)+(((4.00000000000000)*(npy)*(sj17)*(sj18)))+(((-4.00000000000000)*(cj18)*(npx)*(sj17)))+(((4.00000000000000)*(cj17)*(npz)))+(((0.360000000000000)*(sj17)))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x284=(sj18)*(sj18);
IKReal x285=(cj18)*(cj18);
dummyeval[0]=((((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((x284)*((r10)*(r10))))+(((x285)*((r11)*(r11))))+(((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((x284)*((r00)*(r00))))+(((x285)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x286=(sj18)*(sj18);
IKReal x287=(cj18)*(cj18);
dummyeval[0]=((((-1.00000000000000)*(cj17)*(r01)*(r10)*(x286)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x287)))+(((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18)))+(((cj17)*(r00)*(r11)*(x287)))+(((cj17)*(r00)*(r11)*(x286))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x288=(sj18)*(sj18);
IKReal x289=(cj18)*(cj18);
IKReal x290=((cj17)*(r01)*(r10)*(x288));
IKReal x291=((cj18)*(r01)*(r12)*(sj17));
IKReal x292=((r00)*(r12)*(sj17)*(sj18));
IKReal x293=((cj17)*(r01)*(r10)*(x289));
IKReal x294=((x290)+(x291)+(x292)+(x293));
IKReal x295=((cj17)*(r00)*(r11)*(x288));
IKReal x296=((cj17)*(r00)*(r11)*(x289));
IKReal x297=((r02)*(r10)*(sj17)*(sj18));
IKReal x298=((cj18)*(r02)*(r11)*(sj17));
IKReal x299=((x298)+(x295)+(x296)+(x297));
j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x294)))+(x299))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x294)))+(x299)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((((-1.00000000000000)*(x299)))+(x294))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x299)))+(x294)))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[1];
IKReal gconst22;
gconst22=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x300=(cj15)*(cj15);
IKReal x301=(sj15)*(sj15);
IKReal x302=((x300)+(x301));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x302) != 0)?((IKReal)1/(x302)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x302) != 0)?((IKReal)1/(x302)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x303=(cj15)*(cj15);
IKReal x304=(sj15)*(sj15);
IKReal x305=((x304)+(x303));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x305) != 0)?((IKReal)1/(x305)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x305) != 0)?((IKReal)1/(x305)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst22)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst22)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x306=(sj18)*(sj18);
IKReal x307=(cj18)*(cj18);
IKReal x308=(r10)*(r10);
IKReal x309=((x306)*(x308));
IKReal x310=(r00)*(r00);
IKReal x311=((x306)*(x310));
IKReal x312=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
IKReal x313=(r01)*(r01);
IKReal x314=((x307)*(x313));
IKReal x315=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
IKReal x316=(r11)*(r11);
IKReal x317=((x307)*(x316));
IKReal x318=((x309)+(x315)+(x314)+(x317)+(x311)+(x312));
j13array[0]=IKatan2(((((IKabs(x318) != 0)?((IKReal)1/(x318)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((-1.00000000000000)*(((IKabs(x318) != 0)?((IKReal)1/(x318)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[1];
IKReal gconst22;
gconst22=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x319=(cj15)*(cj15);
IKReal x320=(sj15)*(sj15);
IKReal x321=((x320)+(x319));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x321) != 0)?((IKReal)1/(x321)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x321) != 0)?((IKReal)1/(x321)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x322=(cj15)*(cj15);
IKReal x323=(sj15)*(sj15);
IKReal x324=((x322)+(x323));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x324) != 0)?((IKReal)1/(x324)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x324) != 0)?((IKReal)1/(x324)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst22)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst22)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x325=(cj15)*(cj15);
IKReal x326=(sj15)*(sj15);
IKReal x327=((x325)+(x326));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x327) != 0)?((IKReal)1/(x327)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x327) != 0)?((IKReal)1/(x327)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IKReal dummyeval[1];
IKReal gconst23;
IKReal x328=(cj18)*(cj18);
IKReal x329=(sj18)*(sj18);
gconst23=IKsign(((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x329)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((cj17)*(r00)*(r01)*(x328)))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x329)))+(((r00)*(r02)*(sj17)*(sj18)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18)))+(((cj17)*(r10)*(r11)*(x328)))));
IKReal x330=(cj18)*(cj18);
IKReal x331=(sj18)*(sj18);
dummyeval[0]=((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((cj17)*(r00)*(r01)*(x330)))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r10)*(r11)*(x330)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x331)))+(((r00)*(r02)*(sj17)*(sj18)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x331))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x332=(sj18)*(sj18);
IKReal x333=(cj18)*(cj18);
dummyeval[0]=((((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((x333)*((r11)*(r11))))+(((x332)*((r10)*(r10))))+(((x333)*((r01)*(r01))))+(((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((x332)*((r00)*(r00)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x334=(sj18)*(sj18);
IKReal x335=(cj18)*(cj18);
dummyeval[0]=((((-1.00000000000000)*(cj17)*(r01)*(r10)*(x334)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x335)))+(((r02)*(r10)*(sj17)*(sj18)))+(((cj17)*(r00)*(r11)*(x334)))+(((cj17)*(r00)*(r11)*(x335)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x336=(sj18)*(sj18);
IKReal x337=(cj18)*(cj18);
IKReal x338=((cj17)*(r01)*(r10)*(x336));
IKReal x339=((cj18)*(r01)*(r12)*(sj17));
IKReal x340=((r00)*(r12)*(sj17)*(sj18));
IKReal x341=((cj17)*(r01)*(r10)*(x337));
IKReal x342=((x339)+(x338)+(x340)+(x341));
IKReal x343=((cj17)*(r00)*(r11)*(x336));
IKReal x344=((cj17)*(r00)*(r11)*(x337));
IKReal x345=((r02)*(r10)*(sj17)*(sj18));
IKReal x346=((cj18)*(r02)*(r11)*(sj17));
IKReal x347=((x343)+(x346)+(x344)+(x345));
j13array[0]=IKatan2(((((IKabs(((x347)+(((-1.00000000000000)*(x342))))) != 0)?((IKReal)1/(((x347)+(((-1.00000000000000)*(x342)))))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((x342)+(((-1.00000000000000)*(x347))))) != 0)?((IKReal)1/(((x342)+(((-1.00000000000000)*(x347)))))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x348=(sj18)*(sj18);
IKReal x349=(cj18)*(cj18);
IKReal x350=(r10)*(r10);
IKReal x351=((x348)*(x350));
IKReal x352=(r00)*(r00);
IKReal x353=((x348)*(x352));
IKReal x354=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
IKReal x355=(r01)*(r01);
IKReal x356=((x349)*(x355));
IKReal x357=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
IKReal x358=(r11)*(r11);
IKReal x359=((x349)*(x358));
IKReal x360=((x351)+(x353)+(x354)+(x357)+(x356)+(x359));
j13array[0]=IKatan2(((((IKabs(x360) != 0)?((IKReal)1/(x360)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((-1.00000000000000)*(((IKabs(x360) != 0)?((IKReal)1/(x360)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
j13array[0]=IKatan2(((gconst23)*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj14)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj15)*(r10)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj14)*(r10)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj14)*(cj18)*(r11)*(sj15)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))), ((gconst23)*(((((-1.00000000000000)*(cj14)*(r00)*(sj15)*(sj18)))+(((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj15)*(r00)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r01)*(sj14)))+(((cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj14)*(cj18)*(r01)*(sj15)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
evalcond[1]=((0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IKReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
j15array[0]=IKatan2(((0.120000000000000)+(((4.00000000000000)*(cj18)*(npx)*(sj17)))+(((-4.00000000000000)*(cj17)*(npz)))+(((-0.360000000000000)*(sj17)))+(((-4.00000000000000)*(npy)*(sj17)*(sj18)))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IKReal dummyeval[1];
IKReal gconst24;
gconst24=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x361=(sj18)*(sj18);
IKReal x362=(cj18)*(cj18);
dummyeval[0]=((((-2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((-1.00000000000000)*(x362)*((r01)*(r01))))+(((-1.00000000000000)*(x361)*((r10)*(r10))))+(((-2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((-1.00000000000000)*(x362)*((r11)*(r11))))+(((-1.00000000000000)*(x361)*((r00)*(r00)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x363=(sj18)*(sj18);
IKReal x364=(cj18)*(cj18);
dummyeval[0]=((((-1.00000000000000)*(r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x364)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x363)))+(((-1.00000000000000)*(cj18)*(r02)*(r11)*(sj17)))+(((cj17)*(r01)*(r10)*(x364)))+(((cj17)*(r01)*(r10)*(x363)))+(((cj18)*(r01)*(r12)*(sj17)))+(((r00)*(r12)*(sj17)*(sj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x365=(sj18)*(sj18);
IKReal x366=(cj18)*(cj18);
IKReal x367=((cj17)*(r00)*(r11)*(x365));
IKReal x368=((cj17)*(r00)*(r11)*(x366));
IKReal x369=((r02)*(r10)*(sj17)*(sj18));
IKReal x370=((cj18)*(r02)*(r11)*(sj17));
IKReal x371=((x370)+(x368)+(x369)+(x367));
IKReal x372=((cj17)*(r01)*(r10)*(x365));
IKReal x373=((cj18)*(r01)*(r12)*(sj17));
IKReal x374=((r00)*(r12)*(sj17)*(sj18));
IKReal x375=((cj17)*(r01)*(r10)*(x366));
IKReal x376=((x375)+(x374)+(x373)+(x372));
j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x371)))+(x376))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x371)))+(x376)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((((-1.00000000000000)*(x376)))+(x371))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x376)))+(x371)))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[1];
IKReal gconst25;
gconst25=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst25)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst25)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x377=(sj18)*(sj18);
IKReal x378=(cj18)*(cj18);
IKReal x379=(r10)*(r10);
IKReal x380=((x377)*(x379));
IKReal x381=(r00)*(r00);
IKReal x382=((x377)*(x381));
IKReal x383=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
IKReal x384=(r01)*(r01);
IKReal x385=((x378)*(x384));
IKReal x386=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
IKReal x387=(r11)*(r11);
IKReal x388=((x378)*(x387));
IKReal x389=((x386)+(x385)+(x382)+(x383)+(x380)+(x388));
j13array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x389) != 0)?((IKReal)1/(x389)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((((IKabs(x389) != 0)?((IKReal)1/(x389)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[1];
IKReal gconst25;
gconst25=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst25)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst25)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst24)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst24)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IKReal dummyeval[1];
IKReal gconst26;
IKReal x390=(cj18)*(cj18);
IKReal x391=(sj18)*(sj18);
gconst26=IKsign(((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x391)))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r10)*(r11)*(x390)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((cj17)*(r00)*(r01)*(x390)))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x391)))+(((r00)*(r02)*(sj17)*(sj18)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18)))));
IKReal x392=(cj18)*(cj18);
IKReal x393=(sj18)*(sj18);
dummyeval[0]=((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x393)))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r10)*(r11)*(x392)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((cj17)*(r00)*(r01)*(x392)))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x393)))+(((r00)*(r02)*(sj17)*(sj18)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x394=(sj18)*(sj18);
IKReal x395=(cj18)*(cj18);
dummyeval[0]=((((-2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((-1.00000000000000)*(x395)*((r11)*(r11))))+(((-2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((-1.00000000000000)*(x394)*((r10)*(r10))))+(((-1.00000000000000)*(x394)*((r00)*(r00))))+(((-1.00000000000000)*(x395)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x396=(sj18)*(sj18);
IKReal x397=(cj18)*(cj18);
dummyeval[0]=((((-1.00000000000000)*(cj17)*(r00)*(r11)*(x396)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x397)))+(((-1.00000000000000)*(r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r02)*(r11)*(sj17)))+(((cj18)*(r01)*(r12)*(sj17)))+(((cj17)*(r01)*(r10)*(x397)))+(((cj17)*(r01)*(r10)*(x396)))+(((r00)*(r12)*(sj17)*(sj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x398=(sj18)*(sj18);
IKReal x399=(cj18)*(cj18);
IKReal x400=((cj17)*(r00)*(r11)*(x398));
IKReal x401=((cj17)*(r00)*(r11)*(x399));
IKReal x402=((r02)*(r10)*(sj17)*(sj18));
IKReal x403=((cj18)*(r02)*(r11)*(sj17));
IKReal x404=((x401)+(x400)+(x403)+(x402));
IKReal x405=((cj17)*(r01)*(r10)*(x398));
IKReal x406=((cj18)*(r01)*(r12)*(sj17));
IKReal x407=((r00)*(r12)*(sj17)*(sj18));
IKReal x408=((cj17)*(r01)*(r10)*(x399));
IKReal x409=((x405)+(x407)+(x406)+(x408));
j13array[0]=IKatan2(((((IKabs(((x409)+(((-1.00000000000000)*(x404))))) != 0)?((IKReal)1/(((x409)+(((-1.00000000000000)*(x404)))))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((x404)+(((-1.00000000000000)*(x409))))) != 0)?((IKReal)1/(((x404)+(((-1.00000000000000)*(x409)))))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x410=(sj18)*(sj18);
IKReal x411=(cj18)*(cj18);
IKReal x412=(r10)*(r10);
IKReal x413=((x410)*(x412));
IKReal x414=(r00)*(r00);
IKReal x415=((x410)*(x414));
IKReal x416=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
IKReal x417=(r01)*(r01);
IKReal x418=((x411)*(x417));
IKReal x419=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
IKReal x420=(r11)*(r11);
IKReal x421=((x411)*(x420));
IKReal x422=((x413)+(x416)+(x415)+(x418)+(x419)+(x421));
j13array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x422) != 0)?((IKReal)1/(x422)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((((IKabs(x422) != 0)?((IKReal)1/(x422)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
j13array[0]=IKatan2(((gconst26)*(((((-1.00000000000000)*(cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj14)))+(((r02)*(sj17)))+(((-1.00000000000000)*(cj15)*(r10)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj14)*(r10)*(sj15)*(sj18)))+(((cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(cj14)*(cj18)*(r11)*(sj15)))))), ((gconst26)*(((((-1.00000000000000)*(cj14)*(r00)*(sj15)*(sj18)))+(((-1.00000000000000)*(r12)*(sj17)))+(((cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj15)*(r00)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r01)*(sj14)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj14)*(cj18)*(r01)*(sj15)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
j15array[0]=IKatan2(((((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((((4.00000000000000)*(npy)*(sj17)*(sj18)))+(((-0.380000000000000)*(sj16)))+(((-4.00000000000000)*(cj18)*(npx)*(sj17)))+(((0.120000000000000)*(cj16)))+(((4.00000000000000)*(cj17)*(npz)))+(((0.360000000000000)*(sj17)))))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IKReal dummyeval[1];
IKReal gconst2;
gconst2=IKsign(((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15))))));
dummyeval[0]=((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst1;
IKReal x423=(cj18)*(cj18);
IKReal x424=(sj18)*(sj18);
gconst1=IKsign(((((r01)*(r10)*(sj17)*(x424)))+(((r01)*(r10)*(sj17)*(x423)))+(((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x424)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x423)))+(((cj17)*(cj18)*(r02)*(r11)))));
IKReal x425=(cj18)*(cj18);
IKReal x426=(sj18)*(sj18);
dummyeval[0]=((((r01)*(r10)*(sj17)*(x426)))+(((r01)*(r10)*(sj17)*(x425)))+(((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x426)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x425)))+(((cj17)*(cj18)*(r02)*(r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x427=(sj18)*(sj18);
IKReal x428=(cj18)*(cj18);
dummyeval[0]=((((cj17)*(r00)*(r11)*(x428)))+(((cj17)*(r00)*(r11)*(x427)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x428)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x427)))+(((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
evalcond[1]=((-0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
evalcond[4]=((0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((-0.250000000000000)*(sj15)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x429=(sj18)*(sj18);
IKReal x430=(cj18)*(cj18);
dummyeval[0]=((((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((x429)*((r00)*(r00))))+(((x429)*((r10)*(r10))))+(((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((x430)*((r11)*(r11))))+(((x430)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x431=(sj18)*(sj18);
IKReal x432=(cj18)*(cj18);
dummyeval[0]=((((-1.00000000000000)*(cj17)*(r01)*(r10)*(x432)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x431)))+(((cj17)*(r00)*(r11)*(x432)))+(((cj17)*(r00)*(r11)*(x431)))+(((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x433=(sj18)*(sj18);
IKReal x434=(cj18)*(cj18);
IKReal x435=((cj17)*(r01)*(r10)*(x433));
IKReal x436=((cj18)*(r01)*(r12)*(sj17));
IKReal x437=((r00)*(r12)*(sj17)*(sj18));
IKReal x438=((cj17)*(r01)*(r10)*(x434));
IKReal x439=((x438)+(x435)+(x436)+(x437));
IKReal x440=((cj17)*(r00)*(r11)*(x433));
IKReal x441=((cj17)*(r00)*(r11)*(x434));
IKReal x442=((r02)*(r10)*(sj17)*(sj18));
IKReal x443=((cj18)*(r02)*(r11)*(sj17));
IKReal x444=((x441)+(x440)+(x443)+(x442));
j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x439)))+(x444))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x439)))+(x444)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((((-1.00000000000000)*(x444)))+(x439))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x444)))+(x439)))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[1];
IKReal gconst7;
gconst7=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x445=(cj15)*(cj15);
IKReal x446=(sj15)*(sj15);
IKReal x447=((x445)+(x446));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x447) != 0)?((IKReal)1/(x447)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x447) != 0)?((IKReal)1/(x447)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x448=(cj15)*(cj15);
IKReal x449=(sj15)*(sj15);
IKReal x450=((x449)+(x448));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x450) != 0)?((IKReal)1/(x450)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x450) != 0)?((IKReal)1/(x450)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst7)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst7)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x451=(sj18)*(sj18);
IKReal x452=(cj18)*(cj18);
IKReal x453=(r10)*(r10);
IKReal x454=((x451)*(x453));
IKReal x455=(r00)*(r00);
IKReal x456=((x451)*(x455));
IKReal x457=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
IKReal x458=(r01)*(r01);
IKReal x459=((x452)*(x458));
IKReal x460=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
IKReal x461=(r11)*(r11);
IKReal x462=((x452)*(x461));
IKReal x463=((x459)+(x456)+(x457)+(x454)+(x462)+(x460));
j13array[0]=IKatan2(((((IKabs(x463) != 0)?((IKReal)1/(x463)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((-1.00000000000000)*(((IKabs(x463) != 0)?((IKReal)1/(x463)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[1];
IKReal gconst7;
gconst7=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x464=(cj15)*(cj15);
IKReal x465=(sj15)*(sj15);
IKReal x466=((x465)+(x464));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x466) != 0)?((IKReal)1/(x466)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x466) != 0)?((IKReal)1/(x466)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x467=(cj15)*(cj15);
IKReal x468=(sj15)*(sj15);
IKReal x469=((x468)+(x467));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x469) != 0)?((IKReal)1/(x469)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x469) != 0)?((IKReal)1/(x469)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst7)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst7)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x470=(cj15)*(cj15);
IKReal x471=(sj15)*(sj15);
IKReal x472=((x470)+(x471));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x472) != 0)?((IKReal)1/(x472)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x472) != 0)?((IKReal)1/(x472)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IKReal dummyeval[1];
IKReal gconst8;
IKReal x473=(cj18)*(cj18);
IKReal x474=(sj18)*(sj18);
gconst8=IKsign(((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x474)))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r00)*(r01)*(x473)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((cj17)*(r10)*(r11)*(x473)))+(((r00)*(r02)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x474)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18)))));
IKReal x475=(cj18)*(cj18);
IKReal x476=(sj18)*(sj18);
dummyeval[0]=((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x476)))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r00)*(r01)*(x475)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((cj17)*(r10)*(r11)*(x475)))+(((r00)*(r02)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x476)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x477=(sj18)*(sj18);
IKReal x478=(cj18)*(cj18);
dummyeval[0]=((((x478)*((r11)*(r11))))+(((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((x477)*((r10)*(r10))))+(((x478)*((r01)*(r01))))+(((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((x477)*((r00)*(r00)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x479=(sj18)*(sj18);
IKReal x480=(cj18)*(cj18);
dummyeval[0]=((((cj17)*(r00)*(r11)*(x480)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x480)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x479)))+(((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj18)*(r02)*(r11)*(sj17)))+(((cj17)*(r00)*(r11)*(x479)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x481=(sj18)*(sj18);
IKReal x482=(cj18)*(cj18);
IKReal x483=((cj17)*(r01)*(r10)*(x481));
IKReal x484=((cj18)*(r01)*(r12)*(sj17));
IKReal x485=((r00)*(r12)*(sj17)*(sj18));
IKReal x486=((cj17)*(r01)*(r10)*(x482));
IKReal x487=((x483)+(x485)+(x484)+(x486));
IKReal x488=((cj17)*(r00)*(r11)*(x481));
IKReal x489=((cj17)*(r00)*(r11)*(x482));
IKReal x490=((r02)*(r10)*(sj17)*(sj18));
IKReal x491=((cj18)*(r02)*(r11)*(sj17));
IKReal x492=((x489)+(x488)+(x490)+(x491));
j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x487)))+(x492))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x487)))+(x492)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((((-1.00000000000000)*(x492)))+(x487))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x492)))+(x487)))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x493=(sj18)*(sj18);
IKReal x494=(cj18)*(cj18);
IKReal x495=(r10)*(r10);
IKReal x496=((x493)*(x495));
IKReal x497=(r00)*(r00);
IKReal x498=((x493)*(x497));
IKReal x499=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
IKReal x500=(r01)*(r01);
IKReal x501=((x494)*(x500));
IKReal x502=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
IKReal x503=(r11)*(r11);
IKReal x504=((x494)*(x503));
IKReal x505=((x498)+(x499)+(x496)+(x501)+(x502)+(x504));
j13array[0]=IKatan2(((((IKabs(x505) != 0)?((IKReal)1/(x505)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((-1.00000000000000)*(((IKabs(x505) != 0)?((IKReal)1/(x505)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
j13array[0]=IKatan2(((gconst8)*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj14)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj15)*(r10)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj14)*(r10)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj14)*(cj18)*(r11)*(sj15)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))), ((gconst8)*(((((-1.00000000000000)*(cj14)*(r00)*(sj15)*(sj18)))+(((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj15)*(r00)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r01)*(sj14)))+(((cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj14)*(cj18)*(r01)*(sj15)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
evalcond[1]=((0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
evalcond[4]=((-0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.250000000000000)*(sj15)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst9;
gconst9=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x506=(sj18)*(sj18);
IKReal x507=(cj18)*(cj18);
dummyeval[0]=((((-2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((-2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((-1.00000000000000)*(x507)*((r01)*(r01))))+(((-1.00000000000000)*(x507)*((r11)*(r11))))+(((-1.00000000000000)*(x506)*((r10)*(r10))))+(((-1.00000000000000)*(x506)*((r00)*(r00)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x508=(sj18)*(sj18);
IKReal x509=(cj18)*(cj18);
dummyeval[0]=((((-1.00000000000000)*(r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x508)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x509)))+(((cj17)*(r01)*(r10)*(x508)))+(((cj17)*(r01)*(r10)*(x509)))+(((-1.00000000000000)*(cj18)*(r02)*(r11)*(sj17)))+(((cj18)*(r01)*(r12)*(sj17)))+(((r00)*(r12)*(sj17)*(sj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x510=(sj18)*(sj18);
IKReal x511=(cj18)*(cj18);
IKReal x512=((cj17)*(r00)*(r11)*(x510));
IKReal x513=((cj17)*(r00)*(r11)*(x511));
IKReal x514=((r02)*(r10)*(sj17)*(sj18));
IKReal x515=((cj18)*(r02)*(r11)*(sj17));
IKReal x516=((x515)+(x514)+(x513)+(x512));
IKReal x517=((cj17)*(r01)*(r10)*(x510));
IKReal x518=((cj18)*(r01)*(r12)*(sj17));
IKReal x519=((r00)*(r12)*(sj17)*(sj18));
IKReal x520=((cj17)*(r01)*(r10)*(x511));
IKReal x521=((x520)+(x519)+(x518)+(x517));
j13array[0]=IKatan2(((((IKabs(((x521)+(((-1.00000000000000)*(x516))))) != 0)?((IKReal)1/(((x521)+(((-1.00000000000000)*(x516)))))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((((-1.00000000000000)*(x521)))+(x516))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x521)))+(x516)))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[1];
IKReal gconst10;
gconst10=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst10)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst10)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x522=(sj18)*(sj18);
IKReal x523=(cj18)*(cj18);
IKReal x524=(r10)*(r10);
IKReal x525=((x522)*(x524));
IKReal x526=(r00)*(r00);
IKReal x527=((x522)*(x526));
IKReal x528=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
IKReal x529=(r01)*(r01);
IKReal x530=((x523)*(x529));
IKReal x531=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
IKReal x532=(r11)*(r11);
IKReal x533=((x523)*(x532));
IKReal x534=((x531)+(x530)+(x533)+(x527)+(x525)+(x528));
j13array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x534) != 0)?((IKReal)1/(x534)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((((IKabs(x534) != 0)?((IKReal)1/(x534)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[1];
IKReal gconst10;
gconst10=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst10)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst10)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst9)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst9)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IKReal dummyeval[1];
IKReal gconst11;
IKReal x535=(cj18)*(cj18);
IKReal x536=(sj18)*(sj18);
gconst11=IKsign(((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((cj17)*(r10)*(r11)*(x535)))+(((cj17)*(r00)*(r01)*(x535)))+(((r00)*(r02)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x536)))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x536)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18)))));
IKReal x537=(cj18)*(cj18);
IKReal x538=(sj18)*(sj18);
dummyeval[0]=((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((cj17)*(r10)*(r11)*(x537)))+(((cj17)*(r00)*(r01)*(x537)))+(((r00)*(r02)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x538)))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x538)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x539=(sj18)*(sj18);
IKReal x540=(cj18)*(cj18);
dummyeval[0]=((((-2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((-1.00000000000000)*(x540)*((r01)*(r01))))+(((-2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((-1.00000000000000)*(x539)*((r00)*(r00))))+(((-1.00000000000000)*(x540)*((r11)*(r11))))+(((-1.00000000000000)*(x539)*((r10)*(r10)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x541=(sj18)*(sj18);
IKReal x542=(cj18)*(cj18);
dummyeval[0]=((((-1.00000000000000)*(r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r02)*(r11)*(sj17)))+(((cj18)*(r01)*(r12)*(sj17)))+(((cj17)*(r01)*(r10)*(x541)))+(((cj17)*(r01)*(r10)*(x542)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x541)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x542)))+(((r00)*(r12)*(sj17)*(sj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x543=(sj18)*(sj18);
IKReal x544=(cj18)*(cj18);
IKReal x545=((cj17)*(r00)*(r11)*(x543));
IKReal x546=((cj17)*(r00)*(r11)*(x544));
IKReal x547=((r02)*(r10)*(sj17)*(sj18));
IKReal x548=((cj18)*(r02)*(r11)*(sj17));
IKReal x549=((x545)+(x546)+(x547)+(x548));
IKReal x550=((cj17)*(r01)*(r10)*(x543));
IKReal x551=((cj18)*(r01)*(r12)*(sj17));
IKReal x552=((r00)*(r12)*(sj17)*(sj18));
IKReal x553=((cj17)*(r01)*(r10)*(x544));
IKReal x554=((x553)+(x552)+(x551)+(x550));
j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x549)))+(x554))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x549)))+(x554)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((((-1.00000000000000)*(x554)))+(x549))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x554)))+(x549)))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x555=(sj18)*(sj18);
IKReal x556=(cj18)*(cj18);
IKReal x557=(r10)*(r10);
IKReal x558=((x555)*(x557));
IKReal x559=(r00)*(r00);
IKReal x560=((x555)*(x559));
IKReal x561=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
IKReal x562=(r01)*(r01);
IKReal x563=((x556)*(x562));
IKReal x564=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
IKReal x565=(r11)*(r11);
IKReal x566=((x556)*(x565));
IKReal x567=((x558)+(x566)+(x564)+(x563)+(x560)+(x561));
j13array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x567) != 0)?((IKReal)1/(x567)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((((IKabs(x567) != 0)?((IKReal)1/(x567)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
j13array[0]=IKatan2(((gconst11)*(((((-1.00000000000000)*(cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj14)))+(((r02)*(sj17)))+(((-1.00000000000000)*(cj15)*(r10)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj14)*(r10)*(sj15)*(sj18)))+(((cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(cj14)*(cj18)*(r11)*(sj15)))))), ((gconst11)*(((((-1.00000000000000)*(cj14)*(r00)*(sj15)*(sj18)))+(((-1.00000000000000)*(r12)*(sj17)))+(((cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj15)*(r00)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r01)*(sj14)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj14)*(cj18)*(r01)*(sj15)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x568=(sj18)*(sj18);
IKReal x569=(cj18)*(cj18);
IKReal x570=((cj17)*(r01)*(r10)*(x568));
IKReal x571=((cj18)*(r01)*(r12)*(sj17));
IKReal x572=((r00)*(r12)*(sj17)*(sj18));
IKReal x573=((cj17)*(r01)*(r10)*(x569));
IKReal x574=((x571)+(x570)+(x573)+(x572));
IKReal x575=((cj17)*(r00)*(r11)*(x568));
IKReal x576=((cj17)*(r00)*(r11)*(x569));
IKReal x577=((r02)*(r10)*(sj17)*(sj18));
IKReal x578=((cj18)*(r02)*(r11)*(sj17));
IKReal x579=((x578)+(x575)+(x577)+(x576));
j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x574)))+(x579))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x574)))+(x579)))):(IKReal)1.0e30))*(((((cj16)*(r12)*(sj17)))+(((cj16)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj16)*(cj17)*(r11)*(sj18)))))), ((((IKabs(((((-1.00000000000000)*(x579)))+(x574))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x579)))+(x574)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj16)*(r02)*(sj17)))+(((cj16)*(cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj16)*(cj17)*(cj18)*(r00)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15))))));
dummyeval[0]=((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
evalcond[1]=((-0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
evalcond[4]=((1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
evalcond[5]=((0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((-0.250000000000000)*(sj15)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x580=(cj15)*(cj15);
IKReal x581=(sj15)*(sj15);
IKReal x582=((x580)+(x581));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x582) != 0)?((IKReal)1/(x582)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x582) != 0)?((IKReal)1/(x582)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x583=(cj15)*(cj15);
IKReal x584=(sj15)*(sj15);
IKReal x585=((x583)+(x584));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x585) != 0)?((IKReal)1/(x585)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x585) != 0)?((IKReal)1/(x585)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst4)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst4)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
evalcond[1]=((0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
evalcond[4]=((-1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
evalcond[5]=((-0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.250000000000000)*(sj15)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst5;
gconst5=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst5)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst5)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst3)*(((((r22)*(sj15)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj16)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((cj17)*(cj18)*(r20)*(sj15)*(sj16)))))), ((gconst3)*(((((cj15)*(cj17)*(r21)*(sj16)*(sj18)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)*(sj16)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
j13array[0]=IKatan2(((gconst1)*(((((cj16)*(r11)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj16)))+(((cj16)*(cj17)*(r12)))+(((-1.00000000000000)*(cj16)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(r10)*(sj16)*(sj18)))))), ((gconst1)*(((((-1.00000000000000)*(cj16)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj18)*(r01)*(sj16)))+(((-1.00000000000000)*(r00)*(sj16)*(sj18)))+(((cj16)*(r01)*(sj17)*(sj18)))+(((cj16)*(cj17)*(r02)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15))))));
dummyeval[0]=((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
evalcond[1]=((-0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
evalcond[4]=((1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
evalcond[5]=((0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((-0.250000000000000)*(sj15)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x586=(cj15)*(cj15);
IKReal x587=(sj15)*(sj15);
IKReal x588=((x586)+(x587));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x588) != 0)?((IKReal)1/(x588)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x588) != 0)?((IKReal)1/(x588)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x589=(cj15)*(cj15);
IKReal x590=(sj15)*(sj15);
IKReal x591=((x589)+(x590));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x591) != 0)?((IKReal)1/(x591)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x591) != 0)?((IKReal)1/(x591)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst4)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst4)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
evalcond[1]=((0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
evalcond[4]=((-1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
evalcond[5]=((-0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.250000000000000)*(sj15)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst5;
gconst5=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst5)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst5)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst3)*(((((r22)*(sj15)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj16)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((cj17)*(cj18)*(r20)*(sj15)*(sj16)))))), ((gconst3)*(((((cj15)*(cj17)*(r21)*(sj16)*(sj18)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)*(sj16)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst2)*(((((r22)*(sj15)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj16)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((cj17)*(cj18)*(r20)*(sj15)*(sj16)))))), ((gconst2)*(((((cj15)*(cj17)*(r21)*(sj16)*(sj18)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)*(sj16)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IKReal dummyeval[1];
IKReal gconst6;
IKReal x592=(cj18)*(cj18);
IKReal x593=(sj18)*(sj18);
gconst6=IKsign(((((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x593)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x592)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11)))+(((r01)*(r10)*(sj17)*(x593)))+(((r01)*(r10)*(sj17)*(x592)))));
IKReal x594=(cj18)*(cj18);
IKReal x595=(sj18)*(sj18);
dummyeval[0]=((((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x595)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x594)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11)))+(((r01)*(r10)*(sj17)*(x595)))+(((r01)*(r10)*(sj17)*(x594))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x596=(sj18)*(sj18);
IKReal x597=(cj18)*(cj18);
dummyeval[0]=((((cj17)*(r00)*(r11)*(x596)))+(((cj17)*(r00)*(r11)*(x597)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x596)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x597)))+(((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x598=(sj18)*(sj18);
IKReal x599=(cj18)*(cj18);
IKReal x600=((cj17)*(r01)*(r10)*(x598));
IKReal x601=((cj18)*(r01)*(r12)*(sj17));
IKReal x602=((r00)*(r12)*(sj17)*(sj18));
IKReal x603=((cj17)*(r01)*(r10)*(x599));
IKReal x604=((x603)+(x602)+(x601)+(x600));
IKReal x605=((cj17)*(r00)*(r11)*(x598));
IKReal x606=((cj17)*(r00)*(r11)*(x599));
IKReal x607=((r02)*(r10)*(sj17)*(sj18));
IKReal x608=((cj18)*(r02)*(r11)*(sj17));
IKReal x609=((x607)+(x606)+(x605)+(x608));
j13array[0]=IKatan2(((((IKabs(((x609)+(((-1.00000000000000)*(x604))))) != 0)?((IKReal)1/(((x609)+(((-1.00000000000000)*(x604)))))):(IKReal)1.0e30))*(((((cj16)*(r12)*(sj17)))+(((cj16)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj16)*(cj17)*(r11)*(sj18)))))), ((((IKabs(((x604)+(((-1.00000000000000)*(x609))))) != 0)?((IKReal)1/(((x604)+(((-1.00000000000000)*(x609)))))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj16)*(r02)*(sj17)))+(((cj16)*(cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj16)*(cj17)*(cj18)*(r00)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
j13array[0]=IKatan2(((gconst6)*(((((cj16)*(r11)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj16)))+(((cj16)*(cj17)*(r12)))+(((-1.00000000000000)*(cj16)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(r10)*(sj16)*(sj18)))))), ((gconst6)*(((((-1.00000000000000)*(cj16)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj18)*(r01)*(sj16)))+(((-1.00000000000000)*(r00)*(sj16)*(sj18)))+(((cj16)*(r01)*(sj17)*(sj18)))+(((cj16)*(cj17)*(r02)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
j15array[0]=IKatan2(((((IKabs(sj16) != 0)?((IKReal)1/(sj16)):(IKReal)1.0e30))*(((((0.120000000000000)*(sj16)))+(((-4.00000000000000)*(cj18)*(npy)))+(((0.380000000000000)*(cj16)))+(((-4.00000000000000)*(npx)*(sj18)))))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IKReal dummyeval[1];
IKReal gconst2;
gconst2=IKsign(((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15))))));
dummyeval[0]=((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst1;
IKReal x610=(cj18)*(cj18);
IKReal x611=(sj18)*(sj18);
gconst1=IKsign(((((r01)*(r10)*(sj17)*(x610)))+(((r01)*(r10)*(sj17)*(x611)))+(((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x610)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x611)))));
IKReal x612=(cj18)*(cj18);
IKReal x613=(sj18)*(sj18);
dummyeval[0]=((((r01)*(r10)*(sj17)*(x612)))+(((r01)*(r10)*(sj17)*(x613)))+(((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x612)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x613))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x614=(sj18)*(sj18);
IKReal x615=(cj18)*(cj18);
dummyeval[0]=((((-1.00000000000000)*(cj17)*(r01)*(r10)*(x615)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x614)))+(((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj17)*(r00)*(r11)*(x615)))+(((cj17)*(r00)*(r11)*(x614)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
evalcond[1]=((-0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
evalcond[4]=((0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((-0.250000000000000)*(sj15)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x616=(sj18)*(sj18);
IKReal x617=(cj18)*(cj18);
dummyeval[0]=((((x617)*((r01)*(r01))))+(((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((x616)*((r00)*(r00))))+(((x617)*((r11)*(r11))))+(((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((x616)*((r10)*(r10)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x618=(sj18)*(sj18);
IKReal x619=(cj18)*(cj18);
dummyeval[0]=((((-1.00000000000000)*(cj17)*(r01)*(r10)*(x619)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x618)))+(((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj17)*(r00)*(r11)*(x619)))+(((cj17)*(r00)*(r11)*(x618)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x620=(sj18)*(sj18);
IKReal x621=(cj18)*(cj18);
IKReal x622=((cj17)*(r01)*(r10)*(x620));
IKReal x623=((cj18)*(r01)*(r12)*(sj17));
IKReal x624=((r00)*(r12)*(sj17)*(sj18));
IKReal x625=((cj17)*(r01)*(r10)*(x621));
IKReal x626=((x625)+(x624)+(x623)+(x622));
IKReal x627=((cj17)*(r00)*(r11)*(x620));
IKReal x628=((cj17)*(r00)*(r11)*(x621));
IKReal x629=((r02)*(r10)*(sj17)*(sj18));
IKReal x630=((cj18)*(r02)*(r11)*(sj17));
IKReal x631=((x627)+(x629)+(x628)+(x630));
j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x626)))+(x631))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x626)))+(x631)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((((-1.00000000000000)*(x631)))+(x626))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x631)))+(x626)))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[1];
IKReal gconst7;
gconst7=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x632=(cj15)*(cj15);
IKReal x633=(sj15)*(sj15);
IKReal x634=((x632)+(x633));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x634) != 0)?((IKReal)1/(x634)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x634) != 0)?((IKReal)1/(x634)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x635=(cj15)*(cj15);
IKReal x636=(sj15)*(sj15);
IKReal x637=((x636)+(x635));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x637) != 0)?((IKReal)1/(x637)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x637) != 0)?((IKReal)1/(x637)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst7)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst7)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x638=(sj18)*(sj18);
IKReal x639=(cj18)*(cj18);
IKReal x640=(r10)*(r10);
IKReal x641=((x638)*(x640));
IKReal x642=(r00)*(r00);
IKReal x643=((x638)*(x642));
IKReal x644=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
IKReal x645=(r01)*(r01);
IKReal x646=((x639)*(x645));
IKReal x647=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
IKReal x648=(r11)*(r11);
IKReal x649=((x639)*(x648));
IKReal x650=((x647)+(x646)+(x644)+(x643)+(x641)+(x649));
j13array[0]=IKatan2(((((IKabs(x650) != 0)?((IKReal)1/(x650)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((-1.00000000000000)*(((IKabs(x650) != 0)?((IKReal)1/(x650)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[1];
IKReal gconst7;
gconst7=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x651=(cj15)*(cj15);
IKReal x652=(sj15)*(sj15);
IKReal x653=((x651)+(x652));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x653) != 0)?((IKReal)1/(x653)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x653) != 0)?((IKReal)1/(x653)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x654=(cj15)*(cj15);
IKReal x655=(sj15)*(sj15);
IKReal x656=((x654)+(x655));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x656) != 0)?((IKReal)1/(x656)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x656) != 0)?((IKReal)1/(x656)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst7)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst7)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x657=(cj15)*(cj15);
IKReal x658=(sj15)*(sj15);
IKReal x659=((x657)+(x658));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x659) != 0)?((IKReal)1/(x659)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x659) != 0)?((IKReal)1/(x659)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IKReal dummyeval[1];
IKReal gconst8;
IKReal x660=(cj18)*(cj18);
IKReal x661=(sj18)*(sj18);
gconst8=IKsign(((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r00)*(r01)*(x660)))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x661)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((cj17)*(r10)*(r11)*(x660)))+(((r00)*(r02)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x661)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18)))));
IKReal x662=(cj18)*(cj18);
IKReal x663=(sj18)*(sj18);
dummyeval[0]=((((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r00)*(r01)*(x662)))+(((-1.00000000000000)*(cj17)*(r00)*(r01)*(x663)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((cj17)*(r10)*(r11)*(x662)))+(((r00)*(r02)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x663)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x664=(sj18)*(sj18);
IKReal x665=(cj18)*(cj18);
dummyeval[0]=((((x664)*((r00)*(r00))))+(((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((x664)*((r10)*(r10))))+(((x665)*((r01)*(r01))))+(((x665)*((r11)*(r11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x666=(sj18)*(sj18);
IKReal x667=(cj18)*(cj18);
dummyeval[0]=((((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj17)*(r00)*(r11)*(x666)))+(((cj17)*(r00)*(r11)*(x667)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x666)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x667))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x668=(sj18)*(sj18);
IKReal x669=(cj18)*(cj18);
IKReal x670=((cj17)*(r01)*(r10)*(x668));
IKReal x671=((cj18)*(r01)*(r12)*(sj17));
IKReal x672=((r00)*(r12)*(sj17)*(sj18));
IKReal x673=((cj17)*(r01)*(r10)*(x669));
IKReal x674=((x672)+(x673)+(x670)+(x671));
IKReal x675=((cj17)*(r00)*(r11)*(x668));
IKReal x676=((cj17)*(r00)*(r11)*(x669));
IKReal x677=((r02)*(r10)*(sj17)*(sj18));
IKReal x678=((cj18)*(r02)*(r11)*(sj17));
IKReal x679=((x678)+(x676)+(x677)+(x675));
j13array[0]=IKatan2(((((IKabs(((x679)+(((-1.00000000000000)*(x674))))) != 0)?((IKReal)1/(((x679)+(((-1.00000000000000)*(x674)))))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((x674)+(((-1.00000000000000)*(x679))))) != 0)?((IKReal)1/(((x674)+(((-1.00000000000000)*(x679)))))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x680=(sj18)*(sj18);
IKReal x681=(cj18)*(cj18);
IKReal x682=(r10)*(r10);
IKReal x683=((x680)*(x682));
IKReal x684=(r00)*(r00);
IKReal x685=((x680)*(x684));
IKReal x686=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
IKReal x687=(r01)*(r01);
IKReal x688=((x681)*(x687));
IKReal x689=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
IKReal x690=(r11)*(r11);
IKReal x691=((x681)*(x690));
IKReal x692=((x689)+(x688)+(x683)+(x686)+(x685)+(x691));
j13array[0]=IKatan2(((((IKabs(x692) != 0)?((IKReal)1/(x692)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((-1.00000000000000)*(((IKabs(x692) != 0)?((IKReal)1/(x692)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
j13array[0]=IKatan2(((gconst8)*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj14)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj15)*(r10)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj14)*(r10)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj14)*(cj18)*(r11)*(sj15)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))), ((gconst8)*(((((-1.00000000000000)*(cj14)*(r00)*(sj15)*(sj18)))+(((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj15)*(r00)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r01)*(sj14)))+(((cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj14)*(cj18)*(r01)*(sj15)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
evalcond[1]=((0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
evalcond[4]=((-0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.250000000000000)*(sj15)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst9;
gconst9=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x693=(sj18)*(sj18);
IKReal x694=(cj18)*(cj18);
dummyeval[0]=((((-1.00000000000000)*(x694)*((r01)*(r01))))+(((-1.00000000000000)*(x693)*((r10)*(r10))))+(((-2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((-1.00000000000000)*(x694)*((r11)*(r11))))+(((-2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((-1.00000000000000)*(x693)*((r00)*(r00)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x695=(sj18)*(sj18);
IKReal x696=(cj18)*(cj18);
dummyeval[0]=((((-1.00000000000000)*(r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x696)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x695)))+(((cj18)*(r01)*(r12)*(sj17)))+(((cj17)*(r01)*(r10)*(x695)))+(((cj17)*(r01)*(r10)*(x696)))+(((r00)*(r12)*(sj17)*(sj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x697=(sj18)*(sj18);
IKReal x698=(cj18)*(cj18);
IKReal x699=((cj17)*(r00)*(r11)*(x697));
IKReal x700=((cj17)*(r00)*(r11)*(x698));
IKReal x701=((r02)*(r10)*(sj17)*(sj18));
IKReal x702=((cj18)*(r02)*(r11)*(sj17));
IKReal x703=((x699)+(x702)+(x700)+(x701));
IKReal x704=((cj17)*(r01)*(r10)*(x697));
IKReal x705=((cj18)*(r01)*(r12)*(sj17));
IKReal x706=((r00)*(r12)*(sj17)*(sj18));
IKReal x707=((cj17)*(r01)*(r10)*(x698));
IKReal x708=((x706)+(x707)+(x704)+(x705));
j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x703)))+(x708))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x703)))+(x708)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((((-1.00000000000000)*(x708)))+(x703))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x708)))+(x703)))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[1];
IKReal gconst10;
gconst10=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst10)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst10)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x709=(sj18)*(sj18);
IKReal x710=(cj18)*(cj18);
IKReal x711=(r10)*(r10);
IKReal x712=((x709)*(x711));
IKReal x713=(r00)*(r00);
IKReal x714=((x709)*(x713));
IKReal x715=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
IKReal x716=(r01)*(r01);
IKReal x717=((x710)*(x716));
IKReal x718=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
IKReal x719=(r11)*(r11);
IKReal x720=((x710)*(x719));
IKReal x721=((x718)+(x712)+(x715)+(x714)+(x717)+(x720));
j13array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x721) != 0)?((IKReal)1/(x721)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((((IKabs(x721) != 0)?((IKReal)1/(x721)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[1];
IKReal gconst10;
gconst10=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst10)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst10)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst9)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst9)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IKReal dummyeval[1];
IKReal gconst11;
IKReal x722=(cj18)*(cj18);
IKReal x723=(sj18)*(sj18);
gconst11=IKsign(((((-1.00000000000000)*(cj17)*(r00)*(r01)*(x723)))+(((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r00)*(r01)*(x722)))+(((cj17)*(r10)*(r11)*(x722)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((r00)*(r02)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x723)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18)))));
IKReal x724=(cj18)*(cj18);
IKReal x725=(sj18)*(sj18);
dummyeval[0]=((((-1.00000000000000)*(cj17)*(r00)*(r01)*(x725)))+(((cj17)*(cj18)*(sj18)*((r10)*(r10))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r11)*(r11))))+(((cj18)*(r11)*(r12)*(sj17)))+(((cj17)*(r00)*(r01)*(x724)))+(((cj17)*(r10)*(r11)*(x724)))+(((cj17)*(cj18)*(sj18)*((r00)*(r00))))+(((-1.00000000000000)*(cj17)*(cj18)*(sj18)*((r01)*(r01))))+(((r00)*(r02)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj17)*(r10)*(r11)*(x725)))+(((cj18)*(r01)*(r02)*(sj17)))+(((r10)*(r12)*(sj17)*(sj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x726=(sj18)*(sj18);
IKReal x727=(cj18)*(cj18);
dummyeval[0]=((((-2.00000000000000)*(cj18)*(r10)*(r11)*(sj18)))+(((-2.00000000000000)*(cj18)*(r00)*(r01)*(sj18)))+(((-1.00000000000000)*(x726)*((r00)*(r00))))+(((-1.00000000000000)*(x727)*((r11)*(r11))))+(((-1.00000000000000)*(x726)*((r10)*(r10))))+(((-1.00000000000000)*(x727)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x728=(sj18)*(sj18);
IKReal x729=(cj18)*(cj18);
dummyeval[0]=((((-1.00000000000000)*(cj17)*(r00)*(r11)*(x728)))+(((-1.00000000000000)*(cj17)*(r00)*(r11)*(x729)))+(((cj17)*(r01)*(r10)*(x728)))+(((cj17)*(r01)*(r10)*(x729)))+(((-1.00000000000000)*(r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r02)*(r11)*(sj17)))+(((cj18)*(r01)*(r12)*(sj17)))+(((r00)*(r12)*(sj17)*(sj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x730=(sj18)*(sj18);
IKReal x731=(cj18)*(cj18);
IKReal x732=((cj17)*(r00)*(r11)*(x730));
IKReal x733=((cj17)*(r00)*(r11)*(x731));
IKReal x734=((r02)*(r10)*(sj17)*(sj18));
IKReal x735=((cj18)*(r02)*(r11)*(sj17));
IKReal x736=((x735)+(x734)+(x733)+(x732));
IKReal x737=((cj17)*(r01)*(r10)*(x730));
IKReal x738=((cj18)*(r01)*(r12)*(sj17));
IKReal x739=((r00)*(r12)*(sj17)*(sj18));
IKReal x740=((cj17)*(r01)*(r10)*(x731));
IKReal x741=((x737)+(x739)+(x738)+(x740));
j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x736)))+(x741))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x736)))+(x741)))):(IKReal)1.0e30))*(((((r12)*(sj17)))+(((-1.00000000000000)*(cj17)*(r11)*(sj18)))+(((cj17)*(cj18)*(r10)))))), ((((IKabs(((x736)+(((-1.00000000000000)*(x741))))) != 0)?((IKReal)1/(((x736)+(((-1.00000000000000)*(x741)))))):(IKReal)1.0e30))*(((((cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(r02)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x742=(sj18)*(sj18);
IKReal x743=(cj18)*(cj18);
IKReal x744=(r10)*(r10);
IKReal x745=((x742)*(x744));
IKReal x746=(r00)*(r00);
IKReal x747=((x742)*(x746));
IKReal x748=((2.00000000000000)*(cj18)*(r10)*(r11)*(sj18));
IKReal x749=(r01)*(r01);
IKReal x750=((x743)*(x749));
IKReal x751=((2.00000000000000)*(cj18)*(r00)*(r01)*(sj18));
IKReal x752=(r11)*(r11);
IKReal x753=((x743)*(x752));
IKReal x754=((x751)+(x750)+(x753)+(x747)+(x745)+(x748));
j13array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x754) != 0)?((IKReal)1/(x754)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r00)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)))))), ((((IKabs(x754) != 0)?((IKReal)1/(x754)):(IKReal)1.0e30))*(((((-1.00000000000000)*(r10)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
j13array[0]=IKatan2(((gconst11)*(((((-1.00000000000000)*(cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj14)))+(((r02)*(sj17)))+(((-1.00000000000000)*(cj15)*(r10)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj14)*(r10)*(sj15)*(sj18)))+(((cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(cj14)*(cj18)*(r11)*(sj15)))))), ((gconst11)*(((((-1.00000000000000)*(cj14)*(r00)*(sj15)*(sj18)))+(((-1.00000000000000)*(r12)*(sj17)))+(((cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj15)*(r00)*(sj14)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj18)*(r01)*(sj14)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj14)*(cj18)*(r01)*(sj15)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x755=(sj18)*(sj18);
IKReal x756=(cj18)*(cj18);
IKReal x757=((cj17)*(r01)*(r10)*(x755));
IKReal x758=((cj18)*(r01)*(r12)*(sj17));
IKReal x759=((r00)*(r12)*(sj17)*(sj18));
IKReal x760=((cj17)*(r01)*(r10)*(x756));
IKReal x761=((x757)+(x759)+(x758)+(x760));
IKReal x762=((cj17)*(r00)*(r11)*(x755));
IKReal x763=((cj17)*(r00)*(r11)*(x756));
IKReal x764=((r02)*(r10)*(sj17)*(sj18));
IKReal x765=((cj18)*(r02)*(r11)*(sj17));
IKReal x766=((x764)+(x765)+(x762)+(x763));
j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x761)))+(x766))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x761)))+(x766)))):(IKReal)1.0e30))*(((((cj16)*(r12)*(sj17)))+(((cj16)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj16)*(cj17)*(r11)*(sj18)))))), ((((IKabs(((((-1.00000000000000)*(x766)))+(x761))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x766)))+(x761)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj16)*(r02)*(sj17)))+(((cj16)*(cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj16)*(cj17)*(cj18)*(r00)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15))))));
dummyeval[0]=((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
evalcond[1]=((-0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
evalcond[4]=((1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
evalcond[5]=((0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((-0.250000000000000)*(sj15)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x767=(cj15)*(cj15);
IKReal x768=(sj15)*(sj15);
IKReal x769=((x768)+(x767));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x769) != 0)?((IKReal)1/(x769)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x769) != 0)?((IKReal)1/(x769)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x770=(cj15)*(cj15);
IKReal x771=(sj15)*(sj15);
IKReal x772=((x771)+(x770));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x772) != 0)?((IKReal)1/(x772)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x772) != 0)?((IKReal)1/(x772)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst4)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst4)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
evalcond[1]=((0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
evalcond[4]=((-1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
evalcond[5]=((-0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.250000000000000)*(sj15)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst5;
gconst5=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst5)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst5)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst3)*(((((r22)*(sj15)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj16)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((cj17)*(cj18)*(r20)*(sj15)*(sj16)))))), ((gconst3)*(((((cj15)*(cj17)*(r21)*(sj16)*(sj18)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)*(sj16)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
j13array[0]=IKatan2(((gconst1)*(((((cj16)*(r11)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj16)))+(((cj16)*(cj17)*(r12)))+(((-1.00000000000000)*(cj16)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(r10)*(sj16)*(sj18)))))), ((gconst1)*(((((-1.00000000000000)*(cj16)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj18)*(r01)*(sj16)))+(((-1.00000000000000)*(r00)*(sj16)*(sj18)))+(((cj16)*(r01)*(sj17)*(sj18)))+(((cj16)*(cj17)*(r02)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign(((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15))))));
dummyeval[0]=((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
evalcond[1]=((-0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
evalcond[4]=((1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
evalcond[5]=((0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((-0.250000000000000)*(sj15)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x773=(cj15)*(cj15);
IKReal x774=(sj15)*(sj15);
IKReal x775=((x773)+(x774));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x775) != 0)?((IKReal)1/(x775)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x775) != 0)?((IKReal)1/(x775)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x776=(cj15)*(cj15);
IKReal x777=(sj15)*(sj15);
IKReal x778=((x777)+(x776));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x778) != 0)?((IKReal)1/(x778)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x778) != 0)?((IKReal)1/(x778)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst4)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst4)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
evalcond[1]=((0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
evalcond[4]=((-1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
evalcond[5]=((-0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.250000000000000)*(sj15)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst5;
gconst5=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst5)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst5)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst3)*(((((r22)*(sj15)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj16)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((cj17)*(cj18)*(r20)*(sj15)*(sj16)))))), ((gconst3)*(((((cj15)*(cj17)*(r21)*(sj16)*(sj18)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)*(sj16)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst2)*(((((r22)*(sj15)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj16)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((cj17)*(cj18)*(r20)*(sj15)*(sj16)))))), ((gconst2)*(((((cj15)*(cj17)*(r21)*(sj16)*(sj18)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)*(sj16)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
IKReal dummyeval[1];
IKReal gconst6;
IKReal x779=(cj18)*(cj18);
IKReal x780=(sj18)*(sj18);
gconst6=IKsign(((((r01)*(r10)*(sj17)*(x779)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x779)))+(((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x780)))+(((r01)*(r10)*(sj17)*(x780)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11)))));
IKReal x781=(cj18)*(cj18);
IKReal x782=(sj18)*(sj18);
dummyeval[0]=((((-1.00000000000000)*(cj17)*(cj18)*(r01)*(r12)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x782)))+(((-1.00000000000000)*(r00)*(r11)*(sj17)*(x781)))+(((r01)*(r10)*(sj17)*(x782)))+(((r01)*(r10)*(sj17)*(x781)))+(((-1.00000000000000)*(cj17)*(r00)*(r12)*(sj18)))+(((cj17)*(r02)*(r10)*(sj18)))+(((cj17)*(cj18)*(r02)*(r11))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal x783=(sj18)*(sj18);
IKReal x784=(cj18)*(cj18);
dummyeval[0]=((((-1.00000000000000)*(cj17)*(r01)*(r10)*(x784)))+(((-1.00000000000000)*(cj17)*(r01)*(r10)*(x783)))+(((cj17)*(r00)*(r11)*(x783)))+(((cj17)*(r00)*(r11)*(x784)))+(((r02)*(r10)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r01)*(r12)*(sj17)))+(((cj18)*(r02)*(r11)*(sj17)))+(((-1.00000000000000)*(r00)*(r12)*(sj17)*(sj18))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
IKReal x785=(sj18)*(sj18);
IKReal x786=(cj18)*(cj18);
IKReal x787=((cj17)*(r01)*(r10)*(x785));
IKReal x788=((cj18)*(r01)*(r12)*(sj17));
IKReal x789=((r00)*(r12)*(sj17)*(sj18));
IKReal x790=((cj17)*(r01)*(r10)*(x786));
IKReal x791=((x790)+(x787)+(x788)+(x789));
IKReal x792=((cj17)*(r00)*(r11)*(x785));
IKReal x793=((cj17)*(r00)*(r11)*(x786));
IKReal x794=((r02)*(r10)*(sj17)*(sj18));
IKReal x795=((cj18)*(r02)*(r11)*(sj17));
IKReal x796=((x793)+(x792)+(x795)+(x794));
j13array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x791)))+(x796))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x791)))+(x796)))):(IKReal)1.0e30))*(((((cj16)*(r12)*(sj17)))+(((cj16)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(cj16)*(cj17)*(r11)*(sj18)))))), ((((IKabs(((((-1.00000000000000)*(x796)))+(x791))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x796)))+(x791)))):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj16)*(r02)*(sj17)))+(((cj16)*(cj17)*(r01)*(sj18)))+(((-1.00000000000000)*(cj16)*(cj17)*(cj18)*(r00)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
j13array[0]=IKatan2(((gconst6)*(((((cj16)*(r11)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj16)))+(((cj16)*(cj17)*(r12)))+(((-1.00000000000000)*(cj16)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(r10)*(sj16)*(sj18)))))), ((gconst6)*(((((-1.00000000000000)*(cj16)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj18)*(r01)*(sj16)))+(((-1.00000000000000)*(r00)*(sj16)*(sj18)))+(((cj16)*(r01)*(sj17)*(sj18)))+(((cj16)*(cj17)*(r02)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
j13array[0]=IKatan2(((gconst0)*(((((cj16)*(r11)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj16)))+(((cj16)*(cj17)*(r12)))+(((-1.00000000000000)*(cj16)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(r10)*(sj16)*(sj18)))))), ((gconst0)*(((((-1.00000000000000)*(cj16)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj18)*(r01)*(sj16)))+(((-1.00000000000000)*(r00)*(sj16)*(sj18)))+(((cj16)*(r01)*(sj17)*(sj18)))+(((cj16)*(cj17)*(r02)))))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IKReal dummyeval[1];
dummyeval[0]=sj16;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj16;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[7];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j16)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
evalcond[2]=((((-1.00000000000000)*(cj18)*(r20)*(sj17)))+(((cj17)*(r22)))+(((r21)*(sj17)*(sj18))));
evalcond[3]=((-0.0950000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
evalcond[4]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
evalcond[5]=((1.00000000000000)+(((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
evalcond[6]=((((-1.00000000000000)*(cj13)*(r01)*(sj17)*(sj18)))+(((cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj17)*(r12)*(sj13)))+(((cj13)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj17)*(sj18))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
j15array[0]=IKatan2(((0.120000000000000)+(((-4.00000000000000)*(cj18)*(npy)))+(((-4.00000000000000)*(npx)*(sj18)))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IKReal dummyeval[1];
IKReal gconst15;
gconst15=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst15)*(((((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst15)*(((((r20)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r21)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j16)), 6.28318530717959)));
evalcond[1]=((((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
evalcond[2]=((((-1.00000000000000)*(cj18)*(r20)*(sj17)))+(((cj17)*(r22)))+(((r21)*(sj17)*(sj18))));
evalcond[3]=((0.0950000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
evalcond[4]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
evalcond[5]=((-1.00000000000000)+(((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
evalcond[6]=((((-1.00000000000000)*(cj13)*(r01)*(sj17)*(sj18)))+(((cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj17)*(r12)*(sj13)))+(((cj13)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r02)))+(((-1.00000000000000)*(r11)*(sj13)*(sj17)*(sj18))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
j15array[0]=IKatan2(((0.120000000000000)+(((4.00000000000000)*(cj18)*(npy)))+(((4.00000000000000)*(npx)*(sj18)))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IKReal dummyeval[1];
IKReal gconst16;
gconst16=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x797=(cj15)*(cj15);
IKReal x798=(sj15)*(sj15);
IKReal x799=((x797)+(x798));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x799) != 0)?((IKReal)1/(x799)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x799) != 0)?((IKReal)1/(x799)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r20)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst16)*(((((r10)*(sj13)*(sj15)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj13)*(r00)*(sj15)*(sj18)))+(((cj15)*(r20)*(sj18)))+(((cj13)*(cj18)*(r01)*(sj15)))+(((cj18)*(r11)*(sj13)*(sj15)))))), ((gconst16)*(((((-1.00000000000000)*(cj15)*(cj18)*(r11)*(sj13)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(r00)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj18)*(r01)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
evalcond[1]=((-0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
evalcond[3]=((1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
evalcond[4]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
evalcond[5]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
evalcond[6]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
j15array[0]=IKatan2(((0.120000000000000)+(((4.00000000000000)*(npy)*(sj17)*(sj18)))+(((-4.00000000000000)*(cj18)*(npx)*(sj17)))+(((4.00000000000000)*(cj17)*(npz)))+(((0.360000000000000)*(sj17)))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IKReal dummyeval[1];
IKReal gconst17;
gconst17=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x800=(cj15)*(cj15);
IKReal x801=(sj15)*(sj15);
IKReal x802=((x801)+(x800));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x802) != 0)?((IKReal)1/(x802)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x802) != 0)?((IKReal)1/(x802)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x803=(cj15)*(cj15);
IKReal x804=(sj15)*(sj15);
IKReal x805=((x804)+(x803));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x805) != 0)?((IKReal)1/(x805)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x805) != 0)?((IKReal)1/(x805)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst17)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst17)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
evalcond[1]=((0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
evalcond[3]=((-1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
evalcond[4]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
evalcond[5]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
evalcond[6]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
j15array[0]=IKatan2(((0.120000000000000)+(((4.00000000000000)*(cj18)*(npx)*(sj17)))+(((-4.00000000000000)*(cj17)*(npz)))+(((-0.360000000000000)*(sj17)))+(((-4.00000000000000)*(npy)*(sj17)*(sj18)))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IKReal dummyeval[1];
IKReal gconst18;
gconst18=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst18)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst18)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
j15array[0]=IKatan2(((((IKabs(cj16) != 0)?((IKReal)1/(cj16)):(IKReal)1.0e30))*(((((4.00000000000000)*(npy)*(sj17)*(sj18)))+(((-0.380000000000000)*(sj16)))+(((-4.00000000000000)*(cj18)*(npx)*(sj17)))+(((0.120000000000000)*(cj16)))+(((4.00000000000000)*(cj17)*(npz)))+(((0.360000000000000)*(sj17)))))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IKReal dummyeval[1];
IKReal gconst12;
gconst12=IKsign(((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15))))));
dummyeval[0]=((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
evalcond[1]=((-0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
evalcond[4]=((1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
evalcond[5]=((0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((-0.250000000000000)*(sj15)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst13;
gconst13=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x806=(cj15)*(cj15);
IKReal x807=(sj15)*(sj15);
IKReal x808=((x807)+(x806));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x808) != 0)?((IKReal)1/(x808)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x808) != 0)?((IKReal)1/(x808)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x809=(cj15)*(cj15);
IKReal x810=(sj15)*(sj15);
IKReal x811=((x810)+(x809));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x811) != 0)?((IKReal)1/(x811)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x811) != 0)?((IKReal)1/(x811)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst13)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst13)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
evalcond[1]=((0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
evalcond[4]=((-1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
evalcond[5]=((-0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.250000000000000)*(sj15)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst14;
gconst14=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst14)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst14)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst12)*(((((r22)*(sj15)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj16)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((cj17)*(cj18)*(r20)*(sj15)*(sj16)))))), ((gconst12)*(((((cj15)*(cj17)*(r21)*(sj16)*(sj18)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)*(sj16)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
j15array[0]=IKatan2(((((IKabs(sj16) != 0)?((IKReal)1/(sj16)):(IKReal)1.0e30))*(((((0.120000000000000)*(sj16)))+(((-4.00000000000000)*(cj18)*(npy)))+(((0.380000000000000)*(cj16)))+(((-4.00000000000000)*(npx)*(sj18)))))), ((-0.940000000000000)+(((4.00000000000000)*(cj17)*(cj18)*(npx)))+(((4.00000000000000)*(npz)*(sj17)))+(((-4.00000000000000)*(cj17)*(npy)*(sj18)))+(((-0.360000000000000)*(cj17)))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];

{
IKReal dummyeval[1];
IKReal gconst12;
gconst12=IKsign(((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15))))));
dummyeval[0]=((((sj16)*((cj15)*(cj15))))+(((sj16)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j16)), 6.28318530717959)));
evalcond[1]=((-0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
evalcond[4]=((1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
evalcond[5]=((0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.0900000000000000)*(sj17)))+(((-0.250000000000000)*(sj15)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst13;
gconst13=IKsign(((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15))))));
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=((((-1.00000000000000)*((cj15)*(cj15))))+(((-1.00000000000000)*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x812=(cj15)*(cj15);
IKReal x813=(sj15)*(sj15);
IKReal x814=((x812)+(x813));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x814) != 0)?((IKReal)1/(x814)):(IKReal)1.0e30))*(((((cj15)*(cj17)*(cj18)*(r10)*(sj13)))+(((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(r11)*(sj13)*(sj18)))+(((cj13)*(cj15)*(r02)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r01)*(sj18)))+(((cj15)*(r12)*(sj13)*(sj17)))+(((cj13)*(cj15)*(cj17)*(cj18)*(r00)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x814) != 0)?((IKReal)1/(x814)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj13)*(cj17)*(r01)*(sj15)*(sj18)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((cj17)*(r11)*(sj13)*(sj15)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj17)*(cj18)*(r00)*(sj15)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))+(((-1.00000000000000)*(r12)*(sj13)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(cj18)*(r10)*(sj13)*(sj15)))+(((-1.00000000000000)*(cj13)*(r02)*(sj15)*(sj17)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
IKReal x815=(cj15)*(cj15);
IKReal x816=(sj15)*(sj15);
IKReal x817=((x816)+(x815));
j14array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x817) != 0)?((IKReal)1/(x817)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj17)*(cj18)*(r20)*(sj15)))+(((cj17)*(r21)*(sj15)*(sj18)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(r22)*(sj15)*(sj17)))))), ((((IKabs(x817) != 0)?((IKReal)1/(x817)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj17)*(r22)*(sj15)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst13)*(((((r11)*(sj13)*(sj15)*(sj17)*(sj18)))+(((cj17)*(r12)*(sj13)*(sj15)))+(((cj13)*(cj17)*(r02)*(sj15)))+(((cj15)*(r21)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj18)*(r10)*(sj13)*(sj15)*(sj17)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj13)*(cj18)*(r00)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((cj13)*(r01)*(sj15)*(sj17)*(sj18)))))), ((gconst13)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((cj15)*(cj18)*(r10)*(sj13)*(sj17)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(r11)*(sj13)*(sj17)*(sj18)))+(((cj13)*(cj15)*(cj18)*(r00)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj15)*(r01)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj15)*(cj17)*(r02)))+(((-1.00000000000000)*(cj15)*(cj17)*(r12)*(sj13)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(j16, 6.28318530717959)));
evalcond[1]=((0.0950000000000000)+(((cj18)*(npy)))+(((npx)*(sj18))));
evalcond[2]=((((r20)*(sj18)))+(((cj18)*(r21))));
evalcond[3]=((0.235000000000000)+(((-1.00000000000000)*(cj17)*(cj18)*(npx)))+(((0.250000000000000)*(cj15)))+(((cj17)*(npy)*(sj18)))+(((0.0900000000000000)*(cj17)))+(((-1.00000000000000)*(npz)*(sj17))));
evalcond[4]=((-1.00000000000000)+(((-1.00000000000000)*(cj13)*(r10)*(sj18)))+(((-1.00000000000000)*(cj13)*(cj18)*(r11)))+(((cj18)*(r01)*(sj13)))+(((r00)*(sj13)*(sj18))));
evalcond[5]=((-0.0300000000000000)+(((npy)*(sj17)*(sj18)))+(((0.250000000000000)*(sj15)))+(((0.0900000000000000)*(sj17)))+(((cj17)*(npz)))+(((-1.00000000000000)*(cj18)*(npx)*(sj17))));
evalcond[6]=((((-1.00000000000000)*(cj13)*(cj18)*(r01)))+(((-1.00000000000000)*(cj13)*(r00)*(sj18)))+(((-1.00000000000000)*(r10)*(sj13)*(sj18)))+(((-1.00000000000000)*(cj18)*(r11)*(sj13))));
evalcond[7]=((((cj13)*(r12)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r11)*(sj18)))+(((-1.00000000000000)*(cj17)*(cj18)*(r00)*(sj13)))+(((cj13)*(cj17)*(cj18)*(r10)))+(((-1.00000000000000)*(r02)*(sj13)*(sj17)))+(((cj17)*(r01)*(sj13)*(sj18))));
evalcond[8]=((((r01)*(sj13)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj13)*(r11)*(sj17)*(sj18)))+(((cj17)*(r02)*(sj13)))+(((cj13)*(cj18)*(r10)*(sj17)))+(((-1.00000000000000)*(cj13)*(cj17)*(r12)))+(((-1.00000000000000)*(cj18)*(r00)*(sj13)*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst14;
gconst14=IKsign((((cj15)*(cj15))+((sj15)*(sj15))));
dummyeval[0]=(((cj15)*(cj15))+((sj15)*(sj15)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst14)*(((((cj15)*(r21)*(sj17)*(sj18)))+(((cj15)*(cj17)*(r22)))+(((-1.00000000000000)*(cj15)*(cj18)*(r20)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj18)))+(((r22)*(sj15)*(sj17)))+(((cj17)*(cj18)*(r20)*(sj15)))))), ((gconst14)*(((((cj17)*(r22)*(sj15)))+(((r21)*(sj15)*(sj17)*(sj18)))+(((-1.00000000000000)*(cj15)*(r22)*(sj17)))+(((cj15)*(cj17)*(r21)*(sj18)))+(((-1.00000000000000)*(cj18)*(r20)*(sj15)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
j14array[0]=IKatan2(((gconst12)*(((((r22)*(sj15)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj17)*(r21)*(sj15)*(sj16)*(sj18)))+(((cj15)*(cj18)*(r21)))+(((cj15)*(r20)*(sj18)))+(((cj17)*(cj18)*(r20)*(sj15)*(sj16)))))), ((gconst12)*(((((cj15)*(cj17)*(r21)*(sj16)*(sj18)))+(((r20)*(sj15)*(sj18)))+(((cj18)*(r21)*(sj15)))+(((-1.00000000000000)*(cj15)*(r22)*(sj16)*(sj17)))+(((-1.00000000000000)*(cj15)*(cj17)*(cj18)*(r20)*(sj16)))))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(6);
solution.basesol[0].foffset = j13;
solution.basesol[1].foffset = j14;
solution.basesol[2].foffset = j15;
solution.basesol[3].foffset = j16;
solution.basesol[4].foffset = j17;
solution.basesol[5].foffset = j18;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

}

}
    }
}
return vsolutions.size()>0;
}

static inline bool checkconsistency8(const IKReal* Breal)
{
    IKReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    IKReal tol = 1e-5*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IKReal* matcoeffs, IKReal* rawroots, int& numroots)
{
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    IKReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IKReal IKFAST_ALIGNED16(A[8*8]);
    IKReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IKReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IKReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IKReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IKReal IKFAST_ALIGNED16(wr[16]);
    IKReal IKFAST_ALIGNED16(wi[16]);
    IKReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IKReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IKReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IKReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IKReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "6ae340c030bbcafef0b4ade1584cc3c4"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(std::size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
