/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 41 generated on 2011-05-11 19:28:26.374006
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }
#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IKReal)6.28318530717959)
#define IKPI  ((IKReal)3.14159265358979)
#define IKPI_2  ((IKReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif							 // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C"
{
	void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
	void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
	void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
	void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
	void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
	void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}


using namespace std;			 // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE
{
	#endif

	#ifdef IKFAST_REAL
	typedef IKFAST_REAL IKReal;
	#else
	typedef double IKReal;
	#endif

	class IKSolution
	{
		public:
			/// Gets a solution given its free parameters
			/// \param pfree The free parameters required, range is in [-pi,pi]
			void GetSolution(IKReal* psolution, const IKReal* pfree) const
			{
				for(std::size_t i = 0; i < basesol.size(); ++i)
				{
					if( basesol[i].freeind < 0 )
						psolution[i] = basesol[i].foffset;
					else
					{
						IKFAST_ASSERT(pfree != NULL);
						psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
						if( psolution[i] > IKPI )
						{
							psolution[i] -= IK2PI;
						}
						else if( psolution[i] < -IKPI )
						{
							psolution[i] += IK2PI;
						}
					}
				}
			}

			/// Gets the free parameters the solution requires to be set before a full solution can be returned
			/// \return vector of indices indicating the free parameters
			const std::vector<int>& GetFree() const { return vfree; }

			struct VARIABLE
			{
				VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
				VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
				int freeind;
								 ///< joint value is fmul*sol[freeind]+foffset
				IKReal fmul, foffset;
			};

								 ///< solution and their offsets if joints are mimiced
			std::vector<VARIABLE> basesol;
			std::vector<int> vfree;
	};

	inline float IKabs(float f) { return fabsf(f); }
	inline double IKabs(double f) { return fabs(f); }

	inline float IKlog(float f) { return logf(f); }
	inline double IKlog(double f) { return log(f); }

	#ifndef IKFAST_SINCOS_THRESH
	#define IKFAST_SINCOS_THRESH ((IKReal)0.000001)
	#endif

	inline float IKasin(float f)
	{
								 // any more error implies something is wrong with the solver
		IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH );
		if( f <= -1 ) return -IKPI_2;
		else if( f >= 1 ) return IKPI_2;
		return asinf(f);
	}
	inline double IKasin(double f)
	{
								 // any more error implies something is wrong with the solver
		IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH );
		if( f <= -1 ) return -IKPI_2;
		else if( f >= 1 ) return IKPI_2;
		return asin(f);
	}

	// return positive value in [0,y)
	inline float IKfmod(float x, float y)
	{
		while(x < 0)
		{
			x += y;
		}
		return fmodf(x,y);
	}

	// return positive value in [0,y)
	inline float IKfmod(double x, double y)
	{
		while(x < 0)
		{
			x += y;
		}
		return fmod(x,y);
	}

	inline float IKacos(float f)
	{
								 // any more error implies something is wrong with the solver
		IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH );
		if( f <= -1 ) return IKPI;
		else if( f >= 1 ) return 0;
		return acosf(f);
	}
	inline double IKacos(double f)
	{
								 // any more error implies something is wrong with the solver
		IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH );
		if( f <= -1 ) return IKPI;
		else if( f >= 1 ) return 0;
		return acos(f);
	}
	inline float IKsin(float f) { return sinf(f); }
	inline double IKsin(double f) { return sin(f); }
	inline float IKcos(float f) { return cosf(f); }
	inline double IKcos(double f) { return cos(f); }
	inline float IKtan(float f) { return tanf(f); }
	inline double IKtan(double f) { return tan(f); }
	inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
	inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
	inline float IKatan2(float fy, float fx)
	{
		if( isnan(fy) )
		{
								 // if both are nan, probably wrong value will be returned
			IKFAST_ASSERT(!isnan(fx));
			return IKPI_2;
		}
		else if( isnan(fx) )
		{
			return 0;
		}
		return atan2f(fy,fx);
	}
	inline double IKatan2(double fy, double fx)
	{
		if( isnan(fy) )
		{
								 // if both are nan, probably wrong value will be returned
			IKFAST_ASSERT(!isnan(fx));
			return IKPI_2;
		}
		else if( isnan(fx) )
		{
			return 0;
		}
		return atan2(fy,fx);
	}

	inline float IKsign(float f)
	{
		if( f > 0 )
		{
			return 1.0f;
		}
		else if( f < 0 )
		{
			return -1.0f;
		}
		return 0;
	}

	inline double IKsign(double f)
	{
		if( f > 0 )
		{
			return 1.0;
		}
		else if( f < 0 )
		{
			return -1.0;
		}
		return 0;
	}

	/// solves the forward kinematics equations.
	/// \param pfree is an array specifying the free joints of the chain.
	IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot)
	{
		IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85;
		x0=IKcos(j[0]);
		x1=IKcos(j[1]);
		x2=IKsin(j[2]);
		x3=IKcos(j[2]);
		x4=IKsin(j[1]);
		x5=IKsin(j[4]);
		x6=IKsin(j[0]);
		x7=IKsin(j[3]);
		x8=((x6)*(x7));
		x9=IKcos(j[3]);
		x10=((x0)*(x1)*(x3));
		x11=((x0)*(x2)*(x4));
		x12=((((-1.00000000000000)*(x11)))+(x10));
		x13=((x12)*(x9));
		x14=IKcos(j[4]);
		x15=((x0)*(x1)*(x2));
		x16=((x0)*(x3)*(x4));
		x17=((x15)+(x16));
		x18=((-1.00000000000000)*(x17));
		x19=IKsin(j[5]);
		x20=((x6)*(x9));
		x21=((((-1.00000000000000)*(x10)))+(x11));
		x22=((x21)*(x7));
		x23=IKcos(j[5]);
		x24=((((-1.00000000000000)*(x13)))+(x8));
		x25=((x24)*(x5));
		x26=((x14)*(x18));
		x27=((x25)+(x26));
		x28=((-1.00000000000000)*(x27));
		x29=((x2)*(x4)*(x6));
		x30=((x1)*(x3)*(x6));
		x31=((x0)*(x7));
		x32=((((-1.00000000000000)*(x29)))+(x30));
		x33=((x32)*(x9));
		x34=((x33)+(x31));
		x35=((x1)*(x2)*(x6));
		x36=((x3)*(x4)*(x6));
		x37=((x36)+(x35));
		x38=((-1.00000000000000)*(x37));
		x39=((x1)*(x2));
		x40=((x3)*(x4));
		x41=((x39)+(x40));
		x42=((x2)*(x4));
		x43=((x1)*(x3));
		x44=((((-1.00000000000000)*(x43)))+(x42));
		x45=((((-1.00000000000000)*(x30)))+(x29));
		x46=((x45)*(x7));
		x47=((x0)*(x9));
		x48=((x46)+(x47));
		x49=((-1.00000000000000)*(x34));
		x50=((x49)*(x5));
		x51=((x14)*(x38));
		x52=((x51)+(x50));
		x53=((-1.00000000000000)*(x52));
		x54=((x14)*(x44));
		x55=((x41)*(x5)*(x9));
		x56=((x55)+(x54));
		x57=((-1.00000000000000)*(x56));
		x58=((-1.00000000000000)*(x41));
		x59=((-1.00000000000000)*(x48));
		x60=((0.0900000000000000)*(x35));
		x61=((0.0900000000000000)*(x36));
		x62=((x60)+(x61));
		x63=((-1.00000000000000)*(x62));
		x64=((0.0900000000000000)*(x42));
		x65=((0.0900000000000000)*(x43));
		x66=((x64)+(((-1.00000000000000)*(x65))));
		x67=((0.0335000000000000)*(x35));
		x68=((0.0335000000000000)*(x36));
		x69=((x67)+(x68));
		x70=((0.0335000000000000)*(x43));
		x71=((0.0335000000000000)*(x42));
		x72=((((-1.00000000000000)*(x71)))+(x70));
		x73=((0.0335000000000000)*(x40));
		x74=((0.0335000000000000)*(x39));
		x75=((x74)+(x73));
		x76=((0.0900000000000000)*(x40));
		x77=((0.0900000000000000)*(x39));
		x78=((x77)+(x76));
		x79=((0.0900000000000000)*(x31));
		x80=((0.0900000000000000)*(x33));
		x81=((x79)+(x80));
		x82=((-1.00000000000000)*(x81));
		x83=((-0.0335000000000000)*(x31));
		x84=((-0.0335000000000000)*(x33));
		x85=((x83)+(x84));
		eerot[0]=((((x18)*(x5)))+(((x14)*(((x13)+(((-1.00000000000000)*(x8))))))));
		eerot[1]=((((x19)*(x28)))+(((x23)*(((((-1.00000000000000)*(x20)))+(x22))))));
		eerot[2]=((((x23)*(x28)))+(((x19)*(((((-1.00000000000000)*(x22)))+(x20))))));
		eetrans[0]=((((-0.250000000000000)*(x0)*(x4)))+(((x5)*(((((0.0335000000000000)*(x15)))+(((0.0335000000000000)*(x16)))))))+(((0.0200000000000000)*(x0)*(x1)))+(((0.0200000000000000)*(x11)))+(((x14)*(((((-0.0335000000000000)*(x13)))+(((0.0335000000000000)*(x8)))))))+(((-0.0200000000000000)*(x10)))+(((x14)*(((((-0.0900000000000000)*(x16)))+(((-0.0900000000000000)*(x15)))))))+(((x5)*(((((-0.0900000000000000)*(x13)))+(((0.0900000000000000)*(x8)))))))+(((-0.220000000000000)*(x16)))+(((-0.220000000000000)*(x15)))+(((0.0850000000000000)*(x6))));
		eerot[3]=((((0.965925532213041)*(x38)*(x5)))+(((-0.258820142606703)*(x14)*(x58)*(x9)))+(((0.965925532213041)*(x14)*(x34)))+(((-0.258820142606703)*(x44)*(x5))));
		eerot[4]=((((0.965925532213041)*(x19)*(x53)))+(((-0.258820142606703)*(x19)*(x57)))+(((0.965925532213041)*(x23)*(x48)))+(((-0.258820142606703)*(x23)*(x41)*(x7))));
		eerot[5]=((((0.965925532213041)*(x19)*(x59)))+(((-0.258820142606703)*(x23)*(x57)))+(((-0.258820142606703)*(x19)*(x58)*(x7)))+(((0.965925532213041)*(x23)*(x53))));
		eetrans[1]=((-0.145000000000000)+(((0.0193185106442608)*(x29)))+(((-0.0193185106442608)*(x30)))+(((0.0647050356516757)*(x1)))+(((0.0193185106442608)*(x1)*(x6)))+(((0.965925532213041)*(x14)*(x85)))+(((-0.00517640285213405)*(x39)))+(((-0.00517640285213405)*(x40)))+(((-0.0569404313734746)*(x42)))+(((0.965925532213041)*(x14)*(x63)))+(((-0.212503617086869)*(x36)))+(((-0.212503617086869)*(x35)))+(((0.0569404313734746)*(x43)))+(((-0.258820142606703)*(x5)*(x78)*(x9)))+(((0.00517640285213405)*(x4)))+(((-0.241481383053260)*(x4)*(x6)))+(((-0.258820142606703)*(x14)*(x75)*(x9)))+(((-0.258820142606703)*(x14)*(x66)))+(((0.965925532213041)*(x5)*(x82)))+(((0.965925532213041)*(x5)*(x69)))+(((-0.0821036702381085)*(x0)))+(((-0.258820142606703)*(x5)*(x72))));
		eerot[6]=((((0.258820142606703)*(x38)*(x5)))+(((0.965925532213041)*(x14)*(x58)*(x9)))+(((0.258820142606703)*(x14)*(x34)))+(((0.965925532213041)*(x44)*(x5))));
		eerot[7]=((((0.965925532213041)*(x19)*(x57)))+(((0.258820142606703)*(x19)*(x53)))+(((0.965925532213041)*(x23)*(x41)*(x7)))+(((0.258820142606703)*(x23)*(x48))));
		eerot[8]=((((0.965925532213041)*(x19)*(x58)*(x7)))+(((0.258820142606703)*(x19)*(x59)))+(((0.258820142606703)*(x23)*(x53)))+(((0.965925532213041)*(x23)*(x57))));
		eetrans[2]=((0.380000000000000)+(((-0.00517640285213405)*(x30)))+(((0.965925532213041)*(x5)*(x78)*(x9)))+(((0.0193185106442608)*(x39)))+(((0.965925532213041)*(x14)*(x66)))+(((0.0193185106442608)*(x40)))+(((-0.0569404313734746)*(x36)))+(((-0.0569404313734746)*(x35)))+(((0.258820142606703)*(x5)*(x69)))+(((-0.212503617086869)*(x43)))+(((0.212503617086869)*(x42)))+(((0.00517640285213405)*(x1)*(x6)))+(((0.965925532213041)*(x5)*(x72)))+(((0.258820142606703)*(x5)*(x82)))+(((-0.0647050356516757)*(x4)*(x6)))+(((-0.0193185106442608)*(x4)))+(((0.00517640285213405)*(x29)))+(((0.258820142606703)*(x14)*(x85)))+(((0.965925532213041)*(x14)*(x75)*(x9)))+(((-0.0219997121215697)*(x0)))+(((-0.241481383053260)*(x1)))+(((0.258820142606703)*(x14)*(x63))));
	}

	IKFAST_API int getNumFreeParameters() { return 0; }
	IKFAST_API int* getFreeParameters() { return NULL; }
	IKFAST_API int getNumJoints() { return 6; }

	IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

	IKFAST_API int getIKType() { return 0x67000001; }

	class IKSolver
	{
		public:
			IKReal j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j7,cj7,sj7,htj7,j8,cj8,sj8,htj8,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;

			bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions)
			{
				for(int dummyiter = 0; dummyiter < 1; ++dummyiter)
				{
					vsolutions.resize(0); vsolutions.reserve(8);
					r00 = eerot[0*3+0];
					r01 = eerot[0*3+1];
					r02 = eerot[0*3+2];
					r10 = eerot[1*3+0];
					r11 = eerot[1*3+1];
					r12 = eerot[1*3+2];
					r20 = eerot[2*3+0];
					r21 = eerot[2*3+1];
					r22 = eerot[2*3+2];
					px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

					new_r00=((-1.00000000000000)*(r02));
					new_r01=r01;
					new_r02=r00;
					new_px=((px)+(((0.0335000000000000)*(r00))));
					new_r10=((((-0.258820142606703)*(r22)))+(((-0.965925532213041)*(r12))));
					new_r11=((((0.258820142606703)*(r21)))+(((0.965925532213041)*(r11))));
					new_r12=((((0.258820142606703)*(r20)))+(((0.965925532213041)*(r10))));
					new_py=((0.0417075479803439)+(((0.965925532213041)*(py)))+(((0.0323585053291369)*(r10)))+(((0.258820142606703)*(pz)))+(((0.00867047477732454)*(r20))));
					new_r20=((((-0.965925532213041)*(r22)))+(((0.258820142606703)*(r12))));
					new_r21=((((-0.258820142606703)*(r11)))+(((0.965925532213041)*(r21))));
					new_r22=((((-0.258820142606703)*(r10)))+(((0.965925532213041)*(r20))));
					new_pz=((-0.404580622918927)+(((-0.00867047477732454)*(r10)))+(((0.965925532213041)*(pz)))+(((-0.258820142606703)*(py)))+(((0.0323585053291369)*(r20))));
					r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
					pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
					npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
					npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
					npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
					rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
					rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
					rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
					rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
					rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
					rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
					rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
					rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
					rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
					IKReal op[72], zeror[48];
					int numroots;
					IKReal x86=((2.27272727272727)*(pp));
					IKReal x87=((1.40909090909091)*(npx));
					IKReal x88=((0.0909090909090909)*(npz));
					IKReal x89=((0.0909090909090909)*(npy));
					IKReal x90=((0.0850000000000000)*(r22));
					IKReal x91=((-0.181818181818182)*(npx));
					IKReal x92=((2.81818181818182)*(npy));
					IKReal x93=((0.0850000000000000)*(r21));
					IKReal x94=((0.170000000000000)*(r20));
					IKReal x95=((2.00000000000000)*(rxp1_2));
					IKReal x96=((-0.0850000000000000)*(r21));
					IKReal x97=((rxp0_2)+(x90));
					IKReal x98=((0.181818181818182)*(npx));
					IKReal x99=((2.00000000000000)*(npz));
					IKReal x100=((2.00000000000000)*(rxp2_2));
					IKReal x101=((0.180000000000000)*(r21));
					IKReal x102=((x99)+(x98));
					IKReal x103=((0.360000000000000)*(r20));
					IKReal x104=((0.340000000000000)*(r21));
					IKReal x105=((0.00772727272727273)+(((-1.00000000000000)*(x89))));
					IKReal x106=((0.590909090909091)*(npx));
					IKReal x107=((0.00772727272727273)+(x89));
					IKReal x108=((x90)+(((-1.00000000000000)*(rxp0_2))));
					IKReal x109=((-0.00772727272727273)+(((-1.00000000000000)*(x89))));
					IKReal x110=((-1.18181818181818)*(npy));
					IKReal x111=((-0.0154545454545455)+(x107));
					IKReal x112=((rxp0_2)+(((-1.00000000000000)*(x90))));
					IKReal x113=((-2.00000000000000)*(rxp1_2));
					IKReal x114=((-1.00000000000000)*(x97));
					op[0]=((0.0599431818181818)+(x88)+(x86)+(((-1.00000000000000)*(x87))));
					op[1]=x105;
					op[2]=x92;
					op[3]=x91;
					op[4]=((0.0599431818181818)+(x88)+(x86)+(x87));
					op[5]=x107;
					op[6]=x114;
					op[7]=x93;
					op[8]=x95;
					op[9]=x94;
					op[10]=x112;
					op[11]=x96;
					op[12]=x109;
					op[13]=((0.0599431818181818)+(x86)+(((-1.00000000000000)*(x88)))+(((-1.00000000000000)*(x87))));
					op[14]=x91;
					op[15]=x92;
					op[16]=x111;
					op[17]=((0.0599431818181818)+(x86)+(x87)+(((-1.00000000000000)*(x88))));
					op[18]=x93;
					op[19]=x108;
					op[20]=x94;
					op[21]=x95;
					op[22]=x96;
					op[23]=x97;
					op[24]=((0.0163636363636364)+(((-1.00000000000000)*(x102))));
					op[25]=0;
					op[26]=((0.363636363636364)*(npy));
					op[27]=0;
					op[28]=((0.0163636363636364)+(x98)+(((-1.00000000000000)*(x99))));
					op[29]=0;
					op[30]=((((-1.00000000000000)*(x100)))+(x101)+(x94));
					op[31]=0;
					op[32]=((((-1.00000000000000)*(x104)))+(x103));
					op[33]=0;
					op[34]=((((-1.00000000000000)*(x101)))+(((-1.00000000000000)*(x100)))+(((-1.00000000000000)*(x94))));
					op[35]=0;
					op[36]=0;
					op[37]=((-0.0163636363636364)+(x98)+(((-1.00000000000000)*(x99))));
					op[38]=0;
					op[39]=((-0.363636363636364)*(npy));
					op[40]=0;
					op[41]=((-0.0163636363636364)+(((-1.00000000000000)*(x102))));
					op[42]=0;
					op[43]=((((-1.00000000000000)*(x100)))+(x101)+(((-1.00000000000000)*(x94))));
					op[44]=0;
					op[45]=((x104)+(x103));
					op[46]=0;
					op[47]=((((-1.00000000000000)*(x101)))+(((-1.00000000000000)*(x100)))+(x94));
					op[48]=((-0.120056818181818)+(x106)+(x86)+(((-1.00000000000000)*(x88))));
					op[49]=x105;
					op[50]=x110;
					op[51]=x91;
					op[52]=((-0.120056818181818)+(((-1.00000000000000)*(x106)))+(x86)+(((-1.00000000000000)*(x88))));
					op[53]=x107;
					op[54]=x97;
					op[55]=x93;
					op[56]=x113;
					op[57]=x94;
					op[58]=x108;
					op[59]=x96;
					op[60]=x109;
					op[61]=((-0.120056818181818)+(x106)+(x88)+(x86));
					op[62]=x91;
					op[63]=x110;
					op[64]=x111;
					op[65]=((-0.120056818181818)+(((-1.00000000000000)*(x106)))+(x88)+(x86));
					op[66]=x93;
					op[67]=x112;
					op[68]=x94;
					op[69]=x113;
					op[70]=x96;
					op[71]=x114;
					solvedialyticpoly8qep(op,zeror,numroots);
					IKReal j7array[16], cj7array[16], sj7array[16], j8array[16], cj8array[16], sj8array[16], j6array[16], cj6array[16], sj6array[16];
					int numsolutions = 0;
					for(int ij7 = 0; ij7 < numroots; ij7 += 3)
					{
						IKReal htj7 = zeror[ij7+0], htj8 = zeror[ij7+1], htj6 = zeror[ij7+2];
						j7array[numsolutions]=((2.00000000000000)*(atan(htj7)));
						j8array[numsolutions]=((2.00000000000000)*(atan(htj8)));
						j6array[numsolutions]=((2.00000000000000)*(atan(htj6)));
						IKReal x115=(htj7)*(htj7);
						IKReal x116=(htj8)*(htj8);
						IKReal x117=(htj6)*(htj6);
						cj7array[numsolutions]=((((IKabs(((1.00000000000000)+(x115))) != 0)?((IKReal)1/(((1.00000000000000)+(x115)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x115))))));
						cj8array[numsolutions]=((((IKabs(((1.00000000000000)+(x116))) != 0)?((IKReal)1/(((1.00000000000000)+(x116)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x116))))));
						cj6array[numsolutions]=((((IKabs(((1.00000000000000)+(x117))) != 0)?((IKReal)1/(((1.00000000000000)+(x117)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x117))))));
						sj7array[numsolutions]=((2.00000000000000)*(htj7)*(((IKabs(((1.00000000000000)+((htj7)*(htj7)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj7)*(htj7))))):(IKReal)1.0e30)));
						sj8array[numsolutions]=((2.00000000000000)*(htj8)*(((IKabs(((1.00000000000000)+((htj8)*(htj8)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj8)*(htj8))))):(IKReal)1.0e30)));
						sj6array[numsolutions]=((2.00000000000000)*(htj6)*(((IKabs(((1.00000000000000)+((htj6)*(htj6)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj6)*(htj6))))):(IKReal)1.0e30)));
						if( j7array[numsolutions] > IKPI )
						{
							j7array[numsolutions]-=IK2PI;
						}
						else if( j7array[numsolutions] < -IKPI )
						{
							j7array[numsolutions]+=IK2PI;
						}
						if( j8array[numsolutions] > IKPI )
						{
							j8array[numsolutions]-=IK2PI;
						}
						else if( j8array[numsolutions] < -IKPI )
						{
							j8array[numsolutions]+=IK2PI;
						}
						if( j6array[numsolutions] > IKPI )
						{
							j6array[numsolutions]-=IK2PI;
						}
						else if( j6array[numsolutions] < -IKPI )
						{
							j6array[numsolutions]+=IK2PI;
						}
						bool valid = true;
						for( int kj7 = 0; kj7 < numsolutions; ++kj7)
						{
							if( IKabs(cj7array[kj7]-cj7array[numsolutions]) < 0.00001 && IKabs(sj7array[kj7]-sj7array[numsolutions]) < 0.00001 &&IKabs(cj8array[kj7]-cj8array[numsolutions]) < 0.00001 && IKabs(sj8array[kj7]-sj8array[numsolutions]) < 0.00001 &&IKabs(cj6array[kj7]-cj6array[numsolutions]) < 0.00001 && IKabs(sj6array[kj7]-sj6array[numsolutions]) < 0.00001 && 1 )
							{
								valid=false; break;
							}
						}
						if( valid ) { numsolutions++; }
					}
					for(int ij7 = 0; ij7 < numsolutions; ++ij7)
					{
						j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

						j8 = j8array[ij7]; cj8 = cj8array[ij7]; sj8 = sj8array[ij7];

						j6 = j6array[ij7]; cj6 = cj6array[ij7]; sj6 = sj6array[ij7];

						{
							IKReal dummyeval[1];
							IKReal gconst1;
							gconst1=IKsign(sj6);
							dummyeval[0]=sj6;
							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
							{
								{
									IKReal dummyeval[1];
									IKReal gconst0;
									IKReal x118=(sj8)*(sj8);
									IKReal x119=(cj8)*(cj8);
									gconst0=IKsign(((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x119)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x118)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((r01)*(r10)*(sj7)*(x118)))+(((r01)*(r10)*(sj7)*(x119)))));
									IKReal x120=(sj8)*(sj8);
									IKReal x121=(cj8)*(cj8);
									dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((r01)*(r10)*(sj7)*(x121)))+(((r01)*(r10)*(sj7)*(x120)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x120)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x121))));
									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
									{
										{
											IKReal dummyeval[1];
											IKReal x122=(sj8)*(sj8);
											IKReal x123=(cj8)*(cj8);
											dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x123)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x122)))+(((cj8)*(r02)*(r11)*(sj7)))+(((cj7)*(r00)*(r11)*(x122)))+(((cj7)*(r00)*(r11)*(x123)))+(((r02)*(r10)*(sj7)*(sj8))));
											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
											{
												{
													IKReal evalcond[3];
													evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
													evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
													evalcond[2]=((0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
													if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
													{
														{
															IKReal j5array[1], cj5array[1], sj5array[1];
															bool j5valid[1]={false};
															j5array[0]=IKatan2(((0.149443561208267)+(((3.97456279809221)*(npy)*(sj7)*(sj8)))+(((-0.317965023847377)*(cj7)*(cj8)*(npx)))+(((-0.317965023847377)*(npz)*(sj7)))+(((-3.97456279809221)*(cj8)*(npx)*(sj7)))+(((3.97456279809221)*(cj7)*(npz)))+(((0.317965023847377)*(cj7)*(npy)*(sj8)))+(((0.0286168521462639)*(cj7)))+(((0.357710651828299)*(sj7)))), ((-0.868044515103339)+(((3.97456279809221)*(npz)*(sj7)))+(((-3.97456279809221)*(cj7)*(npy)*(sj8)))+(((0.317965023847377)*(cj7)*(npz)))+(((0.0286168521462639)*(sj7)))+(((-0.317965023847377)*(cj8)*(npx)*(sj7)))+(((-0.357710651828299)*(cj7)))+(((0.317965023847377)*(npy)*(sj7)*(sj8)))+(((3.97456279809221)*(cj7)*(cj8)*(npx)))));
															sj5array[0]=IKsin(j5array[0]);
															cj5array[0]=IKcos(j5array[0]);
															if( j5array[0] > IKPI )
															{
																j5array[0]-=IK2PI;
															}
															else if( j5array[0] < -IKPI )
															{
																j5array[0]+=IK2PI;
															}
															j5valid[0] = true;
															for(int ij5 = 0; ij5 < 1; ++ij5)
															{
																if( !j5valid[ij5] )
																{
																	continue;
																}
																j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

																{
																	IKReal dummyeval[1];
																	dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																	{
																		{
																			IKReal dummyeval[1];
																			IKReal x124=(sj8)*(sj8);
																			IKReal x125=(cj8)*(cj8);
																			dummyeval[0]=((((x124)*((r00)*(r00))))+(((x124)*((r10)*(r10))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((x125)*((r11)*(r11))))+(((x125)*((r01)*(r01)))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				{
																					IKReal dummyeval[1];
																					IKReal x126=(sj8)*(sj8);
																					IKReal x127=(cj8)*(cj8);
																					dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x126)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x127)))+(((cj8)*(r02)*(r11)*(sj7)))+(((cj7)*(r00)*(r11)*(x126)))+(((cj7)*(r00)*(r11)*(x127)))+(((r02)*(r10)*(sj7)*(sj8))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						continue;

																					} else
																					{
																						{
																							IKReal j3array[1], cj3array[1], sj3array[1];
																							bool j3valid[1]={false};
																							IKReal x128=(sj8)*(sj8);
																							IKReal x129=(cj8)*(cj8);
																							IKReal x130=((cj7)*(r01)*(r10)*(x128));
																							IKReal x131=((cj7)*(r01)*(r10)*(x129));
																							IKReal x132=((r00)*(r12)*(sj7)*(sj8));
																							IKReal x133=((cj8)*(r01)*(r12)*(sj7));
																							IKReal x134=((x131)+(x130)+(x133)+(x132));
																							IKReal x135=((cj7)*(r00)*(r11)*(x128));
																							IKReal x136=((cj7)*(r00)*(r11)*(x129));
																							IKReal x137=((cj8)*(r02)*(r11)*(sj7));
																							IKReal x138=((r02)*(r10)*(sj7)*(sj8));
																							IKReal x139=((x135)+(x137)+(x136)+(x138));
																							j3array[0]=IKatan2(((((IKabs(((x139)+(((-1.00000000000000)*(x134))))) != 0)?((IKReal)1/(((x139)+(((-1.00000000000000)*(x134)))))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((x134)+(((-1.00000000000000)*(x139))))) != 0)?((IKReal)1/(((x134)+(((-1.00000000000000)*(x139)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
																							sj3array[0]=IKsin(j3array[0]);
																							cj3array[0]=IKcos(j3array[0]);
																							if( j3array[0] > IKPI )
																							{
																								j3array[0]-=IK2PI;
																							}
																							else if( j3array[0] < -IKPI )
																							{
																								j3array[0]+=IK2PI;
																							}
																							j3valid[0] = true;
																							for(int ij3 = 0; ij3 < 1; ++ij3)
																							{
																								if( !j3valid[ij3] )
																								{
																									continue;
																								}
																								j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																								{
																									IKReal dummyeval[1];
																									IKReal gconst19;
																									gconst19=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																									dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												{
																													IKReal dummyeval[1];
																													dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														continue;

																													} else
																													{
																														{
																															IKReal j4array[1], cj4array[1], sj4array[1];
																															bool j4valid[1]={false};
																															IKReal x140=(cj5)*(cj5);
																															IKReal x141=(sj5)*(sj5);
																															IKReal x142=((x140)+(x141));
																															j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x142) != 0)?((IKReal)1/(x142)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x142) != 0)?((IKReal)1/(x142)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																															sj4array[0]=IKsin(j4array[0]);
																															cj4array[0]=IKcos(j4array[0]);
																															if( j4array[0] > IKPI )
																															{
																																j4array[0]-=IK2PI;
																															}
																															else if( j4array[0] < -IKPI )
																															{
																																j4array[0]+=IK2PI;
																															}
																															j4valid[0] = true;
																															for(int ij4 = 0; ij4 < 1; ++ij4)
																															{
																																if( !j4valid[ij4] )
																																{
																																	continue;
																																}
																																j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j3;
																																	solution.basesol[1].foffset = j4;
																																	solution.basesol[2].foffset = j5;
																																	solution.basesol[3].foffset = j6;
																																	solution.basesol[4].foffset = j7;
																																	solution.basesol[5].foffset = j8;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}

																											} else
																											{
																												{
																													IKReal j4array[1], cj4array[1], sj4array[1];
																													bool j4valid[1]={false};
																													IKReal x143=(cj5)*(cj5);
																													IKReal x144=(sj5)*(sj5);
																													IKReal x145=((x143)+(x144));
																													j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x145) != 0)?((IKReal)1/(x145)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x145) != 0)?((IKReal)1/(x145)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																													sj4array[0]=IKsin(j4array[0]);
																													cj4array[0]=IKcos(j4array[0]);
																													if( j4array[0] > IKPI )
																													{
																														j4array[0]-=IK2PI;
																													}
																													else if( j4array[0] < -IKPI )
																													{
																														j4array[0]+=IK2PI;
																													}
																													j4valid[0] = true;
																													for(int ij4 = 0; ij4 < 1; ++ij4)
																													{
																														if( !j4valid[ij4] )
																														{
																															continue;
																														}
																														j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j3;
																															solution.basesol[1].foffset = j4;
																															solution.basesol[2].foffset = j5;
																															solution.basesol[3].foffset = j6;
																															solution.basesol[4].foffset = j7;
																															solution.basesol[5].foffset = j8;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j4array[1], cj4array[1], sj4array[1];
																											bool j4valid[1]={false};
																											j4array[0]=IKatan2(((gconst19)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst19)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																											sj4array[0]=IKsin(j4array[0]);
																											cj4array[0]=IKcos(j4array[0]);
																											if( j4array[0] > IKPI )
																											{
																												j4array[0]-=IK2PI;
																											}
																											else if( j4array[0] < -IKPI )
																											{
																												j4array[0]+=IK2PI;
																											}
																											j4valid[0] = true;
																											for(int ij4 = 0; ij4 < 1; ++ij4)
																											{
																												if( !j4valid[ij4] )
																												{
																													continue;
																												}
																												j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j3;
																													solution.basesol[1].foffset = j4;
																													solution.basesol[2].foffset = j5;
																													solution.basesol[3].foffset = j6;
																													solution.basesol[4].foffset = j7;
																													solution.basesol[5].foffset = j8;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}
																							}
																						}

																					}

																				}

																			} else
																			{
																				{
																					IKReal j3array[1], cj3array[1], sj3array[1];
																					bool j3valid[1]={false};
																					IKReal x146=(sj8)*(sj8);
																					IKReal x147=(cj8)*(cj8);
																					IKReal x148=(r11)*(r11);
																					IKReal x149=((x147)*(x148));
																					IKReal x150=(r00)*(r00);
																					IKReal x151=((x146)*(x150));
																					IKReal x152=(r10)*(r10);
																					IKReal x153=((x146)*(x152));
																					IKReal x154=(r01)*(r01);
																					IKReal x155=((x147)*(x154));
																					IKReal x156=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
																					IKReal x157=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
																					IKReal x158=((x157)+(x156)+(x155)+(x153)+(x151)+(x149));
																					j3array[0]=IKatan2(((((IKabs(x158) != 0)?((IKReal)1/(x158)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((-1.00000000000000)*(((IKabs(x158) != 0)?((IKReal)1/(x158)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
																					sj3array[0]=IKsin(j3array[0]);
																					cj3array[0]=IKcos(j3array[0]);
																					if( j3array[0] > IKPI )
																					{
																						j3array[0]-=IK2PI;
																					}
																					else if( j3array[0] < -IKPI )
																					{
																						j3array[0]+=IK2PI;
																					}
																					j3valid[0] = true;
																					for(int ij3 = 0; ij3 < 1; ++ij3)
																					{
																						if( !j3valid[ij3] )
																						{
																							continue;
																						}
																						j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																						{
																							IKReal dummyeval[1];
																							IKReal gconst19;
																							gconst19=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																							dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												continue;

																											} else
																											{
																												{
																													IKReal j4array[1], cj4array[1], sj4array[1];
																													bool j4valid[1]={false};
																													IKReal x159=(cj5)*(cj5);
																													IKReal x160=(sj5)*(sj5);
																													IKReal x161=((x160)+(x159));
																													j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x161) != 0)?((IKReal)1/(x161)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x161) != 0)?((IKReal)1/(x161)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																													sj4array[0]=IKsin(j4array[0]);
																													cj4array[0]=IKcos(j4array[0]);
																													if( j4array[0] > IKPI )
																													{
																														j4array[0]-=IK2PI;
																													}
																													else if( j4array[0] < -IKPI )
																													{
																														j4array[0]+=IK2PI;
																													}
																													j4valid[0] = true;
																													for(int ij4 = 0; ij4 < 1; ++ij4)
																													{
																														if( !j4valid[ij4] )
																														{
																															continue;
																														}
																														j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j3;
																															solution.basesol[1].foffset = j4;
																															solution.basesol[2].foffset = j5;
																															solution.basesol[3].foffset = j6;
																															solution.basesol[4].foffset = j7;
																															solution.basesol[5].foffset = j8;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j4array[1], cj4array[1], sj4array[1];
																											bool j4valid[1]={false};
																											IKReal x162=(cj5)*(cj5);
																											IKReal x163=(sj5)*(sj5);
																											IKReal x164=((x162)+(x163));
																											j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x164) != 0)?((IKReal)1/(x164)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x164) != 0)?((IKReal)1/(x164)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																											sj4array[0]=IKsin(j4array[0]);
																											cj4array[0]=IKcos(j4array[0]);
																											if( j4array[0] > IKPI )
																											{
																												j4array[0]-=IK2PI;
																											}
																											else if( j4array[0] < -IKPI )
																											{
																												j4array[0]+=IK2PI;
																											}
																											j4valid[0] = true;
																											for(int ij4 = 0; ij4 < 1; ++ij4)
																											{
																												if( !j4valid[ij4] )
																												{
																													continue;
																												}
																												j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j3;
																													solution.basesol[1].foffset = j4;
																													solution.basesol[2].foffset = j5;
																													solution.basesol[3].foffset = j6;
																													solution.basesol[4].foffset = j7;
																													solution.basesol[5].foffset = j8;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j4array[1], cj4array[1], sj4array[1];
																									bool j4valid[1]={false};
																									j4array[0]=IKatan2(((gconst19)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst19)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																									sj4array[0]=IKsin(j4array[0]);
																									cj4array[0]=IKcos(j4array[0]);
																									if( j4array[0] > IKPI )
																									{
																										j4array[0]-=IK2PI;
																									}
																									else if( j4array[0] < -IKPI )
																									{
																										j4array[0]+=IK2PI;
																									}
																									j4valid[0] = true;
																									for(int ij4 = 0; ij4 < 1; ++ij4)
																									{
																										if( !j4valid[ij4] )
																										{
																											continue;
																										}
																										j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j3;
																											solution.basesol[1].foffset = j4;
																											solution.basesol[2].foffset = j5;
																											solution.basesol[3].foffset = j6;
																											solution.basesol[4].foffset = j7;
																											solution.basesol[5].foffset = j8;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}
																					}
																				}

																			}

																		}

																	} else
																	{
																		{
																			IKReal j4array[1], cj4array[1], sj4array[1];
																			bool j4valid[1]={false};
																			IKReal x165=(cj5)*(cj5);
																			IKReal x166=(sj5)*(sj5);
																			IKReal x167=((x166)+(x165));
																			j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x167) != 0)?((IKReal)1/(x167)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x167) != 0)?((IKReal)1/(x167)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																			sj4array[0]=IKsin(j4array[0]);
																			cj4array[0]=IKcos(j4array[0]);
																			if( j4array[0] > IKPI )
																			{
																				j4array[0]-=IK2PI;
																			}
																			else if( j4array[0] < -IKPI )
																			{
																				j4array[0]+=IK2PI;
																			}
																			j4valid[0] = true;
																			for(int ij4 = 0; ij4 < 1; ++ij4)
																			{
																				if( !j4valid[ij4] )
																				{
																					continue;
																				}
																				j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																				{
																					IKReal dummyeval[1];
																					IKReal gconst20;
																					IKReal x168=(cj8)*(cj8);
																					IKReal x169=(sj8)*(sj8);
																					gconst20=IKsign(((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((cj7)*(r00)*(r01)*(x168)))+(((r10)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x169)))+(((cj8)*(r01)*(r02)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x169)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((cj7)*(r10)*(r11)*(x168)))));
																					IKReal x170=(cj8)*(cj8);
																					IKReal x171=(sj8)*(sj8);
																					dummyeval[0]=((((cj7)*(r00)*(r01)*(x170)))+(((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((r10)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x171)))+(((cj8)*(r01)*(r02)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x171)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((cj7)*(r10)*(r11)*(x170))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							IKReal x172=(sj8)*(sj8);
																							IKReal x173=(cj8)*(cj8);
																							dummyeval[0]=((((x172)*((r00)*(r00))))+(((x173)*((r01)*(r01))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8)))+(((x173)*((r11)*(r11))))+(((x172)*((r10)*(r10)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									IKReal x174=(sj8)*(sj8);
																									IKReal x175=(cj8)*(cj8);
																									dummyeval[0]=((((cj7)*(r00)*(r11)*(x175)))+(((cj7)*(r00)*(r11)*(x174)))+(((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x174)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x175)))+(((r02)*(r10)*(sj7)*(sj8))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										continue;

																									} else
																									{
																										{
																											IKReal j3array[1], cj3array[1], sj3array[1];
																											bool j3valid[1]={false};
																											IKReal x176=(sj8)*(sj8);
																											IKReal x177=(cj8)*(cj8);
																											IKReal x178=((cj7)*(r01)*(r10)*(x176));
																											IKReal x179=((cj7)*(r01)*(r10)*(x177));
																											IKReal x180=((r00)*(r12)*(sj7)*(sj8));
																											IKReal x181=((cj8)*(r01)*(r12)*(sj7));
																											IKReal x182=((x179)+(x178)+(x180)+(x181));
																											IKReal x183=((cj7)*(r00)*(r11)*(x176));
																											IKReal x184=((cj7)*(r00)*(r11)*(x177));
																											IKReal x185=((cj8)*(r02)*(r11)*(sj7));
																											IKReal x186=((r02)*(r10)*(sj7)*(sj8));
																											IKReal x187=((x184)+(x185)+(x186)+(x183));
																											j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x182)))+(x187))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x182)))+(x187)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x187)))+(x182))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x187)))+(x182)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
																											sj3array[0]=IKsin(j3array[0]);
																											cj3array[0]=IKcos(j3array[0]);
																											if( j3array[0] > IKPI )
																											{
																												j3array[0]-=IK2PI;
																											}
																											else if( j3array[0] < -IKPI )
																											{
																												j3array[0]+=IK2PI;
																											}
																											j3valid[0] = true;
																											for(int ij3 = 0; ij3 < 1; ++ij3)
																											{
																												if( !j3valid[ij3] )
																												{
																													continue;
																												}
																												j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j3;
																													solution.basesol[1].foffset = j4;
																													solution.basesol[2].foffset = j5;
																													solution.basesol[3].foffset = j6;
																													solution.basesol[4].foffset = j7;
																													solution.basesol[5].foffset = j8;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j3array[1], cj3array[1], sj3array[1];
																									bool j3valid[1]={false};
																									IKReal x188=(sj8)*(sj8);
																									IKReal x189=(cj8)*(cj8);
																									IKReal x190=(r11)*(r11);
																									IKReal x191=((x189)*(x190));
																									IKReal x192=(r00)*(r00);
																									IKReal x193=((x188)*(x192));
																									IKReal x194=(r10)*(r10);
																									IKReal x195=((x188)*(x194));
																									IKReal x196=(r01)*(r01);
																									IKReal x197=((x189)*(x196));
																									IKReal x198=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
																									IKReal x199=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
																									IKReal x200=((x199)+(x198)+(x193)+(x191)+(x197)+(x195));
																									j3array[0]=IKatan2(((((IKabs(x200) != 0)?((IKReal)1/(x200)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((-1.00000000000000)*(((IKabs(x200) != 0)?((IKReal)1/(x200)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
																									sj3array[0]=IKsin(j3array[0]);
																									cj3array[0]=IKcos(j3array[0]);
																									if( j3array[0] > IKPI )
																									{
																										j3array[0]-=IK2PI;
																									}
																									else if( j3array[0] < -IKPI )
																									{
																										j3array[0]+=IK2PI;
																									}
																									j3valid[0] = true;
																									for(int ij3 = 0; ij3 < 1; ++ij3)
																									{
																										if( !j3valid[ij3] )
																										{
																											continue;
																										}
																										j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j3;
																											solution.basesol[1].foffset = j4;
																											solution.basesol[2].foffset = j5;
																											solution.basesol[3].foffset = j6;
																											solution.basesol[4].foffset = j7;
																											solution.basesol[5].foffset = j8;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j3array[1], cj3array[1], sj3array[1];
																							bool j3valid[1]={false};
																							j3array[0]=IKatan2(((gconst20)*(((((-1.00000000000000)*(cj4)*(cj8)*(r11)*(sj5)))+(((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj4)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))+(((-1.00000000000000)*(cj4)*(r10)*(sj5)*(sj8)))))), ((gconst20)*(((((-1.00000000000000)*(cj5)*(cj8)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj8)*(r01)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj4)*(r00)*(sj5)*(sj8)))+(((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))));
																							sj3array[0]=IKsin(j3array[0]);
																							cj3array[0]=IKcos(j3array[0]);
																							if( j3array[0] > IKPI )
																							{
																								j3array[0]-=IK2PI;
																							}
																							else if( j3array[0] < -IKPI )
																							{
																								j3array[0]+=IK2PI;
																							}
																							j3valid[0] = true;
																							for(int ij3 = 0; ij3 < 1; ++ij3)
																							{
																								if( !j3valid[ij3] )
																								{
																									continue;
																								}
																								j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j3;
																									solution.basesol[1].foffset = j4;
																									solution.basesol[2].foffset = j5;
																									solution.basesol[3].foffset = j6;
																									solution.basesol[4].foffset = j7;
																									solution.basesol[5].foffset = j8;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}
																			}
																		}

																	}

																}
															}
														}

													} else
													{
														evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
														evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
														evalcond[2]=((-0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
														if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
														{
															{
																IKReal j5array[1], cj5array[1], sj5array[1];
																bool j5valid[1]={false};
																j5array[0]=IKatan2(((0.149443561208267)+(((-0.317965023847377)*(cj7)*(cj8)*(npx)))+(((-3.97456279809221)*(npy)*(sj7)*(sj8)))+(((-0.317965023847377)*(npz)*(sj7)))+(((3.97456279809221)*(cj8)*(npx)*(sj7)))+(((0.317965023847377)*(cj7)*(npy)*(sj8)))+(((0.0286168521462639)*(cj7)))+(((-0.357710651828299)*(sj7)))+(((-3.97456279809221)*(cj7)*(npz)))), ((-0.868044515103339)+(((3.97456279809221)*(npz)*(sj7)))+(((-0.317965023847377)*(cj7)*(npz)))+(((-3.97456279809221)*(cj7)*(npy)*(sj8)))+(((-0.317965023847377)*(npy)*(sj7)*(sj8)))+(((-0.0286168521462639)*(sj7)))+(((0.317965023847377)*(cj8)*(npx)*(sj7)))+(((-0.357710651828299)*(cj7)))+(((3.97456279809221)*(cj7)*(cj8)*(npx)))));
																sj5array[0]=IKsin(j5array[0]);
																cj5array[0]=IKcos(j5array[0]);
																if( j5array[0] > IKPI )
																{
																	j5array[0]-=IK2PI;
																}
																else if( j5array[0] < -IKPI )
																{
																	j5array[0]+=IK2PI;
																}
																j5valid[0] = true;
																for(int ij5 = 0; ij5 < 1; ++ij5)
																{
																	if( !j5valid[ij5] )
																	{
																		continue;
																	}
																	j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

																	{
																		IKReal dummyeval[1];
																		IKReal gconst21;
																		gconst21=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																		dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																		if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																		{
																			{
																				IKReal dummyeval[1];
																				IKReal x201=(sj8)*(sj8);
																				IKReal x202=(cj8)*(cj8);
																				dummyeval[0]=((((-1.00000000000000)*(x201)*((r10)*(r10))))+(((-1.00000000000000)*(x202)*((r01)*(r01))))+(((-1.00000000000000)*(x202)*((r11)*(r11))))+(((-1.00000000000000)*(x201)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
																				if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																				{
																					{
																						IKReal dummyeval[1];
																						IKReal x203=(sj8)*(sj8);
																						IKReal x204=(cj8)*(cj8);
																						dummyeval[0]=((((-1.00000000000000)*(cj7)*(r00)*(r11)*(x203)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x204)))+(((cj7)*(r01)*(r10)*(x204)))+(((cj7)*(r01)*(r10)*(x203)))+(((r00)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(r02)*(r10)*(sj7)*(sj8))));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							continue;

																						} else
																						{
																							{
																								IKReal j3array[1], cj3array[1], sj3array[1];
																								bool j3valid[1]={false};
																								IKReal x205=(sj8)*(sj8);
																								IKReal x206=(cj8)*(cj8);
																								IKReal x207=((cj7)*(r00)*(r11)*(x205));
																								IKReal x208=((cj7)*(r00)*(r11)*(x206));
																								IKReal x209=((cj8)*(r02)*(r11)*(sj7));
																								IKReal x210=((r02)*(r10)*(sj7)*(sj8));
																								IKReal x211=((x210)+(x207)+(x209)+(x208));
																								IKReal x212=((cj7)*(r01)*(r10)*(x205));
																								IKReal x213=((cj7)*(r01)*(r10)*(x206));
																								IKReal x214=((r00)*(r12)*(sj7)*(sj8));
																								IKReal x215=((cj8)*(r01)*(r12)*(sj7));
																								IKReal x216=((x212)+(x213)+(x214)+(x215));
																								j3array[0]=IKatan2(((((IKabs(((x216)+(((-1.00000000000000)*(x211))))) != 0)?((IKReal)1/(((x216)+(((-1.00000000000000)*(x211)))))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((x211)+(((-1.00000000000000)*(x216))))) != 0)?((IKReal)1/(((x211)+(((-1.00000000000000)*(x216)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
																								sj3array[0]=IKsin(j3array[0]);
																								cj3array[0]=IKcos(j3array[0]);
																								if( j3array[0] > IKPI )
																								{
																									j3array[0]-=IK2PI;
																								}
																								else if( j3array[0] < -IKPI )
																								{
																									j3array[0]+=IK2PI;
																								}
																								j3valid[0] = true;
																								for(int ij3 = 0; ij3 < 1; ++ij3)
																								{
																									if( !j3valid[ij3] )
																									{
																										continue;
																									}
																									j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																									{
																										IKReal dummyeval[1];
																										IKReal gconst22;
																										gconst22=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																										dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											continue;

																										} else
																										{
																											{
																												IKReal j4array[1], cj4array[1], sj4array[1];
																												bool j4valid[1]={false};
																												j4array[0]=IKatan2(((gconst22)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst22)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																												sj4array[0]=IKsin(j4array[0]);
																												cj4array[0]=IKcos(j4array[0]);
																												if( j4array[0] > IKPI )
																												{
																													j4array[0]-=IK2PI;
																												}
																												else if( j4array[0] < -IKPI )
																												{
																													j4array[0]+=IK2PI;
																												}
																												j4valid[0] = true;
																												for(int ij4 = 0; ij4 < 1; ++ij4)
																												{
																													if( !j4valid[ij4] )
																													{
																														continue;
																													}
																													j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j3;
																														solution.basesol[1].foffset = j4;
																														solution.basesol[2].foffset = j5;
																														solution.basesol[3].foffset = j6;
																														solution.basesol[4].foffset = j7;
																														solution.basesol[5].foffset = j8;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}
																								}
																							}

																						}

																					}

																				} else
																				{
																					{
																						IKReal j3array[1], cj3array[1], sj3array[1];
																						bool j3valid[1]={false};
																						IKReal x217=(sj8)*(sj8);
																						IKReal x218=(cj8)*(cj8);
																						IKReal x219=(r11)*(r11);
																						IKReal x220=((x218)*(x219));
																						IKReal x221=(r00)*(r00);
																						IKReal x222=((x217)*(x221));
																						IKReal x223=(r10)*(r10);
																						IKReal x224=((x217)*(x223));
																						IKReal x225=(r01)*(r01);
																						IKReal x226=((x218)*(x225));
																						IKReal x227=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
																						IKReal x228=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
																						IKReal x229=((x228)+(x220)+(x222)+(x224)+(x227)+(x226));
																						j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x229) != 0)?((IKReal)1/(x229)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((((IKabs(x229) != 0)?((IKReal)1/(x229)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
																						sj3array[0]=IKsin(j3array[0]);
																						cj3array[0]=IKcos(j3array[0]);
																						if( j3array[0] > IKPI )
																						{
																							j3array[0]-=IK2PI;
																						}
																						else if( j3array[0] < -IKPI )
																						{
																							j3array[0]+=IK2PI;
																						}
																						j3valid[0] = true;
																						for(int ij3 = 0; ij3 < 1; ++ij3)
																						{
																							if( !j3valid[ij3] )
																							{
																								continue;
																							}
																							j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																							{
																								IKReal dummyeval[1];
																								IKReal gconst22;
																								gconst22=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																								dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									continue;

																								} else
																								{
																									{
																										IKReal j4array[1], cj4array[1], sj4array[1];
																										bool j4valid[1]={false};
																										j4array[0]=IKatan2(((gconst22)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst22)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																										sj4array[0]=IKsin(j4array[0]);
																										cj4array[0]=IKcos(j4array[0]);
																										if( j4array[0] > IKPI )
																										{
																											j4array[0]-=IK2PI;
																										}
																										else if( j4array[0] < -IKPI )
																										{
																											j4array[0]+=IK2PI;
																										}
																										j4valid[0] = true;
																										for(int ij4 = 0; ij4 < 1; ++ij4)
																										{
																											if( !j4valid[ij4] )
																											{
																												continue;
																											}
																											j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																											{
																												vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																												solution.basesol.resize(6);
																												solution.basesol[0].foffset = j3;
																												solution.basesol[1].foffset = j4;
																												solution.basesol[2].foffset = j5;
																												solution.basesol[3].foffset = j6;
																												solution.basesol[4].foffset = j7;
																												solution.basesol[5].foffset = j8;
																												solution.vfree.resize(0);
																											}
																										}
																									}

																								}

																							}
																						}
																					}

																				}

																			}

																		} else
																		{
																			{
																				IKReal j4array[1], cj4array[1], sj4array[1];
																				bool j4valid[1]={false};
																				j4array[0]=IKatan2(((gconst21)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst21)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																				sj4array[0]=IKsin(j4array[0]);
																				cj4array[0]=IKcos(j4array[0]);
																				if( j4array[0] > IKPI )
																				{
																					j4array[0]-=IK2PI;
																				}
																				else if( j4array[0] < -IKPI )
																				{
																					j4array[0]+=IK2PI;
																				}
																				j4valid[0] = true;
																				for(int ij4 = 0; ij4 < 1; ++ij4)
																				{
																					if( !j4valid[ij4] )
																					{
																						continue;
																					}
																					j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																					{
																						IKReal dummyeval[1];
																						IKReal gconst23;
																						IKReal x230=(cj8)*(cj8);
																						IKReal x231=(sj8)*(sj8);
																						gconst23=IKsign(((((-1.00000000000000)*(cj7)*(r10)*(r11)*(x231)))+(((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((cj7)*(r10)*(r11)*(x230)))+(((r10)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x231)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r00)*(r01)*(x230)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))));
																						IKReal x232=(cj8)*(cj8);
																						IKReal x233=(sj8)*(sj8);
																						dummyeval[0]=((((-1.00000000000000)*(cj7)*(r10)*(r11)*(x233)))+(((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((cj7)*(r10)*(r11)*(x232)))+(((r10)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x233)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r00)*(r01)*(x232)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7))));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							{
																								IKReal dummyeval[1];
																								IKReal x234=(sj8)*(sj8);
																								IKReal x235=(cj8)*(cj8);
																								dummyeval[0]=((((-1.00000000000000)*(x235)*((r01)*(r01))))+(((-1.00000000000000)*(x235)*((r11)*(r11))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x234)*((r10)*(r10))))+(((-1.00000000000000)*(x234)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									{
																										IKReal dummyeval[1];
																										IKReal x236=(sj8)*(sj8);
																										IKReal x237=(cj8)*(cj8);
																										dummyeval[0]=((((-1.00000000000000)*(cj7)*(r00)*(r11)*(x237)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x236)))+(((cj7)*(r01)*(r10)*(x236)))+(((cj7)*(r01)*(r10)*(x237)))+(((r00)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(r02)*(r10)*(sj7)*(sj8))));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											continue;

																										} else
																										{
																											{
																												IKReal j3array[1], cj3array[1], sj3array[1];
																												bool j3valid[1]={false};
																												IKReal x238=(sj8)*(sj8);
																												IKReal x239=(cj8)*(cj8);
																												IKReal x240=((cj7)*(r00)*(r11)*(x238));
																												IKReal x241=((cj7)*(r00)*(r11)*(x239));
																												IKReal x242=((cj8)*(r02)*(r11)*(sj7));
																												IKReal x243=((r02)*(r10)*(sj7)*(sj8));
																												IKReal x244=((x243)+(x242)+(x241)+(x240));
																												IKReal x245=((cj7)*(r01)*(r10)*(x238));
																												IKReal x246=((cj7)*(r01)*(r10)*(x239));
																												IKReal x247=((r00)*(r12)*(sj7)*(sj8));
																												IKReal x248=((cj8)*(r01)*(r12)*(sj7));
																												IKReal x249=((x247)+(x246)+(x245)+(x248));
																												j3array[0]=IKatan2(((((IKabs(((x249)+(((-1.00000000000000)*(x244))))) != 0)?((IKReal)1/(((x249)+(((-1.00000000000000)*(x244)))))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((x244)+(((-1.00000000000000)*(x249))))) != 0)?((IKReal)1/(((x244)+(((-1.00000000000000)*(x249)))))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
																												sj3array[0]=IKsin(j3array[0]);
																												cj3array[0]=IKcos(j3array[0]);
																												if( j3array[0] > IKPI )
																												{
																													j3array[0]-=IK2PI;
																												}
																												else if( j3array[0] < -IKPI )
																												{
																													j3array[0]+=IK2PI;
																												}
																												j3valid[0] = true;
																												for(int ij3 = 0; ij3 < 1; ++ij3)
																												{
																													if( !j3valid[ij3] )
																													{
																														continue;
																													}
																													j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j3;
																														solution.basesol[1].foffset = j4;
																														solution.basesol[2].foffset = j5;
																														solution.basesol[3].foffset = j6;
																														solution.basesol[4].foffset = j7;
																														solution.basesol[5].foffset = j8;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}

																								} else
																								{
																									{
																										IKReal j3array[1], cj3array[1], sj3array[1];
																										bool j3valid[1]={false};
																										IKReal x250=(sj8)*(sj8);
																										IKReal x251=(cj8)*(cj8);
																										IKReal x252=(r11)*(r11);
																										IKReal x253=((x251)*(x252));
																										IKReal x254=(r00)*(r00);
																										IKReal x255=((x250)*(x254));
																										IKReal x256=(r10)*(r10);
																										IKReal x257=((x250)*(x256));
																										IKReal x258=(r01)*(r01);
																										IKReal x259=((x251)*(x258));
																										IKReal x260=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
																										IKReal x261=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
																										IKReal x262=((x259)+(x255)+(x257)+(x253)+(x261)+(x260));
																										j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x262) != 0)?((IKReal)1/(x262)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((((IKabs(x262) != 0)?((IKReal)1/(x262)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
																										sj3array[0]=IKsin(j3array[0]);
																										cj3array[0]=IKcos(j3array[0]);
																										if( j3array[0] > IKPI )
																										{
																											j3array[0]-=IK2PI;
																										}
																										else if( j3array[0] < -IKPI )
																										{
																											j3array[0]+=IK2PI;
																										}
																										j3valid[0] = true;
																										for(int ij3 = 0; ij3 < 1; ++ij3)
																										{
																											if( !j3valid[ij3] )
																											{
																												continue;
																											}
																											j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																											{
																												vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																												solution.basesol.resize(6);
																												solution.basesol[0].foffset = j3;
																												solution.basesol[1].foffset = j4;
																												solution.basesol[2].foffset = j5;
																												solution.basesol[3].foffset = j6;
																												solution.basesol[4].foffset = j7;
																												solution.basesol[5].foffset = j8;
																												solution.vfree.resize(0);
																											}
																										}
																									}

																								}

																							}

																						} else
																						{
																							{
																								IKReal j3array[1], cj3array[1], sj3array[1];
																								bool j3valid[1]={false};
																								j3array[0]=IKatan2(((gconst23)*(((((r02)*(sj7)))+(((-1.00000000000000)*(cj4)*(cj8)*(r11)*(sj5)))+(((cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj4)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj4)*(r10)*(sj5)*(sj8)))))), ((gconst23)*(((((-1.00000000000000)*(cj5)*(cj8)*(r01)*(sj4)))+(((cj7)*(r11)*(sj8)))+(((-1.00000000000000)*(cj4)*(cj8)*(r01)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj4)*(r00)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r12)*(sj7)))))));
																								sj3array[0]=IKsin(j3array[0]);
																								cj3array[0]=IKcos(j3array[0]);
																								if( j3array[0] > IKPI )
																								{
																									j3array[0]-=IK2PI;
																								}
																								else if( j3array[0] < -IKPI )
																								{
																									j3array[0]+=IK2PI;
																								}
																								j3valid[0] = true;
																								for(int ij3 = 0; ij3 < 1; ++ij3)
																								{
																									if( !j3valid[ij3] )
																									{
																										continue;
																									}
																									j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																									{
																										vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																										solution.basesol.resize(6);
																										solution.basesol[0].foffset = j3;
																										solution.basesol[1].foffset = j4;
																										solution.basesol[2].foffset = j5;
																										solution.basesol[3].foffset = j6;
																										solution.basesol[4].foffset = j7;
																										solution.basesol[5].foffset = j8;
																										solution.vfree.resize(0);
																									}
																								}
																							}

																						}

																					}
																				}
																			}

																		}

																	}
																}
															}

														} else
														{
															if( 1 )
															{
																continue;

															} else
															{
															}
														}
													}
												}

											} else
											{
												{
													IKReal j3array[1], cj3array[1], sj3array[1];
													bool j3valid[1]={false};
													IKReal x263=(sj8)*(sj8);
													IKReal x264=(cj8)*(cj8);
													IKReal x265=((cj7)*(r01)*(r10)*(x263));
													IKReal x266=((cj7)*(r01)*(r10)*(x264));
													IKReal x267=((r00)*(r12)*(sj7)*(sj8));
													IKReal x268=((cj8)*(r01)*(r12)*(sj7));
													IKReal x269=((x265)+(x267)+(x266)+(x268));
													IKReal x270=((cj7)*(r00)*(r11)*(x263));
													IKReal x271=((cj7)*(r00)*(r11)*(x264));
													IKReal x272=((cj8)*(r02)*(r11)*(sj7));
													IKReal x273=((r02)*(r10)*(sj7)*(sj8));
													IKReal x274=((x272)+(x273)+(x270)+(x271));
													j3array[0]=IKatan2(((((IKabs(((x274)+(((-1.00000000000000)*(x269))))) != 0)?((IKReal)1/(((x274)+(((-1.00000000000000)*(x269)))))):(IKReal)1.0e30))*(((((cj6)*(r12)*(sj7)))+(((cj6)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj6)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((x269)+(((-1.00000000000000)*(x274))))) != 0)?((IKReal)1/(((x269)+(((-1.00000000000000)*(x274)))))):(IKReal)1.0e30))*(((((cj6)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj6)*(r02)*(sj7)))))));
													sj3array[0]=IKsin(j3array[0]);
													cj3array[0]=IKcos(j3array[0]);
													if( j3array[0] > IKPI )
													{
														j3array[0]-=IK2PI;
													}
													else if( j3array[0] < -IKPI )
													{
														j3array[0]+=IK2PI;
													}
													j3valid[0] = true;
													for(int ij3 = 0; ij3 < 1; ++ij3)
													{
														if( !j3valid[ij3] )
														{
															continue;
														}
														j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

														{
															IKReal dummyeval[1];
															IKReal gconst2;
															gconst2=IKsign(sj6);
															dummyeval[0]=sj6;
															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
															{
																{
																	IKReal evalcond[7];
																	evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
																	evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
																	evalcond[2]=((0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																	evalcond[3]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																	evalcond[4]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																	evalcond[5]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																	evalcond[6]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																	if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
																	{
																		{
																			IKReal j5array[1], cj5array[1], sj5array[1];
																			bool j5valid[1]={false};
																			j5array[0]=IKatan2(((0.149443561208267)+(((3.97456279809221)*(npy)*(sj7)*(sj8)))+(((-0.317965023847377)*(cj7)*(cj8)*(npx)))+(((-0.317965023847377)*(npz)*(sj7)))+(((-3.97456279809221)*(cj8)*(npx)*(sj7)))+(((3.97456279809221)*(cj7)*(npz)))+(((0.317965023847377)*(cj7)*(npy)*(sj8)))+(((0.0286168521462639)*(cj7)))+(((0.357710651828299)*(sj7)))), ((-0.868044515103339)+(((3.97456279809221)*(npz)*(sj7)))+(((-3.97456279809221)*(cj7)*(npy)*(sj8)))+(((0.317965023847377)*(cj7)*(npz)))+(((0.0286168521462639)*(sj7)))+(((-0.317965023847377)*(cj8)*(npx)*(sj7)))+(((-0.357710651828299)*(cj7)))+(((0.317965023847377)*(npy)*(sj7)*(sj8)))+(((3.97456279809221)*(cj7)*(cj8)*(npx)))));
																			sj5array[0]=IKsin(j5array[0]);
																			cj5array[0]=IKcos(j5array[0]);
																			if( j5array[0] > IKPI )
																			{
																				j5array[0]-=IK2PI;
																			}
																			else if( j5array[0] < -IKPI )
																			{
																				j5array[0]+=IK2PI;
																			}
																			j5valid[0] = true;
																			for(int ij5 = 0; ij5 < 1; ++ij5)
																			{
																				if( !j5valid[ij5] )
																				{
																					continue;
																				}
																				j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

																				{
																					IKReal dummyeval[1];
																					IKReal gconst6;
																					gconst6=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																					dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										continue;

																									} else
																									{
																										{
																											IKReal j4array[1], cj4array[1], sj4array[1];
																											bool j4valid[1]={false};
																											IKReal x275=(cj5)*(cj5);
																											IKReal x276=(sj5)*(sj5);
																											IKReal x277=((x276)+(x275));
																											j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x277) != 0)?((IKReal)1/(x277)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x277) != 0)?((IKReal)1/(x277)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																											sj4array[0]=IKsin(j4array[0]);
																											cj4array[0]=IKcos(j4array[0]);
																											if( j4array[0] > IKPI )
																											{
																												j4array[0]-=IK2PI;
																											}
																											else if( j4array[0] < -IKPI )
																											{
																												j4array[0]+=IK2PI;
																											}
																											j4valid[0] = true;
																											for(int ij4 = 0; ij4 < 1; ++ij4)
																											{
																												if( !j4valid[ij4] )
																												{
																													continue;
																												}
																												j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j3;
																													solution.basesol[1].foffset = j4;
																													solution.basesol[2].foffset = j5;
																													solution.basesol[3].foffset = j6;
																													solution.basesol[4].foffset = j7;
																													solution.basesol[5].foffset = j8;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j4array[1], cj4array[1], sj4array[1];
																									bool j4valid[1]={false};
																									IKReal x278=(cj5)*(cj5);
																									IKReal x279=(sj5)*(sj5);
																									IKReal x280=((x278)+(x279));
																									j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x280) != 0)?((IKReal)1/(x280)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x280) != 0)?((IKReal)1/(x280)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																									sj4array[0]=IKsin(j4array[0]);
																									cj4array[0]=IKcos(j4array[0]);
																									if( j4array[0] > IKPI )
																									{
																										j4array[0]-=IK2PI;
																									}
																									else if( j4array[0] < -IKPI )
																									{
																										j4array[0]+=IK2PI;
																									}
																									j4valid[0] = true;
																									for(int ij4 = 0; ij4 < 1; ++ij4)
																									{
																										if( !j4valid[ij4] )
																										{
																											continue;
																										}
																										j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j3;
																											solution.basesol[1].foffset = j4;
																											solution.basesol[2].foffset = j5;
																											solution.basesol[3].foffset = j6;
																											solution.basesol[4].foffset = j7;
																											solution.basesol[5].foffset = j8;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j4array[1], cj4array[1], sj4array[1];
																							bool j4valid[1]={false};
																							j4array[0]=IKatan2(((gconst6)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst6)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																							sj4array[0]=IKsin(j4array[0]);
																							cj4array[0]=IKcos(j4array[0]);
																							if( j4array[0] > IKPI )
																							{
																								j4array[0]-=IK2PI;
																							}
																							else if( j4array[0] < -IKPI )
																							{
																								j4array[0]+=IK2PI;
																							}
																							j4valid[0] = true;
																							for(int ij4 = 0; ij4 < 1; ++ij4)
																							{
																								if( !j4valid[ij4] )
																								{
																									continue;
																								}
																								j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j3;
																									solution.basesol[1].foffset = j4;
																									solution.basesol[2].foffset = j5;
																									solution.basesol[3].foffset = j6;
																									solution.basesol[4].foffset = j7;
																									solution.basesol[5].foffset = j8;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}
																			}
																		}

																	} else
																	{
																		evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
																		evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
																		evalcond[2]=((-0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																		evalcond[3]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																		evalcond[4]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																		evalcond[5]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																		evalcond[6]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																		if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
																		{
																			{
																				IKReal j5array[1], cj5array[1], sj5array[1];
																				bool j5valid[1]={false};
																				j5array[0]=IKatan2(((0.149443561208267)+(((-0.317965023847377)*(cj7)*(cj8)*(npx)))+(((-3.97456279809221)*(npy)*(sj7)*(sj8)))+(((-0.317965023847377)*(npz)*(sj7)))+(((3.97456279809221)*(cj8)*(npx)*(sj7)))+(((0.317965023847377)*(cj7)*(npy)*(sj8)))+(((0.0286168521462639)*(cj7)))+(((-0.357710651828299)*(sj7)))+(((-3.97456279809221)*(cj7)*(npz)))), ((-0.868044515103339)+(((3.97456279809221)*(npz)*(sj7)))+(((-0.317965023847377)*(cj7)*(npz)))+(((-3.97456279809221)*(cj7)*(npy)*(sj8)))+(((-0.317965023847377)*(npy)*(sj7)*(sj8)))+(((-0.0286168521462639)*(sj7)))+(((0.317965023847377)*(cj8)*(npx)*(sj7)))+(((-0.357710651828299)*(cj7)))+(((3.97456279809221)*(cj7)*(cj8)*(npx)))));
																				sj5array[0]=IKsin(j5array[0]);
																				cj5array[0]=IKcos(j5array[0]);
																				if( j5array[0] > IKPI )
																				{
																					j5array[0]-=IK2PI;
																				}
																				else if( j5array[0] < -IKPI )
																				{
																					j5array[0]+=IK2PI;
																				}
																				j5valid[0] = true;
																				for(int ij5 = 0; ij5 < 1; ++ij5)
																				{
																					if( !j5valid[ij5] )
																					{
																						continue;
																					}
																					j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

																					{
																						IKReal dummyeval[1];
																						IKReal gconst7;
																						gconst7=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																						dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							continue;

																						} else
																						{
																							{
																								IKReal j4array[1], cj4array[1], sj4array[1];
																								bool j4valid[1]={false};
																								j4array[0]=IKatan2(((gconst7)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst7)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																								sj4array[0]=IKsin(j4array[0]);
																								cj4array[0]=IKcos(j4array[0]);
																								if( j4array[0] > IKPI )
																								{
																									j4array[0]-=IK2PI;
																								}
																								else if( j4array[0] < -IKPI )
																								{
																									j4array[0]+=IK2PI;
																								}
																								j4valid[0] = true;
																								for(int ij4 = 0; ij4 < 1; ++ij4)
																								{
																									if( !j4valid[ij4] )
																									{
																										continue;
																									}
																									j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																									{
																										vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																										solution.basesol.resize(6);
																										solution.basesol[0].foffset = j3;
																										solution.basesol[1].foffset = j4;
																										solution.basesol[2].foffset = j5;
																										solution.basesol[3].foffset = j6;
																										solution.basesol[4].foffset = j7;
																										solution.basesol[5].foffset = j8;
																										solution.vfree.resize(0);
																									}
																								}
																							}

																						}

																					}
																				}
																			}

																		} else
																		{
																			if( 1 )
																			{
																				continue;

																			} else
																			{
																			}
																		}
																	}
																}

															} else
															{
																{
																	IKReal j5array[1], cj5array[1], sj5array[1];
																	bool j5valid[1]={false};
																	j5array[0]=IKatan2(((gconst2)*(((((-200.000000000000)*(npz)*(sj6)*(sj7)))+(((18.0000000000000)*(cj7)*(sj6)))+(((-212.500000000000)*(cj6)))+(((-200.000000000000)*(cj7)*(cj8)*(npx)*(sj6)))+(((94.0000000000000)*(sj6)))+(((-2500.00000000000)*(cj8)*(npy)))+(((200.000000000000)*(cj7)*(npy)*(sj6)*(sj8)))+(((-2500.00000000000)*(npx)*(sj8)))))), ((gconst2)*(((((2500.00000000000)*(cj7)*(cj8)*(npx)*(sj6)))+(((-200.000000000000)*(cj8)*(npy)))+(((-2500.00000000000)*(cj7)*(npy)*(sj6)*(sj8)))+(((-17.0000000000000)*(cj6)))+(((-546.000000000000)*(sj6)))+(((-200.000000000000)*(npx)*(sj8)))+(((2500.00000000000)*(npz)*(sj6)*(sj7)))+(((-225.000000000000)*(cj7)*(sj6)))))));
																	sj5array[0]=IKsin(j5array[0]);
																	cj5array[0]=IKcos(j5array[0]);
																	if( j5array[0] > IKPI )
																	{
																		j5array[0]-=IK2PI;
																	}
																	else if( j5array[0] < -IKPI )
																	{
																		j5array[0]+=IK2PI;
																	}
																	j5valid[0] = true;
																	for(int ij5 = 0; ij5 < 1; ++ij5)
																	{
																		if( !j5valid[ij5] )
																		{
																			continue;
																		}
																		j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

																		{
																			IKReal dummyeval[1];
																			IKReal gconst3;
																			gconst3=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
																			dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				{
																					IKReal evalcond[9];
																					evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
																					evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
																					evalcond[2]=((0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																					evalcond[3]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																					evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																					evalcond[5]=((0.0200000000000000)+(((-0.0200000000000000)*(cj5)))+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
																					evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																					evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																					evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																					if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							IKReal gconst4;
																							gconst4=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																							dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												continue;

																											} else
																											{
																												{
																													IKReal j4array[1], cj4array[1], sj4array[1];
																													bool j4valid[1]={false};
																													IKReal x281=(cj5)*(cj5);
																													IKReal x282=(sj5)*(sj5);
																													IKReal x283=((x282)+(x281));
																													j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x283) != 0)?((IKReal)1/(x283)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x283) != 0)?((IKReal)1/(x283)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																													sj4array[0]=IKsin(j4array[0]);
																													cj4array[0]=IKcos(j4array[0]);
																													if( j4array[0] > IKPI )
																													{
																														j4array[0]-=IK2PI;
																													}
																													else if( j4array[0] < -IKPI )
																													{
																														j4array[0]+=IK2PI;
																													}
																													j4valid[0] = true;
																													for(int ij4 = 0; ij4 < 1; ++ij4)
																													{
																														if( !j4valid[ij4] )
																														{
																															continue;
																														}
																														j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j3;
																															solution.basesol[1].foffset = j4;
																															solution.basesol[2].foffset = j5;
																															solution.basesol[3].foffset = j6;
																															solution.basesol[4].foffset = j7;
																															solution.basesol[5].foffset = j8;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j4array[1], cj4array[1], sj4array[1];
																											bool j4valid[1]={false};
																											IKReal x284=(cj5)*(cj5);
																											IKReal x285=(sj5)*(sj5);
																											IKReal x286=((x285)+(x284));
																											j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x286) != 0)?((IKReal)1/(x286)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x286) != 0)?((IKReal)1/(x286)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																											sj4array[0]=IKsin(j4array[0]);
																											cj4array[0]=IKcos(j4array[0]);
																											if( j4array[0] > IKPI )
																											{
																												j4array[0]-=IK2PI;
																											}
																											else if( j4array[0] < -IKPI )
																											{
																												j4array[0]+=IK2PI;
																											}
																											j4valid[0] = true;
																											for(int ij4 = 0; ij4 < 1; ++ij4)
																											{
																												if( !j4valid[ij4] )
																												{
																													continue;
																												}
																												j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j3;
																													solution.basesol[1].foffset = j4;
																													solution.basesol[2].foffset = j5;
																													solution.basesol[3].foffset = j6;
																													solution.basesol[4].foffset = j7;
																													solution.basesol[5].foffset = j8;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j4array[1], cj4array[1], sj4array[1];
																									bool j4valid[1]={false};
																									j4array[0]=IKatan2(((gconst4)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst4)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																									sj4array[0]=IKsin(j4array[0]);
																									cj4array[0]=IKcos(j4array[0]);
																									if( j4array[0] > IKPI )
																									{
																										j4array[0]-=IK2PI;
																									}
																									else if( j4array[0] < -IKPI )
																									{
																										j4array[0]+=IK2PI;
																									}
																									j4valid[0] = true;
																									for(int ij4 = 0; ij4 < 1; ++ij4)
																									{
																										if( !j4valid[ij4] )
																										{
																											continue;
																										}
																										j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j3;
																											solution.basesol[1].foffset = j4;
																											solution.basesol[2].foffset = j5;
																											solution.basesol[3].foffset = j6;
																											solution.basesol[4].foffset = j7;
																											solution.basesol[5].foffset = j8;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
																						evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
																						evalcond[2]=((-0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																						evalcond[3]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																						evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																						evalcond[5]=((-0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((0.0200000000000000)*(cj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
																						evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																						evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																						evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																						if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																						{
																							{
																								IKReal dummyeval[1];
																								IKReal gconst5;
																								gconst5=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																								dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									continue;

																								} else
																								{
																									{
																										IKReal j4array[1], cj4array[1], sj4array[1];
																										bool j4valid[1]={false};
																										j4array[0]=IKatan2(((gconst5)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst5)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																										sj4array[0]=IKsin(j4array[0]);
																										cj4array[0]=IKcos(j4array[0]);
																										if( j4array[0] > IKPI )
																										{
																											j4array[0]-=IK2PI;
																										}
																										else if( j4array[0] < -IKPI )
																										{
																											j4array[0]+=IK2PI;
																										}
																										j4valid[0] = true;
																										for(int ij4 = 0; ij4 < 1; ++ij4)
																										{
																											if( !j4valid[ij4] )
																											{
																												continue;
																											}
																											j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																											{
																												vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																												solution.basesol.resize(6);
																												solution.basesol[0].foffset = j3;
																												solution.basesol[1].foffset = j4;
																												solution.basesol[2].foffset = j5;
																												solution.basesol[3].foffset = j6;
																												solution.basesol[4].foffset = j7;
																												solution.basesol[5].foffset = j8;
																												solution.vfree.resize(0);
																											}
																										}
																									}

																								}

																							}

																						} else
																						{
																							if( 1 )
																							{
																								continue;

																							} else
																							{
																							}
																						}
																					}
																				}

																			} else
																			{
																				{
																					IKReal j4array[1], cj4array[1], sj4array[1];
																					bool j4valid[1]={false};
																					j4array[0]=IKatan2(((gconst3)*(((((cj5)*(r20)*(sj8)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj5)*(cj8)*(r21)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))))), ((gconst3)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))))));
																					sj4array[0]=IKsin(j4array[0]);
																					cj4array[0]=IKcos(j4array[0]);
																					if( j4array[0] > IKPI )
																					{
																						j4array[0]-=IK2PI;
																					}
																					else if( j4array[0] < -IKPI )
																					{
																						j4array[0]+=IK2PI;
																					}
																					j4valid[0] = true;
																					for(int ij4 = 0; ij4 < 1; ++ij4)
																					{
																						if( !j4valid[ij4] )
																						{
																							continue;
																						}
																						j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																						{
																							vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																							solution.basesol.resize(6);
																							solution.basesol[0].foffset = j3;
																							solution.basesol[1].foffset = j4;
																							solution.basesol[2].foffset = j5;
																							solution.basesol[3].foffset = j6;
																							solution.basesol[4].foffset = j7;
																							solution.basesol[5].foffset = j8;
																							solution.vfree.resize(0);
																						}
																					}
																				}

																			}

																		}
																	}
																}

															}

														}
													}
												}

											}

										}

									} else
									{
										{
											IKReal j3array[1], cj3array[1], sj3array[1];
											bool j3valid[1]={false};
											j3array[0]=IKatan2(((gconst0)*(((((cj6)*(r11)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj6)))+(((-1.00000000000000)*(r10)*(sj6)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r10)*(sj7)))+(((cj6)*(cj7)*(r12)))))), ((gconst0)*(((((cj6)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(r00)*(sj6)*(sj8)))+(((cj6)*(cj7)*(r02)))+(((-1.00000000000000)*(cj8)*(r01)*(sj6)))))));
											sj3array[0]=IKsin(j3array[0]);
											cj3array[0]=IKcos(j3array[0]);
											if( j3array[0] > IKPI )
											{
												j3array[0]-=IK2PI;
											}
											else if( j3array[0] < -IKPI )
											{
												j3array[0]+=IK2PI;
											}
											j3valid[0] = true;
											for(int ij3 = 0; ij3 < 1; ++ij3)
											{
												if( !j3valid[ij3] )
												{
													continue;
												}
												j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

												{
													IKReal dummyeval[1];
													IKReal gconst2;
													gconst2=IKsign(sj6);
													dummyeval[0]=sj6;
													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
													{
														{
															IKReal evalcond[7];
															evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
															evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
															evalcond[2]=((0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
															evalcond[3]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
															evalcond[4]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
															evalcond[5]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
															evalcond[6]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
															if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
															{
																{
																	IKReal j5array[1], cj5array[1], sj5array[1];
																	bool j5valid[1]={false};
																	j5array[0]=IKatan2(((0.149443561208267)+(((3.97456279809221)*(npy)*(sj7)*(sj8)))+(((-0.317965023847377)*(cj7)*(cj8)*(npx)))+(((-0.317965023847377)*(npz)*(sj7)))+(((-3.97456279809221)*(cj8)*(npx)*(sj7)))+(((3.97456279809221)*(cj7)*(npz)))+(((0.317965023847377)*(cj7)*(npy)*(sj8)))+(((0.0286168521462639)*(cj7)))+(((0.357710651828299)*(sj7)))), ((-0.868044515103339)+(((3.97456279809221)*(npz)*(sj7)))+(((-3.97456279809221)*(cj7)*(npy)*(sj8)))+(((0.317965023847377)*(cj7)*(npz)))+(((0.0286168521462639)*(sj7)))+(((-0.317965023847377)*(cj8)*(npx)*(sj7)))+(((-0.357710651828299)*(cj7)))+(((0.317965023847377)*(npy)*(sj7)*(sj8)))+(((3.97456279809221)*(cj7)*(cj8)*(npx)))));
																	sj5array[0]=IKsin(j5array[0]);
																	cj5array[0]=IKcos(j5array[0]);
																	if( j5array[0] > IKPI )
																	{
																		j5array[0]-=IK2PI;
																	}
																	else if( j5array[0] < -IKPI )
																	{
																		j5array[0]+=IK2PI;
																	}
																	j5valid[0] = true;
																	for(int ij5 = 0; ij5 < 1; ++ij5)
																	{
																		if( !j5valid[ij5] )
																		{
																			continue;
																		}
																		j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

																		{
																			IKReal dummyeval[1];
																			IKReal gconst6;
																			gconst6=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																			dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				{
																					IKReal dummyeval[1];
																					dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								continue;

																							} else
																							{
																								{
																									IKReal j4array[1], cj4array[1], sj4array[1];
																									bool j4valid[1]={false};
																									IKReal x287=(cj5)*(cj5);
																									IKReal x288=(sj5)*(sj5);
																									IKReal x289=((x288)+(x287));
																									j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x289) != 0)?((IKReal)1/(x289)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x289) != 0)?((IKReal)1/(x289)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																									sj4array[0]=IKsin(j4array[0]);
																									cj4array[0]=IKcos(j4array[0]);
																									if( j4array[0] > IKPI )
																									{
																										j4array[0]-=IK2PI;
																									}
																									else if( j4array[0] < -IKPI )
																									{
																										j4array[0]+=IK2PI;
																									}
																									j4valid[0] = true;
																									for(int ij4 = 0; ij4 < 1; ++ij4)
																									{
																										if( !j4valid[ij4] )
																										{
																											continue;
																										}
																										j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j3;
																											solution.basesol[1].foffset = j4;
																											solution.basesol[2].foffset = j5;
																											solution.basesol[3].foffset = j6;
																											solution.basesol[4].foffset = j7;
																											solution.basesol[5].foffset = j8;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j4array[1], cj4array[1], sj4array[1];
																							bool j4valid[1]={false};
																							IKReal x290=(cj5)*(cj5);
																							IKReal x291=(sj5)*(sj5);
																							IKReal x292=((x290)+(x291));
																							j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x292) != 0)?((IKReal)1/(x292)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x292) != 0)?((IKReal)1/(x292)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																							sj4array[0]=IKsin(j4array[0]);
																							cj4array[0]=IKcos(j4array[0]);
																							if( j4array[0] > IKPI )
																							{
																								j4array[0]-=IK2PI;
																							}
																							else if( j4array[0] < -IKPI )
																							{
																								j4array[0]+=IK2PI;
																							}
																							j4valid[0] = true;
																							for(int ij4 = 0; ij4 < 1; ++ij4)
																							{
																								if( !j4valid[ij4] )
																								{
																									continue;
																								}
																								j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j3;
																									solution.basesol[1].foffset = j4;
																									solution.basesol[2].foffset = j5;
																									solution.basesol[3].foffset = j6;
																									solution.basesol[4].foffset = j7;
																									solution.basesol[5].foffset = j8;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}

																			} else
																			{
																				{
																					IKReal j4array[1], cj4array[1], sj4array[1];
																					bool j4valid[1]={false};
																					j4array[0]=IKatan2(((gconst6)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst6)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																					sj4array[0]=IKsin(j4array[0]);
																					cj4array[0]=IKcos(j4array[0]);
																					if( j4array[0] > IKPI )
																					{
																						j4array[0]-=IK2PI;
																					}
																					else if( j4array[0] < -IKPI )
																					{
																						j4array[0]+=IK2PI;
																					}
																					j4valid[0] = true;
																					for(int ij4 = 0; ij4 < 1; ++ij4)
																					{
																						if( !j4valid[ij4] )
																						{
																							continue;
																						}
																						j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																						{
																							vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																							solution.basesol.resize(6);
																							solution.basesol[0].foffset = j3;
																							solution.basesol[1].foffset = j4;
																							solution.basesol[2].foffset = j5;
																							solution.basesol[3].foffset = j6;
																							solution.basesol[4].foffset = j7;
																							solution.basesol[5].foffset = j8;
																							solution.vfree.resize(0);
																						}
																					}
																				}

																			}

																		}
																	}
																}

															} else
															{
																evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
																evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
																evalcond[2]=((-0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																evalcond[3]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																evalcond[4]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																evalcond[5]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																evalcond[6]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
																{
																	{
																		IKReal j5array[1], cj5array[1], sj5array[1];
																		bool j5valid[1]={false};
																		j5array[0]=IKatan2(((0.149443561208267)+(((-0.317965023847377)*(cj7)*(cj8)*(npx)))+(((-3.97456279809221)*(npy)*(sj7)*(sj8)))+(((-0.317965023847377)*(npz)*(sj7)))+(((3.97456279809221)*(cj8)*(npx)*(sj7)))+(((0.317965023847377)*(cj7)*(npy)*(sj8)))+(((0.0286168521462639)*(cj7)))+(((-0.357710651828299)*(sj7)))+(((-3.97456279809221)*(cj7)*(npz)))), ((-0.868044515103339)+(((3.97456279809221)*(npz)*(sj7)))+(((-0.317965023847377)*(cj7)*(npz)))+(((-3.97456279809221)*(cj7)*(npy)*(sj8)))+(((-0.317965023847377)*(npy)*(sj7)*(sj8)))+(((-0.0286168521462639)*(sj7)))+(((0.317965023847377)*(cj8)*(npx)*(sj7)))+(((-0.357710651828299)*(cj7)))+(((3.97456279809221)*(cj7)*(cj8)*(npx)))));
																		sj5array[0]=IKsin(j5array[0]);
																		cj5array[0]=IKcos(j5array[0]);
																		if( j5array[0] > IKPI )
																		{
																			j5array[0]-=IK2PI;
																		}
																		else if( j5array[0] < -IKPI )
																		{
																			j5array[0]+=IK2PI;
																		}
																		j5valid[0] = true;
																		for(int ij5 = 0; ij5 < 1; ++ij5)
																		{
																			if( !j5valid[ij5] )
																			{
																				continue;
																			}
																			j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

																			{
																				IKReal dummyeval[1];
																				IKReal gconst7;
																				gconst7=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																				dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																				if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																				{
																					continue;

																				} else
																				{
																					{
																						IKReal j4array[1], cj4array[1], sj4array[1];
																						bool j4valid[1]={false};
																						j4array[0]=IKatan2(((gconst7)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst7)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																						sj4array[0]=IKsin(j4array[0]);
																						cj4array[0]=IKcos(j4array[0]);
																						if( j4array[0] > IKPI )
																						{
																							j4array[0]-=IK2PI;
																						}
																						else if( j4array[0] < -IKPI )
																						{
																							j4array[0]+=IK2PI;
																						}
																						j4valid[0] = true;
																						for(int ij4 = 0; ij4 < 1; ++ij4)
																						{
																							if( !j4valid[ij4] )
																							{
																								continue;
																							}
																							j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																							{
																								vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																								solution.basesol.resize(6);
																								solution.basesol[0].foffset = j3;
																								solution.basesol[1].foffset = j4;
																								solution.basesol[2].foffset = j5;
																								solution.basesol[3].foffset = j6;
																								solution.basesol[4].foffset = j7;
																								solution.basesol[5].foffset = j8;
																								solution.vfree.resize(0);
																							}
																						}
																					}

																				}

																			}
																		}
																	}

																} else
																{
																	if( 1 )
																	{
																		continue;

																	} else
																	{
																	}
																}
															}
														}

													} else
													{
														{
															IKReal j5array[1], cj5array[1], sj5array[1];
															bool j5valid[1]={false};
															j5array[0]=IKatan2(((gconst2)*(((((-200.000000000000)*(npz)*(sj6)*(sj7)))+(((18.0000000000000)*(cj7)*(sj6)))+(((-212.500000000000)*(cj6)))+(((-200.000000000000)*(cj7)*(cj8)*(npx)*(sj6)))+(((94.0000000000000)*(sj6)))+(((-2500.00000000000)*(cj8)*(npy)))+(((200.000000000000)*(cj7)*(npy)*(sj6)*(sj8)))+(((-2500.00000000000)*(npx)*(sj8)))))), ((gconst2)*(((((2500.00000000000)*(cj7)*(cj8)*(npx)*(sj6)))+(((-200.000000000000)*(cj8)*(npy)))+(((-2500.00000000000)*(cj7)*(npy)*(sj6)*(sj8)))+(((-17.0000000000000)*(cj6)))+(((-546.000000000000)*(sj6)))+(((-200.000000000000)*(npx)*(sj8)))+(((2500.00000000000)*(npz)*(sj6)*(sj7)))+(((-225.000000000000)*(cj7)*(sj6)))))));
															sj5array[0]=IKsin(j5array[0]);
															cj5array[0]=IKcos(j5array[0]);
															if( j5array[0] > IKPI )
															{
																j5array[0]-=IK2PI;
															}
															else if( j5array[0] < -IKPI )
															{
																j5array[0]+=IK2PI;
															}
															j5valid[0] = true;
															for(int ij5 = 0; ij5 < 1; ++ij5)
															{
																if( !j5valid[ij5] )
																{
																	continue;
																}
																j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

																{
																	IKReal dummyeval[1];
																	IKReal gconst3;
																	gconst3=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
																	dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																	{
																		{
																			IKReal evalcond[9];
																			evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
																			evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
																			evalcond[2]=((0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																			evalcond[3]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																			evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																			evalcond[5]=((0.0200000000000000)+(((-0.0200000000000000)*(cj5)))+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
																			evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																			evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																			evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																			if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																			{
																				{
																					IKReal dummyeval[1];
																					IKReal gconst4;
																					gconst4=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																					dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										continue;

																									} else
																									{
																										{
																											IKReal j4array[1], cj4array[1], sj4array[1];
																											bool j4valid[1]={false};
																											IKReal x293=(cj5)*(cj5);
																											IKReal x294=(sj5)*(sj5);
																											IKReal x295=((x293)+(x294));
																											j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x295) != 0)?((IKReal)1/(x295)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x295) != 0)?((IKReal)1/(x295)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																											sj4array[0]=IKsin(j4array[0]);
																											cj4array[0]=IKcos(j4array[0]);
																											if( j4array[0] > IKPI )
																											{
																												j4array[0]-=IK2PI;
																											}
																											else if( j4array[0] < -IKPI )
																											{
																												j4array[0]+=IK2PI;
																											}
																											j4valid[0] = true;
																											for(int ij4 = 0; ij4 < 1; ++ij4)
																											{
																												if( !j4valid[ij4] )
																												{
																													continue;
																												}
																												j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j3;
																													solution.basesol[1].foffset = j4;
																													solution.basesol[2].foffset = j5;
																													solution.basesol[3].foffset = j6;
																													solution.basesol[4].foffset = j7;
																													solution.basesol[5].foffset = j8;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j4array[1], cj4array[1], sj4array[1];
																									bool j4valid[1]={false};
																									IKReal x296=(cj5)*(cj5);
																									IKReal x297=(sj5)*(sj5);
																									IKReal x298=((x296)+(x297));
																									j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x298) != 0)?((IKReal)1/(x298)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x298) != 0)?((IKReal)1/(x298)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																									sj4array[0]=IKsin(j4array[0]);
																									cj4array[0]=IKcos(j4array[0]);
																									if( j4array[0] > IKPI )
																									{
																										j4array[0]-=IK2PI;
																									}
																									else if( j4array[0] < -IKPI )
																									{
																										j4array[0]+=IK2PI;
																									}
																									j4valid[0] = true;
																									for(int ij4 = 0; ij4 < 1; ++ij4)
																									{
																										if( !j4valid[ij4] )
																										{
																											continue;
																										}
																										j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j3;
																											solution.basesol[1].foffset = j4;
																											solution.basesol[2].foffset = j5;
																											solution.basesol[3].foffset = j6;
																											solution.basesol[4].foffset = j7;
																											solution.basesol[5].foffset = j8;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j4array[1], cj4array[1], sj4array[1];
																							bool j4valid[1]={false};
																							j4array[0]=IKatan2(((gconst4)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst4)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																							sj4array[0]=IKsin(j4array[0]);
																							cj4array[0]=IKcos(j4array[0]);
																							if( j4array[0] > IKPI )
																							{
																								j4array[0]-=IK2PI;
																							}
																							else if( j4array[0] < -IKPI )
																							{
																								j4array[0]+=IK2PI;
																							}
																							j4valid[0] = true;
																							for(int ij4 = 0; ij4 < 1; ++ij4)
																							{
																								if( !j4valid[ij4] )
																								{
																									continue;
																								}
																								j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j3;
																									solution.basesol[1].foffset = j4;
																									solution.basesol[2].foffset = j5;
																									solution.basesol[3].foffset = j6;
																									solution.basesol[4].foffset = j7;
																									solution.basesol[5].foffset = j8;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}

																			} else
																			{
																				evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
																				evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
																				evalcond[2]=((-0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																				evalcond[3]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																				evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																				evalcond[5]=((-0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((0.0200000000000000)*(cj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
																				evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																				evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																				evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																				if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																				{
																					{
																						IKReal dummyeval[1];
																						IKReal gconst5;
																						gconst5=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																						dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							continue;

																						} else
																						{
																							{
																								IKReal j4array[1], cj4array[1], sj4array[1];
																								bool j4valid[1]={false};
																								j4array[0]=IKatan2(((gconst5)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst5)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																								sj4array[0]=IKsin(j4array[0]);
																								cj4array[0]=IKcos(j4array[0]);
																								if( j4array[0] > IKPI )
																								{
																									j4array[0]-=IK2PI;
																								}
																								else if( j4array[0] < -IKPI )
																								{
																									j4array[0]+=IK2PI;
																								}
																								j4valid[0] = true;
																								for(int ij4 = 0; ij4 < 1; ++ij4)
																								{
																									if( !j4valid[ij4] )
																									{
																										continue;
																									}
																									j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																									{
																										vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																										solution.basesol.resize(6);
																										solution.basesol[0].foffset = j3;
																										solution.basesol[1].foffset = j4;
																										solution.basesol[2].foffset = j5;
																										solution.basesol[3].foffset = j6;
																										solution.basesol[4].foffset = j7;
																										solution.basesol[5].foffset = j8;
																										solution.vfree.resize(0);
																									}
																								}
																							}

																						}

																					}

																				} else
																				{
																					if( 1 )
																					{
																						continue;

																					} else
																					{
																					}
																				}
																			}
																		}

																	} else
																	{
																		{
																			IKReal j4array[1], cj4array[1], sj4array[1];
																			bool j4valid[1]={false};
																			j4array[0]=IKatan2(((gconst3)*(((((cj5)*(r20)*(sj8)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj5)*(cj8)*(r21)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))))), ((gconst3)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))))));
																			sj4array[0]=IKsin(j4array[0]);
																			cj4array[0]=IKcos(j4array[0]);
																			if( j4array[0] > IKPI )
																			{
																				j4array[0]-=IK2PI;
																			}
																			else if( j4array[0] < -IKPI )
																			{
																				j4array[0]+=IK2PI;
																			}
																			j4valid[0] = true;
																			for(int ij4 = 0; ij4 < 1; ++ij4)
																			{
																				if( !j4valid[ij4] )
																				{
																					continue;
																				}
																				j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																				{
																					vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																					solution.basesol.resize(6);
																					solution.basesol[0].foffset = j3;
																					solution.basesol[1].foffset = j4;
																					solution.basesol[2].foffset = j5;
																					solution.basesol[3].foffset = j6;
																					solution.basesol[4].foffset = j7;
																					solution.basesol[5].foffset = j8;
																					solution.vfree.resize(0);
																				}
																			}
																		}

																	}

																}
															}
														}

													}

												}
											}
										}

									}

								}

							} else
							{
								{
									IKReal j5array[1], cj5array[1], sj5array[1];
									bool j5valid[1]={false};
									j5array[0]=IKatan2(((gconst1)*(((((-200.000000000000)*(npz)*(sj6)*(sj7)))+(((18.0000000000000)*(cj7)*(sj6)))+(((-212.500000000000)*(cj6)))+(((-200.000000000000)*(cj7)*(cj8)*(npx)*(sj6)))+(((94.0000000000000)*(sj6)))+(((-2500.00000000000)*(cj8)*(npy)))+(((200.000000000000)*(cj7)*(npy)*(sj6)*(sj8)))+(((-2500.00000000000)*(npx)*(sj8)))))), ((gconst1)*(((((2500.00000000000)*(cj7)*(cj8)*(npx)*(sj6)))+(((-200.000000000000)*(cj8)*(npy)))+(((-2500.00000000000)*(cj7)*(npy)*(sj6)*(sj8)))+(((-17.0000000000000)*(cj6)))+(((-546.000000000000)*(sj6)))+(((-200.000000000000)*(npx)*(sj8)))+(((2500.00000000000)*(npz)*(sj6)*(sj7)))+(((-225.000000000000)*(cj7)*(sj6)))))));
									sj5array[0]=IKsin(j5array[0]);
									cj5array[0]=IKcos(j5array[0]);
									if( j5array[0] > IKPI )
									{
										j5array[0]-=IK2PI;
									}
									else if( j5array[0] < -IKPI )
									{
										j5array[0]+=IK2PI;
									}
									j5valid[0] = true;
									for(int ij5 = 0; ij5 < 1; ++ij5)
									{
										if( !j5valid[ij5] )
										{
											continue;
										}
										j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

										{
											IKReal dummyeval[1];
											IKReal gconst9;
											gconst9=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
											dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
											{
												{
													IKReal dummyeval[1];
													IKReal gconst8;
													IKReal x299=(sj8)*(sj8);
													IKReal x300=(cj8)*(cj8);
													gconst8=IKsign(((((-1.00000000000000)*(r00)*(r11)*(sj7)*(x299)))+(((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((r01)*(r10)*(sj7)*(x299)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((r01)*(r10)*(sj7)*(x300)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x300)))));
													IKReal x301=(sj8)*(sj8);
													IKReal x302=(cj8)*(cj8);
													dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((r01)*(r10)*(sj7)*(x302)))+(((r01)*(r10)*(sj7)*(x301)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x302)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x301))));
													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
													{
														{
															IKReal dummyeval[1];
															IKReal x303=(sj8)*(sj8);
															IKReal x304=(cj8)*(cj8);
															dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj8)*(r02)*(r11)*(sj7)))+(((cj7)*(r00)*(r11)*(x304)))+(((cj7)*(r00)*(r11)*(x303)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x303)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x304)))+(((r02)*(r10)*(sj7)*(sj8))));
															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
															{
																{
																	IKReal evalcond[5];
																	evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
																	evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
																	evalcond[2]=((0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																	evalcond[3]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																	evalcond[4]=((0.0200000000000000)+(((-0.0200000000000000)*(cj5)))+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
																	if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
																	{
																		{
																			IKReal dummyeval[1];
																			dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				{
																					IKReal dummyeval[1];
																					IKReal x305=(sj8)*(sj8);
																					IKReal x306=(cj8)*(cj8);
																					dummyeval[0]=((((x306)*((r11)*(r11))))+(((x305)*((r00)*(r00))))+(((x305)*((r10)*(r10))))+(((x306)*((r01)*(r01))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							IKReal x307=(sj8)*(sj8);
																							IKReal x308=(cj8)*(cj8);
																							dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj8)*(r02)*(r11)*(sj7)))+(((cj7)*(r00)*(r11)*(x308)))+(((cj7)*(r00)*(r11)*(x307)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x308)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x307)))+(((r02)*(r10)*(sj7)*(sj8))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								continue;

																							} else
																							{
																								{
																									IKReal j3array[1], cj3array[1], sj3array[1];
																									bool j3valid[1]={false};
																									IKReal x309=(sj8)*(sj8);
																									IKReal x310=(cj8)*(cj8);
																									IKReal x311=((cj7)*(r01)*(r10)*(x309));
																									IKReal x312=((cj7)*(r01)*(r10)*(x310));
																									IKReal x313=((r00)*(r12)*(sj7)*(sj8));
																									IKReal x314=((cj8)*(r01)*(r12)*(sj7));
																									IKReal x315=((x314)+(x311)+(x313)+(x312));
																									IKReal x316=((cj7)*(r00)*(r11)*(x309));
																									IKReal x317=((cj7)*(r00)*(r11)*(x310));
																									IKReal x318=((cj8)*(r02)*(r11)*(sj7));
																									IKReal x319=((r02)*(r10)*(sj7)*(sj8));
																									IKReal x320=((x319)+(x318)+(x317)+(x316));
																									j3array[0]=IKatan2(((((IKabs(((x320)+(((-1.00000000000000)*(x315))))) != 0)?((IKReal)1/(((x320)+(((-1.00000000000000)*(x315)))))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x320)))+(x315))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x320)))+(x315)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
																									sj3array[0]=IKsin(j3array[0]);
																									cj3array[0]=IKcos(j3array[0]);
																									if( j3array[0] > IKPI )
																									{
																										j3array[0]-=IK2PI;
																									}
																									else if( j3array[0] < -IKPI )
																									{
																										j3array[0]+=IK2PI;
																									}
																									j3valid[0] = true;
																									for(int ij3 = 0; ij3 < 1; ++ij3)
																									{
																										if( !j3valid[ij3] )
																										{
																											continue;
																										}
																										j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																										{
																											IKReal dummyeval[1];
																											IKReal gconst14;
																											gconst14=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																											dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												{
																													IKReal dummyeval[1];
																													dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														{
																															IKReal dummyeval[1];
																															dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																															{
																																continue;

																															} else
																															{
																																{
																																	IKReal j4array[1], cj4array[1], sj4array[1];
																																	bool j4valid[1]={false};
																																	IKReal x321=(cj5)*(cj5);
																																	IKReal x322=(sj5)*(sj5);
																																	IKReal x323=((x321)+(x322));
																																	j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x323) != 0)?((IKReal)1/(x323)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x323) != 0)?((IKReal)1/(x323)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																																	sj4array[0]=IKsin(j4array[0]);
																																	cj4array[0]=IKcos(j4array[0]);
																																	if( j4array[0] > IKPI )
																																	{
																																		j4array[0]-=IK2PI;
																																	}
																																	else if( j4array[0] < -IKPI )
																																	{
																																		j4array[0]+=IK2PI;
																																	}
																																	j4valid[0] = true;
																																	for(int ij4 = 0; ij4 < 1; ++ij4)
																																	{
																																		if( !j4valid[ij4] )
																																		{
																																			continue;
																																		}
																																		j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																		{
																																			vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																			solution.basesol.resize(6);
																																			solution.basesol[0].foffset = j3;
																																			solution.basesol[1].foffset = j4;
																																			solution.basesol[2].foffset = j5;
																																			solution.basesol[3].foffset = j6;
																																			solution.basesol[4].foffset = j7;
																																			solution.basesol[5].foffset = j8;
																																			solution.vfree.resize(0);
																																		}
																																	}
																																}

																															}

																														}

																													} else
																													{
																														{
																															IKReal j4array[1], cj4array[1], sj4array[1];
																															bool j4valid[1]={false};
																															IKReal x324=(cj5)*(cj5);
																															IKReal x325=(sj5)*(sj5);
																															IKReal x326=((x324)+(x325));
																															j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x326) != 0)?((IKReal)1/(x326)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x326) != 0)?((IKReal)1/(x326)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																															sj4array[0]=IKsin(j4array[0]);
																															cj4array[0]=IKcos(j4array[0]);
																															if( j4array[0] > IKPI )
																															{
																																j4array[0]-=IK2PI;
																															}
																															else if( j4array[0] < -IKPI )
																															{
																																j4array[0]+=IK2PI;
																															}
																															j4valid[0] = true;
																															for(int ij4 = 0; ij4 < 1; ++ij4)
																															{
																																if( !j4valid[ij4] )
																																{
																																	continue;
																																}
																																j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j3;
																																	solution.basesol[1].foffset = j4;
																																	solution.basesol[2].foffset = j5;
																																	solution.basesol[3].foffset = j6;
																																	solution.basesol[4].foffset = j7;
																																	solution.basesol[5].foffset = j8;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}

																											} else
																											{
																												{
																													IKReal j4array[1], cj4array[1], sj4array[1];
																													bool j4valid[1]={false};
																													j4array[0]=IKatan2(((gconst14)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst14)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																													sj4array[0]=IKsin(j4array[0]);
																													cj4array[0]=IKcos(j4array[0]);
																													if( j4array[0] > IKPI )
																													{
																														j4array[0]-=IK2PI;
																													}
																													else if( j4array[0] < -IKPI )
																													{
																														j4array[0]+=IK2PI;
																													}
																													j4valid[0] = true;
																													for(int ij4 = 0; ij4 < 1; ++ij4)
																													{
																														if( !j4valid[ij4] )
																														{
																															continue;
																														}
																														j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j3;
																															solution.basesol[1].foffset = j4;
																															solution.basesol[2].foffset = j5;
																															solution.basesol[3].foffset = j6;
																															solution.basesol[4].foffset = j7;
																															solution.basesol[5].foffset = j8;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j3array[1], cj3array[1], sj3array[1];
																							bool j3valid[1]={false};
																							IKReal x327=(sj8)*(sj8);
																							IKReal x328=(cj8)*(cj8);
																							IKReal x329=(r11)*(r11);
																							IKReal x330=((x328)*(x329));
																							IKReal x331=(r00)*(r00);
																							IKReal x332=((x327)*(x331));
																							IKReal x333=(r10)*(r10);
																							IKReal x334=((x327)*(x333));
																							IKReal x335=(r01)*(r01);
																							IKReal x336=((x328)*(x335));
																							IKReal x337=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
																							IKReal x338=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
																							IKReal x339=((x338)+(x332)+(x330)+(x337)+(x336)+(x334));
																							j3array[0]=IKatan2(((((IKabs(x339) != 0)?((IKReal)1/(x339)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((-1.00000000000000)*(((IKabs(x339) != 0)?((IKReal)1/(x339)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
																							sj3array[0]=IKsin(j3array[0]);
																							cj3array[0]=IKcos(j3array[0]);
																							if( j3array[0] > IKPI )
																							{
																								j3array[0]-=IK2PI;
																							}
																							else if( j3array[0] < -IKPI )
																							{
																								j3array[0]+=IK2PI;
																							}
																							j3valid[0] = true;
																							for(int ij3 = 0; ij3 < 1; ++ij3)
																							{
																								if( !j3valid[ij3] )
																								{
																									continue;
																								}
																								j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																								{
																									IKReal dummyeval[1];
																									IKReal gconst14;
																									gconst14=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																									dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												{
																													IKReal dummyeval[1];
																													dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																													if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																													{
																														continue;

																													} else
																													{
																														{
																															IKReal j4array[1], cj4array[1], sj4array[1];
																															bool j4valid[1]={false};
																															IKReal x340=(cj5)*(cj5);
																															IKReal x341=(sj5)*(sj5);
																															IKReal x342=((x340)+(x341));
																															j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x342) != 0)?((IKReal)1/(x342)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x342) != 0)?((IKReal)1/(x342)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																															sj4array[0]=IKsin(j4array[0]);
																															cj4array[0]=IKcos(j4array[0]);
																															if( j4array[0] > IKPI )
																															{
																																j4array[0]-=IK2PI;
																															}
																															else if( j4array[0] < -IKPI )
																															{
																																j4array[0]+=IK2PI;
																															}
																															j4valid[0] = true;
																															for(int ij4 = 0; ij4 < 1; ++ij4)
																															{
																																if( !j4valid[ij4] )
																																{
																																	continue;
																																}
																																j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																																{
																																	vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																	solution.basesol.resize(6);
																																	solution.basesol[0].foffset = j3;
																																	solution.basesol[1].foffset = j4;
																																	solution.basesol[2].foffset = j5;
																																	solution.basesol[3].foffset = j6;
																																	solution.basesol[4].foffset = j7;
																																	solution.basesol[5].foffset = j8;
																																	solution.vfree.resize(0);
																																}
																															}
																														}

																													}

																												}

																											} else
																											{
																												{
																													IKReal j4array[1], cj4array[1], sj4array[1];
																													bool j4valid[1]={false};
																													IKReal x343=(cj5)*(cj5);
																													IKReal x344=(sj5)*(sj5);
																													IKReal x345=((x343)+(x344));
																													j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x345) != 0)?((IKReal)1/(x345)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x345) != 0)?((IKReal)1/(x345)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																													sj4array[0]=IKsin(j4array[0]);
																													cj4array[0]=IKcos(j4array[0]);
																													if( j4array[0] > IKPI )
																													{
																														j4array[0]-=IK2PI;
																													}
																													else if( j4array[0] < -IKPI )
																													{
																														j4array[0]+=IK2PI;
																													}
																													j4valid[0] = true;
																													for(int ij4 = 0; ij4 < 1; ++ij4)
																													{
																														if( !j4valid[ij4] )
																														{
																															continue;
																														}
																														j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j3;
																															solution.basesol[1].foffset = j4;
																															solution.basesol[2].foffset = j5;
																															solution.basesol[3].foffset = j6;
																															solution.basesol[4].foffset = j7;
																															solution.basesol[5].foffset = j8;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j4array[1], cj4array[1], sj4array[1];
																											bool j4valid[1]={false};
																											j4array[0]=IKatan2(((gconst14)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst14)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																											sj4array[0]=IKsin(j4array[0]);
																											cj4array[0]=IKcos(j4array[0]);
																											if( j4array[0] > IKPI )
																											{
																												j4array[0]-=IK2PI;
																											}
																											else if( j4array[0] < -IKPI )
																											{
																												j4array[0]+=IK2PI;
																											}
																											j4valid[0] = true;
																											for(int ij4 = 0; ij4 < 1; ++ij4)
																											{
																												if( !j4valid[ij4] )
																												{
																													continue;
																												}
																												j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j3;
																													solution.basesol[1].foffset = j4;
																													solution.basesol[2].foffset = j5;
																													solution.basesol[3].foffset = j6;
																													solution.basesol[4].foffset = j7;
																													solution.basesol[5].foffset = j8;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}
																							}
																						}

																					}

																				}

																			} else
																			{
																				{
																					IKReal j4array[1], cj4array[1], sj4array[1];
																					bool j4valid[1]={false};
																					IKReal x346=(cj5)*(cj5);
																					IKReal x347=(sj5)*(sj5);
																					IKReal x348=((x346)+(x347));
																					j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x348) != 0)?((IKReal)1/(x348)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x348) != 0)?((IKReal)1/(x348)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																					sj4array[0]=IKsin(j4array[0]);
																					cj4array[0]=IKcos(j4array[0]);
																					if( j4array[0] > IKPI )
																					{
																						j4array[0]-=IK2PI;
																					}
																					else if( j4array[0] < -IKPI )
																					{
																						j4array[0]+=IK2PI;
																					}
																					j4valid[0] = true;
																					for(int ij4 = 0; ij4 < 1; ++ij4)
																					{
																						if( !j4valid[ij4] )
																						{
																							continue;
																						}
																						j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																						{
																							IKReal dummyeval[1];
																							IKReal gconst15;
																							IKReal x349=(cj8)*(cj8);
																							IKReal x350=(sj8)*(sj8);
																							gconst15=IKsign(((((-1.00000000000000)*(cj7)*(r00)*(r01)*(x350)))+(((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj7)*(r10)*(r11)*(x349)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x350)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r00)*(r01)*(x349)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))));
																							IKReal x351=(cj8)*(cj8);
																							IKReal x352=(sj8)*(sj8);
																							dummyeval[0]=((((-1.00000000000000)*(cj7)*(r00)*(r01)*(x352)))+(((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((r10)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x352)))+(((cj8)*(r01)*(r02)*(sj7)))+(((cj7)*(r10)*(r11)*(x351)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))+(((cj7)*(r00)*(r01)*(x351))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									IKReal x353=(sj8)*(sj8);
																									IKReal x354=(cj8)*(cj8);
																									dummyeval[0]=((((x353)*((r00)*(r00))))+(((x354)*((r11)*(r11))))+(((x353)*((r10)*(r10))))+(((x354)*((r01)*(r01))))+(((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											IKReal x355=(sj8)*(sj8);
																											IKReal x356=(cj8)*(cj8);
																											dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj7)*(r00)*(r11)*(x355)))+(((cj7)*(r00)*(r11)*(x356)))+(((cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x355)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x356)))+(((r02)*(r10)*(sj7)*(sj8))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												continue;

																											} else
																											{
																												{
																													IKReal j3array[1], cj3array[1], sj3array[1];
																													bool j3valid[1]={false};
																													IKReal x357=(sj8)*(sj8);
																													IKReal x358=(cj8)*(cj8);
																													IKReal x359=((cj7)*(r01)*(r10)*(x357));
																													IKReal x360=((cj7)*(r01)*(r10)*(x358));
																													IKReal x361=((r00)*(r12)*(sj7)*(sj8));
																													IKReal x362=((cj8)*(r01)*(r12)*(sj7));
																													IKReal x363=((x359)+(x360)+(x361)+(x362));
																													IKReal x364=((cj7)*(r00)*(r11)*(x357));
																													IKReal x365=((cj7)*(r00)*(r11)*(x358));
																													IKReal x366=((cj8)*(r02)*(r11)*(sj7));
																													IKReal x367=((r02)*(r10)*(sj7)*(sj8));
																													IKReal x368=((x364)+(x365)+(x366)+(x367));
																													j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x363)))+(x368))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x363)))+(x368)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x368)))+(x363))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x368)))+(x363)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
																													sj3array[0]=IKsin(j3array[0]);
																													cj3array[0]=IKcos(j3array[0]);
																													if( j3array[0] > IKPI )
																													{
																														j3array[0]-=IK2PI;
																													}
																													else if( j3array[0] < -IKPI )
																													{
																														j3array[0]+=IK2PI;
																													}
																													j3valid[0] = true;
																													for(int ij3 = 0; ij3 < 1; ++ij3)
																													{
																														if( !j3valid[ij3] )
																														{
																															continue;
																														}
																														j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j3;
																															solution.basesol[1].foffset = j4;
																															solution.basesol[2].foffset = j5;
																															solution.basesol[3].foffset = j6;
																															solution.basesol[4].foffset = j7;
																															solution.basesol[5].foffset = j8;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j3array[1], cj3array[1], sj3array[1];
																											bool j3valid[1]={false};
																											IKReal x369=(sj8)*(sj8);
																											IKReal x370=(cj8)*(cj8);
																											IKReal x371=(r11)*(r11);
																											IKReal x372=((x370)*(x371));
																											IKReal x373=(r00)*(r00);
																											IKReal x374=((x369)*(x373));
																											IKReal x375=(r10)*(r10);
																											IKReal x376=((x369)*(x375));
																											IKReal x377=(r01)*(r01);
																											IKReal x378=((x370)*(x377));
																											IKReal x379=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
																											IKReal x380=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
																											IKReal x381=((x380)+(x379)+(x378)+(x376)+(x374)+(x372));
																											j3array[0]=IKatan2(((((IKabs(x381) != 0)?((IKReal)1/(x381)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((-1.00000000000000)*(((IKabs(x381) != 0)?((IKReal)1/(x381)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
																											sj3array[0]=IKsin(j3array[0]);
																											cj3array[0]=IKcos(j3array[0]);
																											if( j3array[0] > IKPI )
																											{
																												j3array[0]-=IK2PI;
																											}
																											else if( j3array[0] < -IKPI )
																											{
																												j3array[0]+=IK2PI;
																											}
																											j3valid[0] = true;
																											for(int ij3 = 0; ij3 < 1; ++ij3)
																											{
																												if( !j3valid[ij3] )
																												{
																													continue;
																												}
																												j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j3;
																													solution.basesol[1].foffset = j4;
																													solution.basesol[2].foffset = j5;
																													solution.basesol[3].foffset = j6;
																													solution.basesol[4].foffset = j7;
																													solution.basesol[5].foffset = j8;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j3array[1], cj3array[1], sj3array[1];
																									bool j3valid[1]={false};
																									j3array[0]=IKatan2(((gconst15)*(((((-1.00000000000000)*(cj4)*(cj8)*(r11)*(sj5)))+(((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj4)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))+(((-1.00000000000000)*(cj4)*(r10)*(sj5)*(sj8)))))), ((gconst15)*(((((-1.00000000000000)*(cj5)*(cj8)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj8)*(r01)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj4)*(r00)*(sj5)*(sj8)))+(((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))));
																									sj3array[0]=IKsin(j3array[0]);
																									cj3array[0]=IKcos(j3array[0]);
																									if( j3array[0] > IKPI )
																									{
																										j3array[0]-=IK2PI;
																									}
																									else if( j3array[0] < -IKPI )
																									{
																										j3array[0]+=IK2PI;
																									}
																									j3valid[0] = true;
																									for(int ij3 = 0; ij3 < 1; ++ij3)
																									{
																										if( !j3valid[ij3] )
																										{
																											continue;
																										}
																										j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j3;
																											solution.basesol[1].foffset = j4;
																											solution.basesol[2].foffset = j5;
																											solution.basesol[3].foffset = j6;
																											solution.basesol[4].foffset = j7;
																											solution.basesol[5].foffset = j8;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}
																					}
																				}

																			}

																		}

																	} else
																	{
																		evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
																		evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
																		evalcond[2]=((-0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																		evalcond[3]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																		evalcond[4]=((-0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((0.0200000000000000)*(cj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
																		if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
																		{
																			{
																				IKReal dummyeval[1];
																				IKReal gconst16;
																				gconst16=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																				dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																				if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																				{
																					{
																						IKReal dummyeval[1];
																						IKReal x382=(sj8)*(sj8);
																						IKReal x383=(cj8)*(cj8);
																						dummyeval[0]=((((-1.00000000000000)*(x383)*((r11)*(r11))))+(((-1.00000000000000)*(x382)*((r10)*(r10))))+(((-1.00000000000000)*(x383)*((r01)*(r01))))+(((-1.00000000000000)*(x382)*((r00)*(r00))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							{
																								IKReal dummyeval[1];
																								IKReal x384=(sj8)*(sj8);
																								IKReal x385=(cj8)*(cj8);
																								dummyeval[0]=((((cj7)*(r01)*(r10)*(x384)))+(((cj7)*(r01)*(r10)*(x385)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x385)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x384)))+(((r00)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(r02)*(r10)*(sj7)*(sj8))));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									continue;

																								} else
																								{
																									{
																										IKReal j3array[1], cj3array[1], sj3array[1];
																										bool j3valid[1]={false};
																										IKReal x386=(sj8)*(sj8);
																										IKReal x387=(cj8)*(cj8);
																										IKReal x388=((cj7)*(r00)*(r11)*(x386));
																										IKReal x389=((cj7)*(r00)*(r11)*(x387));
																										IKReal x390=((cj8)*(r02)*(r11)*(sj7));
																										IKReal x391=((r02)*(r10)*(sj7)*(sj8));
																										IKReal x392=((x388)+(x389)+(x391)+(x390));
																										IKReal x393=((cj7)*(r01)*(r10)*(x386));
																										IKReal x394=((cj7)*(r01)*(r10)*(x387));
																										IKReal x395=((r00)*(r12)*(sj7)*(sj8));
																										IKReal x396=((cj8)*(r01)*(r12)*(sj7));
																										IKReal x397=((x395)+(x394)+(x396)+(x393));
																										j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x392)))+(x397))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x392)))+(x397)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x397)))+(x392))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x397)))+(x392)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
																										sj3array[0]=IKsin(j3array[0]);
																										cj3array[0]=IKcos(j3array[0]);
																										if( j3array[0] > IKPI )
																										{
																											j3array[0]-=IK2PI;
																										}
																										else if( j3array[0] < -IKPI )
																										{
																											j3array[0]+=IK2PI;
																										}
																										j3valid[0] = true;
																										for(int ij3 = 0; ij3 < 1; ++ij3)
																										{
																											if( !j3valid[ij3] )
																											{
																												continue;
																											}
																											j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																											{
																												IKReal dummyeval[1];
																												IKReal gconst17;
																												gconst17=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																												dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																												if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																												{
																													continue;

																												} else
																												{
																													{
																														IKReal j4array[1], cj4array[1], sj4array[1];
																														bool j4valid[1]={false};
																														j4array[0]=IKatan2(((gconst17)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst17)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																														sj4array[0]=IKsin(j4array[0]);
																														cj4array[0]=IKcos(j4array[0]);
																														if( j4array[0] > IKPI )
																														{
																															j4array[0]-=IK2PI;
																														}
																														else if( j4array[0] < -IKPI )
																														{
																															j4array[0]+=IK2PI;
																														}
																														j4valid[0] = true;
																														for(int ij4 = 0; ij4 < 1; ++ij4)
																														{
																															if( !j4valid[ij4] )
																															{
																																continue;
																															}
																															j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																															{
																																vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																solution.basesol.resize(6);
																																solution.basesol[0].foffset = j3;
																																solution.basesol[1].foffset = j4;
																																solution.basesol[2].foffset = j5;
																																solution.basesol[3].foffset = j6;
																																solution.basesol[4].foffset = j7;
																																solution.basesol[5].foffset = j8;
																																solution.vfree.resize(0);
																															}
																														}
																													}

																												}

																											}
																										}
																									}

																								}

																							}

																						} else
																						{
																							{
																								IKReal j3array[1], cj3array[1], sj3array[1];
																								bool j3valid[1]={false};
																								IKReal x398=(sj8)*(sj8);
																								IKReal x399=(cj8)*(cj8);
																								IKReal x400=(r11)*(r11);
																								IKReal x401=((x399)*(x400));
																								IKReal x402=(r00)*(r00);
																								IKReal x403=((x398)*(x402));
																								IKReal x404=(r10)*(r10);
																								IKReal x405=((x398)*(x404));
																								IKReal x406=(r01)*(r01);
																								IKReal x407=((x399)*(x406));
																								IKReal x408=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
																								IKReal x409=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
																								IKReal x410=((x401)+(x403)+(x405)+(x407)+(x409)+(x408));
																								j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x410) != 0)?((IKReal)1/(x410)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((((IKabs(x410) != 0)?((IKReal)1/(x410)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
																								sj3array[0]=IKsin(j3array[0]);
																								cj3array[0]=IKcos(j3array[0]);
																								if( j3array[0] > IKPI )
																								{
																									j3array[0]-=IK2PI;
																								}
																								else if( j3array[0] < -IKPI )
																								{
																									j3array[0]+=IK2PI;
																								}
																								j3valid[0] = true;
																								for(int ij3 = 0; ij3 < 1; ++ij3)
																								{
																									if( !j3valid[ij3] )
																									{
																										continue;
																									}
																									j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																									{
																										IKReal dummyeval[1];
																										IKReal gconst17;
																										gconst17=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																										dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											continue;

																										} else
																										{
																											{
																												IKReal j4array[1], cj4array[1], sj4array[1];
																												bool j4valid[1]={false};
																												j4array[0]=IKatan2(((gconst17)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst17)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																												sj4array[0]=IKsin(j4array[0]);
																												cj4array[0]=IKcos(j4array[0]);
																												if( j4array[0] > IKPI )
																												{
																													j4array[0]-=IK2PI;
																												}
																												else if( j4array[0] < -IKPI )
																												{
																													j4array[0]+=IK2PI;
																												}
																												j4valid[0] = true;
																												for(int ij4 = 0; ij4 < 1; ++ij4)
																												{
																													if( !j4valid[ij4] )
																													{
																														continue;
																													}
																													j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j3;
																														solution.basesol[1].foffset = j4;
																														solution.basesol[2].foffset = j5;
																														solution.basesol[3].foffset = j6;
																														solution.basesol[4].foffset = j7;
																														solution.basesol[5].foffset = j8;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}
																								}
																							}

																						}

																					}

																				} else
																				{
																					{
																						IKReal j4array[1], cj4array[1], sj4array[1];
																						bool j4valid[1]={false};
																						j4array[0]=IKatan2(((gconst16)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst16)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																						sj4array[0]=IKsin(j4array[0]);
																						cj4array[0]=IKcos(j4array[0]);
																						if( j4array[0] > IKPI )
																						{
																							j4array[0]-=IK2PI;
																						}
																						else if( j4array[0] < -IKPI )
																						{
																							j4array[0]+=IK2PI;
																						}
																						j4valid[0] = true;
																						for(int ij4 = 0; ij4 < 1; ++ij4)
																						{
																							if( !j4valid[ij4] )
																							{
																								continue;
																							}
																							j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																							{
																								IKReal dummyeval[1];
																								IKReal gconst18;
																								IKReal x411=(cj8)*(cj8);
																								IKReal x412=(sj8)*(sj8);
																								gconst18=IKsign(((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x412)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj7)*(r00)*(r01)*(x411)))+(((cj8)*(r01)*(r02)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x412)))+(((cj7)*(r10)*(r11)*(x411)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7)))));
																								IKReal x413=(cj8)*(cj8);
																								IKReal x414=(sj8)*(sj8);
																								dummyeval[0]=((((cj7)*(cj8)*(sj8)*((r10)*(r10))))+(((r00)*(r02)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj7)*(r10)*(r11)*(x414)))+(((r10)*(r12)*(sj7)*(sj8)))+(((cj7)*(r00)*(r01)*(x413)))+(((cj8)*(r01)*(r02)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00)*(r01)*(x414)))+(((cj7)*(r10)*(r11)*(x413)))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r11)*(r11))))+(((-1.00000000000000)*(cj7)*(cj8)*(sj8)*((r01)*(r01))))+(((cj7)*(cj8)*(sj8)*((r00)*(r00))))+(((cj8)*(r11)*(r12)*(sj7))));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									{
																										IKReal dummyeval[1];
																										IKReal x415=(sj8)*(sj8);
																										IKReal x416=(cj8)*(cj8);
																										dummyeval[0]=((((-1.00000000000000)*(x416)*((r11)*(r11))))+(((-1.00000000000000)*(x415)*((r00)*(r00))))+(((-1.00000000000000)*(x415)*((r10)*(r10))))+(((-2.00000000000000)*(cj8)*(r00)*(r01)*(sj8)))+(((-1.00000000000000)*(x416)*((r01)*(r01))))+(((-2.00000000000000)*(cj8)*(r10)*(r11)*(sj8))));
																										if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																										{
																											{
																												IKReal dummyeval[1];
																												IKReal x417=(sj8)*(sj8);
																												IKReal x418=(cj8)*(cj8);
																												dummyeval[0]=((((cj7)*(r01)*(r10)*(x417)))+(((cj7)*(r01)*(r10)*(x418)))+(((r00)*(r12)*(sj7)*(sj8)))+(((cj8)*(r01)*(r12)*(sj7)))+(((-1.00000000000000)*(cj8)*(r02)*(r11)*(sj7)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x417)))+(((-1.00000000000000)*(cj7)*(r00)*(r11)*(x418)))+(((-1.00000000000000)*(r02)*(r10)*(sj7)*(sj8))));
																												if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																												{
																													continue;

																												} else
																												{
																													{
																														IKReal j3array[1], cj3array[1], sj3array[1];
																														bool j3valid[1]={false};
																														IKReal x419=(sj8)*(sj8);
																														IKReal x420=(cj8)*(cj8);
																														IKReal x421=((cj7)*(r00)*(r11)*(x419));
																														IKReal x422=((cj7)*(r00)*(r11)*(x420));
																														IKReal x423=((cj8)*(r02)*(r11)*(sj7));
																														IKReal x424=((r02)*(r10)*(sj7)*(sj8));
																														IKReal x425=((x424)+(x423)+(x422)+(x421));
																														IKReal x426=((cj7)*(r01)*(r10)*(x419));
																														IKReal x427=((cj7)*(r01)*(r10)*(x420));
																														IKReal x428=((r00)*(r12)*(sj7)*(sj8));
																														IKReal x429=((cj8)*(r01)*(r12)*(sj7));
																														IKReal x430=((x429)+(x428)+(x427)+(x426));
																														j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x425)))+(x430))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x425)))+(x430)))):(IKReal)1.0e30))*(((((r12)*(sj7)))+(((cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x430)))+(x425))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x430)))+(x425)))):(IKReal)1.0e30))*(((((cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(r02)*(sj7)))))));
																														sj3array[0]=IKsin(j3array[0]);
																														cj3array[0]=IKcos(j3array[0]);
																														if( j3array[0] > IKPI )
																														{
																															j3array[0]-=IK2PI;
																														}
																														else if( j3array[0] < -IKPI )
																														{
																															j3array[0]+=IK2PI;
																														}
																														j3valid[0] = true;
																														for(int ij3 = 0; ij3 < 1; ++ij3)
																														{
																															if( !j3valid[ij3] )
																															{
																																continue;
																															}
																															j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																															{
																																vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																																solution.basesol.resize(6);
																																solution.basesol[0].foffset = j3;
																																solution.basesol[1].foffset = j4;
																																solution.basesol[2].foffset = j5;
																																solution.basesol[3].foffset = j6;
																																solution.basesol[4].foffset = j7;
																																solution.basesol[5].foffset = j8;
																																solution.vfree.resize(0);
																															}
																														}
																													}

																												}

																											}

																										} else
																										{
																											{
																												IKReal j3array[1], cj3array[1], sj3array[1];
																												bool j3valid[1]={false};
																												IKReal x431=(sj8)*(sj8);
																												IKReal x432=(cj8)*(cj8);
																												IKReal x433=(r11)*(r11);
																												IKReal x434=((x432)*(x433));
																												IKReal x435=(r00)*(r00);
																												IKReal x436=((x431)*(x435));
																												IKReal x437=(r10)*(r10);
																												IKReal x438=((x431)*(x437));
																												IKReal x439=(r01)*(r01);
																												IKReal x440=((x432)*(x439));
																												IKReal x441=((2.00000000000000)*(cj8)*(r00)*(r01)*(sj8));
																												IKReal x442=((2.00000000000000)*(cj8)*(r10)*(r11)*(sj8));
																												IKReal x443=((x438)+(x434)+(x436)+(x441)+(x440)+(x442));
																												j3array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x443) != 0)?((IKReal)1/(x443)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r01)))+(((-1.00000000000000)*(r00)*(sj8)))))), ((((IKabs(x443) != 0)?((IKReal)1/(x443)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj8)*(r11)))+(((-1.00000000000000)*(r10)*(sj8)))))));
																												sj3array[0]=IKsin(j3array[0]);
																												cj3array[0]=IKcos(j3array[0]);
																												if( j3array[0] > IKPI )
																												{
																													j3array[0]-=IK2PI;
																												}
																												else if( j3array[0] < -IKPI )
																												{
																													j3array[0]+=IK2PI;
																												}
																												j3valid[0] = true;
																												for(int ij3 = 0; ij3 < 1; ++ij3)
																												{
																													if( !j3valid[ij3] )
																													{
																														continue;
																													}
																													j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																													{
																														vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																														solution.basesol.resize(6);
																														solution.basesol[0].foffset = j3;
																														solution.basesol[1].foffset = j4;
																														solution.basesol[2].foffset = j5;
																														solution.basesol[3].foffset = j6;
																														solution.basesol[4].foffset = j7;
																														solution.basesol[5].foffset = j8;
																														solution.vfree.resize(0);
																													}
																												}
																											}

																										}

																									}

																								} else
																								{
																									{
																										IKReal j3array[1], cj3array[1], sj3array[1];
																										bool j3valid[1]={false};
																										j3array[0]=IKatan2(((gconst18)*(((((r02)*(sj7)))+(((-1.00000000000000)*(cj4)*(cj8)*(r11)*(sj5)))+(((cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj8)*(r11)*(sj4)))+(((-1.00000000000000)*(cj5)*(r10)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj4)*(r10)*(sj5)*(sj8)))))), ((gconst18)*(((((-1.00000000000000)*(cj5)*(cj8)*(r01)*(sj4)))+(((cj7)*(r11)*(sj8)))+(((-1.00000000000000)*(cj4)*(cj8)*(r01)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(sj4)*(sj8)))+(((-1.00000000000000)*(cj4)*(r00)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r12)*(sj7)))))));
																										sj3array[0]=IKsin(j3array[0]);
																										cj3array[0]=IKcos(j3array[0]);
																										if( j3array[0] > IKPI )
																										{
																											j3array[0]-=IK2PI;
																										}
																										else if( j3array[0] < -IKPI )
																										{
																											j3array[0]+=IK2PI;
																										}
																										j3valid[0] = true;
																										for(int ij3 = 0; ij3 < 1; ++ij3)
																										{
																											if( !j3valid[ij3] )
																											{
																												continue;
																											}
																											j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																											{
																												vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																												solution.basesol.resize(6);
																												solution.basesol[0].foffset = j3;
																												solution.basesol[1].foffset = j4;
																												solution.basesol[2].foffset = j5;
																												solution.basesol[3].foffset = j6;
																												solution.basesol[4].foffset = j7;
																												solution.basesol[5].foffset = j8;
																												solution.vfree.resize(0);
																											}
																										}
																									}

																								}

																							}
																						}
																					}

																				}

																			}

																		} else
																		{
																			if( 1 )
																			{
																				continue;

																			} else
																			{
																			}
																		}
																	}
																}

															} else
															{
																{
																	IKReal j3array[1], cj3array[1], sj3array[1];
																	bool j3valid[1]={false};
																	IKReal x444=(sj8)*(sj8);
																	IKReal x445=(cj8)*(cj8);
																	IKReal x446=((cj7)*(r01)*(r10)*(x444));
																	IKReal x447=((cj7)*(r01)*(r10)*(x445));
																	IKReal x448=((r00)*(r12)*(sj7)*(sj8));
																	IKReal x449=((cj8)*(r01)*(r12)*(sj7));
																	IKReal x450=((x449)+(x448)+(x447)+(x446));
																	IKReal x451=((cj7)*(r00)*(r11)*(x444));
																	IKReal x452=((cj7)*(r00)*(r11)*(x445));
																	IKReal x453=((cj8)*(r02)*(r11)*(sj7));
																	IKReal x454=((r02)*(r10)*(sj7)*(sj8));
																	IKReal x455=((x454)+(x452)+(x453)+(x451));
																	j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x450)))+(x455))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x450)))+(x455)))):(IKReal)1.0e30))*(((((cj6)*(r12)*(sj7)))+(((cj6)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj6)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x455)))+(x450))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x455)))+(x450)))):(IKReal)1.0e30))*(((((cj6)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj6)*(r02)*(sj7)))))));
																	sj3array[0]=IKsin(j3array[0]);
																	cj3array[0]=IKcos(j3array[0]);
																	if( j3array[0] > IKPI )
																	{
																		j3array[0]-=IK2PI;
																	}
																	else if( j3array[0] < -IKPI )
																	{
																		j3array[0]+=IK2PI;
																	}
																	j3valid[0] = true;
																	for(int ij3 = 0; ij3 < 1; ++ij3)
																	{
																		if( !j3valid[ij3] )
																		{
																			continue;
																		}
																		j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																		{
																			IKReal dummyeval[1];
																			IKReal gconst10;
																			gconst10=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
																			dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
																			if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																			{
																				{
																					IKReal evalcond[9];
																					evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
																					evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
																					evalcond[2]=((0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																					evalcond[3]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																					evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																					evalcond[5]=((0.0200000000000000)+(((-0.0200000000000000)*(cj5)))+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
																					evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																					evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																					evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																					if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							IKReal gconst11;
																							gconst11=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																							dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										{
																											IKReal dummyeval[1];
																											dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																											if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																											{
																												continue;

																											} else
																											{
																												{
																													IKReal j4array[1], cj4array[1], sj4array[1];
																													bool j4valid[1]={false};
																													IKReal x456=(cj5)*(cj5);
																													IKReal x457=(sj5)*(sj5);
																													IKReal x458=((x456)+(x457));
																													j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x458) != 0)?((IKReal)1/(x458)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x458) != 0)?((IKReal)1/(x458)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																													sj4array[0]=IKsin(j4array[0]);
																													cj4array[0]=IKcos(j4array[0]);
																													if( j4array[0] > IKPI )
																													{
																														j4array[0]-=IK2PI;
																													}
																													else if( j4array[0] < -IKPI )
																													{
																														j4array[0]+=IK2PI;
																													}
																													j4valid[0] = true;
																													for(int ij4 = 0; ij4 < 1; ++ij4)
																													{
																														if( !j4valid[ij4] )
																														{
																															continue;
																														}
																														j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																														{
																															vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																															solution.basesol.resize(6);
																															solution.basesol[0].foffset = j3;
																															solution.basesol[1].foffset = j4;
																															solution.basesol[2].foffset = j5;
																															solution.basesol[3].foffset = j6;
																															solution.basesol[4].foffset = j7;
																															solution.basesol[5].foffset = j8;
																															solution.vfree.resize(0);
																														}
																													}
																												}

																											}

																										}

																									} else
																									{
																										{
																											IKReal j4array[1], cj4array[1], sj4array[1];
																											bool j4valid[1]={false};
																											IKReal x459=(cj5)*(cj5);
																											IKReal x460=(sj5)*(sj5);
																											IKReal x461=((x459)+(x460));
																											j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x461) != 0)?((IKReal)1/(x461)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x461) != 0)?((IKReal)1/(x461)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																											sj4array[0]=IKsin(j4array[0]);
																											cj4array[0]=IKcos(j4array[0]);
																											if( j4array[0] > IKPI )
																											{
																												j4array[0]-=IK2PI;
																											}
																											else if( j4array[0] < -IKPI )
																											{
																												j4array[0]+=IK2PI;
																											}
																											j4valid[0] = true;
																											for(int ij4 = 0; ij4 < 1; ++ij4)
																											{
																												if( !j4valid[ij4] )
																												{
																													continue;
																												}
																												j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j3;
																													solution.basesol[1].foffset = j4;
																													solution.basesol[2].foffset = j5;
																													solution.basesol[3].foffset = j6;
																													solution.basesol[4].foffset = j7;
																													solution.basesol[5].foffset = j8;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j4array[1], cj4array[1], sj4array[1];
																									bool j4valid[1]={false};
																									j4array[0]=IKatan2(((gconst11)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst11)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																									sj4array[0]=IKsin(j4array[0]);
																									cj4array[0]=IKcos(j4array[0]);
																									if( j4array[0] > IKPI )
																									{
																										j4array[0]-=IK2PI;
																									}
																									else if( j4array[0] < -IKPI )
																									{
																										j4array[0]+=IK2PI;
																									}
																									j4valid[0] = true;
																									for(int ij4 = 0; ij4 < 1; ++ij4)
																									{
																										if( !j4valid[ij4] )
																										{
																											continue;
																										}
																										j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j3;
																											solution.basesol[1].foffset = j4;
																											solution.basesol[2].foffset = j5;
																											solution.basesol[3].foffset = j6;
																											solution.basesol[4].foffset = j7;
																											solution.basesol[5].foffset = j8;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
																						evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
																						evalcond[2]=((-0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																						evalcond[3]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																						evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																						evalcond[5]=((-0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((0.0200000000000000)*(cj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
																						evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																						evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																						evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																						if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																						{
																							{
																								IKReal dummyeval[1];
																								IKReal gconst12;
																								gconst12=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																								dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																								if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																								{
																									continue;

																								} else
																								{
																									{
																										IKReal j4array[1], cj4array[1], sj4array[1];
																										bool j4valid[1]={false};
																										j4array[0]=IKatan2(((gconst12)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst12)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																										sj4array[0]=IKsin(j4array[0]);
																										cj4array[0]=IKcos(j4array[0]);
																										if( j4array[0] > IKPI )
																										{
																											j4array[0]-=IK2PI;
																										}
																										else if( j4array[0] < -IKPI )
																										{
																											j4array[0]+=IK2PI;
																										}
																										j4valid[0] = true;
																										for(int ij4 = 0; ij4 < 1; ++ij4)
																										{
																											if( !j4valid[ij4] )
																											{
																												continue;
																											}
																											j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																											{
																												vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																												solution.basesol.resize(6);
																												solution.basesol[0].foffset = j3;
																												solution.basesol[1].foffset = j4;
																												solution.basesol[2].foffset = j5;
																												solution.basesol[3].foffset = j6;
																												solution.basesol[4].foffset = j7;
																												solution.basesol[5].foffset = j8;
																												solution.vfree.resize(0);
																											}
																										}
																									}

																								}

																							}

																						} else
																						{
																							if( 1 )
																							{
																								continue;

																							} else
																							{
																							}
																						}
																					}
																				}

																			} else
																			{
																				{
																					IKReal j4array[1], cj4array[1], sj4array[1];
																					bool j4valid[1]={false};
																					j4array[0]=IKatan2(((gconst10)*(((((cj5)*(r20)*(sj8)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj5)*(cj8)*(r21)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))))), ((gconst10)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))))));
																					sj4array[0]=IKsin(j4array[0]);
																					cj4array[0]=IKcos(j4array[0]);
																					if( j4array[0] > IKPI )
																					{
																						j4array[0]-=IK2PI;
																					}
																					else if( j4array[0] < -IKPI )
																					{
																						j4array[0]+=IK2PI;
																					}
																					j4valid[0] = true;
																					for(int ij4 = 0; ij4 < 1; ++ij4)
																					{
																						if( !j4valid[ij4] )
																						{
																							continue;
																						}
																						j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																						{
																							vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																							solution.basesol.resize(6);
																							solution.basesol[0].foffset = j3;
																							solution.basesol[1].foffset = j4;
																							solution.basesol[2].foffset = j5;
																							solution.basesol[3].foffset = j6;
																							solution.basesol[4].foffset = j7;
																							solution.basesol[5].foffset = j8;
																							solution.vfree.resize(0);
																						}
																					}
																				}

																			}

																		}
																	}
																}

															}

														}

													} else
													{
														{
															IKReal j3array[1], cj3array[1], sj3array[1];
															bool j3valid[1]={false};
															j3array[0]=IKatan2(((gconst8)*(((((cj6)*(r11)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj6)))+(((-1.00000000000000)*(r10)*(sj6)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r10)*(sj7)))+(((cj6)*(cj7)*(r12)))))), ((gconst8)*(((((cj6)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(r00)*(sj6)*(sj8)))+(((cj6)*(cj7)*(r02)))+(((-1.00000000000000)*(cj8)*(r01)*(sj6)))))));
															sj3array[0]=IKsin(j3array[0]);
															cj3array[0]=IKcos(j3array[0]);
															if( j3array[0] > IKPI )
															{
																j3array[0]-=IK2PI;
															}
															else if( j3array[0] < -IKPI )
															{
																j3array[0]+=IK2PI;
															}
															j3valid[0] = true;
															for(int ij3 = 0; ij3 < 1; ++ij3)
															{
																if( !j3valid[ij3] )
																{
																	continue;
																}
																j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																{
																	IKReal dummyeval[1];
																	IKReal gconst10;
																	gconst10=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
																	dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																	{
																		{
																			IKReal evalcond[9];
																			evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j6)), 6.28318530717959)));
																			evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
																			evalcond[2]=((0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																			evalcond[3]=((1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																			evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																			evalcond[5]=((0.0200000000000000)+(((-0.0200000000000000)*(cj5)))+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7)))+(((-0.250000000000000)*(sj5))));
																			evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																			evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																			evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																			if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																			{
																				{
																					IKReal dummyeval[1];
																					IKReal gconst11;
																					gconst11=IKsign(((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5))))));
																					dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																					if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																					{
																						{
																							IKReal dummyeval[1];
																							dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																							if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																							{
																								{
																									IKReal dummyeval[1];
																									dummyeval[0]=((((-1.00000000000000)*((sj5)*(sj5))))+(((-1.00000000000000)*((cj5)*(cj5)))));
																									if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																									{
																										continue;

																									} else
																									{
																										{
																											IKReal j4array[1], cj4array[1], sj4array[1];
																											bool j4valid[1]={false};
																											IKReal x462=(cj5)*(cj5);
																											IKReal x463=(sj5)*(sj5);
																											IKReal x464=((x463)+(x462));
																											j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x464) != 0)?((IKReal)1/(x464)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r12)*(sj3)*(sj7)))+(((cj3)*(cj5)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj5)*(cj7)*(r11)*(sj3)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))+(((cj3)*(cj5)*(r02)*(sj7)))+(((cj5)*(cj7)*(cj8)*(r10)*(sj3)))))), ((((IKabs(x464) != 0)?((IKReal)1/(x464)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(cj8)*(r10)*(sj3)*(sj5)))+(((cj7)*(r11)*(sj3)*(sj5)*(sj8)))+(((cj3)*(cj7)*(r01)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj7)*(cj8)*(r00)*(sj5)))+(((-1.00000000000000)*(cj3)*(r02)*(sj5)*(sj7)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																											sj4array[0]=IKsin(j4array[0]);
																											cj4array[0]=IKcos(j4array[0]);
																											if( j4array[0] > IKPI )
																											{
																												j4array[0]-=IK2PI;
																											}
																											else if( j4array[0] < -IKPI )
																											{
																												j4array[0]+=IK2PI;
																											}
																											j4valid[0] = true;
																											for(int ij4 = 0; ij4 < 1; ++ij4)
																											{
																												if( !j4valid[ij4] )
																												{
																													continue;
																												}
																												j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																												{
																													vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																													solution.basesol.resize(6);
																													solution.basesol[0].foffset = j3;
																													solution.basesol[1].foffset = j4;
																													solution.basesol[2].foffset = j5;
																													solution.basesol[3].foffset = j6;
																													solution.basesol[4].foffset = j7;
																													solution.basesol[5].foffset = j8;
																													solution.vfree.resize(0);
																												}
																											}
																										}

																									}

																								}

																							} else
																							{
																								{
																									IKReal j4array[1], cj4array[1], sj4array[1];
																									bool j4valid[1]={false};
																									IKReal x465=(cj5)*(cj5);
																									IKReal x466=(sj5)*(sj5);
																									IKReal x467=((x466)+(x465));
																									j4array[0]=IKatan2(((-1.00000000000000)*(((IKabs(x467) != 0)?((IKReal)1/(x467)):(IKReal)1.0e30))*(((((cj7)*(r21)*(sj5)*(sj8)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((-1.00000000000000)*(r22)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r20)*(sj5)))))), ((((IKabs(x467) != 0)?((IKReal)1/(x467)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((-1.00000000000000)*(cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj7)*(sj8)))+(((cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))))));
																									sj4array[0]=IKsin(j4array[0]);
																									cj4array[0]=IKcos(j4array[0]);
																									if( j4array[0] > IKPI )
																									{
																										j4array[0]-=IK2PI;
																									}
																									else if( j4array[0] < -IKPI )
																									{
																										j4array[0]+=IK2PI;
																									}
																									j4valid[0] = true;
																									for(int ij4 = 0; ij4 < 1; ++ij4)
																									{
																										if( !j4valid[ij4] )
																										{
																											continue;
																										}
																										j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																										{
																											vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																											solution.basesol.resize(6);
																											solution.basesol[0].foffset = j3;
																											solution.basesol[1].foffset = j4;
																											solution.basesol[2].foffset = j5;
																											solution.basesol[3].foffset = j6;
																											solution.basesol[4].foffset = j7;
																											solution.basesol[5].foffset = j8;
																											solution.vfree.resize(0);
																										}
																									}
																								}

																							}

																						}

																					} else
																					{
																						{
																							IKReal j4array[1], cj4array[1], sj4array[1];
																							bool j4valid[1]={false};
																							j4array[0]=IKatan2(((gconst11)*(((((-1.00000000000000)*(cj3)*(cj8)*(r00)*(sj5)*(sj7)))+(((cj3)*(cj7)*(r02)*(sj5)))+(((cj7)*(r12)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj8)*(r10)*(sj3)*(sj5)*(sj7)))+(((cj5)*(r21)*(sj7)*(sj8)))+(((cj3)*(r01)*(sj5)*(sj7)*(sj8)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r11)*(sj3)*(sj5)*(sj7)*(sj8)))))), ((gconst11)*(((((cj3)*(cj5)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj5)*(r01)*(sj7)*(sj8)))+(((cj5)*(cj8)*(r10)*(sj3)*(sj7)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(r12)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj7)*(r02)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																							sj4array[0]=IKsin(j4array[0]);
																							cj4array[0]=IKcos(j4array[0]);
																							if( j4array[0] > IKPI )
																							{
																								j4array[0]-=IK2PI;
																							}
																							else if( j4array[0] < -IKPI )
																							{
																								j4array[0]+=IK2PI;
																							}
																							j4valid[0] = true;
																							for(int ij4 = 0; ij4 < 1; ++ij4)
																							{
																								if( !j4valid[ij4] )
																								{
																									continue;
																								}
																								j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																								{
																									vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																									solution.basesol.resize(6);
																									solution.basesol[0].foffset = j3;
																									solution.basesol[1].foffset = j4;
																									solution.basesol[2].foffset = j5;
																									solution.basesol[3].foffset = j6;
																									solution.basesol[4].foffset = j7;
																									solution.basesol[5].foffset = j8;
																									solution.vfree.resize(0);
																								}
																							}
																						}

																					}

																				}

																			} else
																			{
																				evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j6)), 6.28318530717959)));
																				evalcond[1]=((((cj8)*(r21)))+(((r20)*(sj8))));
																				evalcond[2]=((-0.0850000000000000)+(((npx)*(sj8)))+(((cj8)*(npy))));
																				evalcond[3]=((-1.00000000000000)+(((cj8)*(r01)*(sj3)))+(((r00)*(sj3)*(sj8)))+(((-1.00000000000000)*(cj3)*(cj8)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj8))));
																				evalcond[4]=((0.220000000000000)+(((-1.00000000000000)*(npz)*(sj7)))+(((-0.0200000000000000)*(sj5)))+(((0.0900000000000000)*(cj7)))+(((cj7)*(npy)*(sj8)))+(((0.250000000000000)*(cj5)))+(((-1.00000000000000)*(cj7)*(cj8)*(npx))));
																				evalcond[5]=((-0.0200000000000000)+(((npy)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(npx)*(sj7)))+(((0.250000000000000)*(sj5)))+(((0.0200000000000000)*(cj5)))+(((cj7)*(npz)))+(((0.0900000000000000)*(sj7))));
																				evalcond[6]=((((-1.00000000000000)*(cj3)*(r00)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj3)))+(((-1.00000000000000)*(cj3)*(cj8)*(r01)))+(((-1.00000000000000)*(r10)*(sj3)*(sj8))));
																				evalcond[7]=((((cj3)*(r12)*(sj7)))+(((-1.00000000000000)*(cj7)*(cj8)*(r00)*(sj3)))+(((cj7)*(r01)*(sj3)*(sj8)))+(((cj3)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(r02)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r11)*(sj8))));
																				evalcond[8]=((((cj3)*(cj8)*(r10)*(sj7)))+(((-1.00000000000000)*(cj8)*(r00)*(sj3)*(sj7)))+(((-1.00000000000000)*(cj3)*(cj7)*(r12)))+(((cj7)*(r02)*(sj3)))+(((r01)*(sj3)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj3)*(r11)*(sj7)*(sj8))));
																				if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
																				{
																					{
																						IKReal dummyeval[1];
																						IKReal gconst12;
																						gconst12=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
																						dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
																						if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																						{
																							continue;

																						} else
																						{
																							{
																								IKReal j4array[1], cj4array[1], sj4array[1];
																								bool j4valid[1]={false};
																								j4array[0]=IKatan2(((gconst12)*(((((cj5)*(r21)*(sj7)*(sj8)))+(((cj7)*(cj8)*(r20)*(sj5)))+(((cj5)*(cj7)*(r22)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj8)*(r20)*(sj7)))+(((r22)*(sj5)*(sj7)))))), ((gconst12)*(((((-1.00000000000000)*(cj5)*(r22)*(sj7)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)))+(((cj7)*(r22)*(sj5)))+(((-1.00000000000000)*(cj8)*(r20)*(sj5)*(sj7)))+(((cj5)*(cj7)*(r21)*(sj8)))+(((r21)*(sj5)*(sj7)*(sj8)))))));
																								sj4array[0]=IKsin(j4array[0]);
																								cj4array[0]=IKcos(j4array[0]);
																								if( j4array[0] > IKPI )
																								{
																									j4array[0]-=IK2PI;
																								}
																								else if( j4array[0] < -IKPI )
																								{
																									j4array[0]+=IK2PI;
																								}
																								j4valid[0] = true;
																								for(int ij4 = 0; ij4 < 1; ++ij4)
																								{
																									if( !j4valid[ij4] )
																									{
																										continue;
																									}
																									j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																									{
																										vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																										solution.basesol.resize(6);
																										solution.basesol[0].foffset = j3;
																										solution.basesol[1].foffset = j4;
																										solution.basesol[2].foffset = j5;
																										solution.basesol[3].foffset = j6;
																										solution.basesol[4].foffset = j7;
																										solution.basesol[5].foffset = j8;
																										solution.vfree.resize(0);
																									}
																								}
																							}

																						}

																					}

																				} else
																				{
																					if( 1 )
																					{
																						continue;

																					} else
																					{
																					}
																				}
																			}
																		}

																	} else
																	{
																		{
																			IKReal j4array[1], cj4array[1], sj4array[1];
																			bool j4valid[1]={false};
																			j4array[0]=IKatan2(((gconst10)*(((((cj5)*(r20)*(sj8)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj5)*(cj8)*(r21)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))))), ((gconst10)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))))));
																			sj4array[0]=IKsin(j4array[0]);
																			cj4array[0]=IKcos(j4array[0]);
																			if( j4array[0] > IKPI )
																			{
																				j4array[0]-=IK2PI;
																			}
																			else if( j4array[0] < -IKPI )
																			{
																				j4array[0]+=IK2PI;
																			}
																			j4valid[0] = true;
																			for(int ij4 = 0; ij4 < 1; ++ij4)
																			{
																				if( !j4valid[ij4] )
																				{
																					continue;
																				}
																				j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

																				{
																					vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																					solution.basesol.resize(6);
																					solution.basesol[0].foffset = j3;
																					solution.basesol[1].foffset = j4;
																					solution.basesol[2].foffset = j5;
																					solution.basesol[3].foffset = j6;
																					solution.basesol[4].foffset = j7;
																					solution.basesol[5].foffset = j8;
																					solution.vfree.resize(0);
																				}
																			}
																		}

																	}

																}
															}
														}

													}

												}

											} else
											{
												{
													IKReal j4array[1], cj4array[1], sj4array[1];
													bool j4valid[1]={false};
													j4array[0]=IKatan2(((gconst9)*(((((cj5)*(r20)*(sj8)))+(((r22)*(sj5)*(sj6)*(sj7)))+(((-1.00000000000000)*(cj7)*(r21)*(sj5)*(sj6)*(sj8)))+(((cj5)*(cj8)*(r21)))+(((cj7)*(cj8)*(r20)*(sj5)*(sj6)))))), ((gconst9)*(((((r20)*(sj5)*(sj8)))+(((-1.00000000000000)*(cj5)*(cj7)*(cj8)*(r20)*(sj6)))+(((cj5)*(cj7)*(r21)*(sj6)*(sj8)))+(((cj8)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)*(sj6)*(sj7)))))));
													sj4array[0]=IKsin(j4array[0]);
													cj4array[0]=IKcos(j4array[0]);
													if( j4array[0] > IKPI )
													{
														j4array[0]-=IK2PI;
													}
													else if( j4array[0] < -IKPI )
													{
														j4array[0]+=IK2PI;
													}
													j4valid[0] = true;
													for(int ij4 = 0; ij4 < 1; ++ij4)
													{
														if( !j4valid[ij4] )
														{
															continue;
														}
														j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

														{
															IKReal dummyeval[1];
															IKReal gconst13;
															IKReal x468=(sj8)*(sj8);
															IKReal x469=(cj8)*(cj8);
															gconst13=IKsign(((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x469)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x468)))+(((r01)*(r10)*(sj7)*(x468)))+(((r01)*(r10)*(sj7)*(x469)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))));
															IKReal x470=(sj8)*(sj8);
															IKReal x471=(cj8)*(cj8);
															dummyeval[0]=((((-1.00000000000000)*(cj7)*(cj8)*(r01)*(r12)))+(((r01)*(r10)*(sj7)*(x471)))+(((r01)*(r10)*(sj7)*(x470)))+(((-1.00000000000000)*(cj7)*(r00)*(r12)*(sj8)))+(((cj7)*(cj8)*(r02)*(r11)))+(((cj7)*(r02)*(r10)*(sj8)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x470)))+(((-1.00000000000000)*(r00)*(r11)*(sj7)*(x471))));
															if( IKabs(dummyeval[0]) < 0.0000010000000000  )
															{
																{
																	IKReal dummyeval[1];
																	IKReal x472=(sj8)*(sj8);
																	IKReal x473=(cj8)*(cj8);
																	dummyeval[0]=((((-1.00000000000000)*(cj7)*(r01)*(r10)*(x473)))+(((-1.00000000000000)*(cj7)*(r01)*(r10)*(x472)))+(((-1.00000000000000)*(r00)*(r12)*(sj7)*(sj8)))+(((cj7)*(r00)*(r11)*(x472)))+(((cj7)*(r00)*(r11)*(x473)))+(((-1.00000000000000)*(cj8)*(r01)*(r12)*(sj7)))+(((cj8)*(r02)*(r11)*(sj7)))+(((r02)*(r10)*(sj7)*(sj8))));
																	if( IKabs(dummyeval[0]) < 0.0000010000000000  )
																	{
																		continue;

																	} else
																	{
																		{
																			IKReal j3array[1], cj3array[1], sj3array[1];
																			bool j3valid[1]={false};
																			IKReal x474=(sj8)*(sj8);
																			IKReal x475=(cj8)*(cj8);
																			IKReal x476=((cj7)*(r01)*(r10)*(x474));
																			IKReal x477=((cj7)*(r01)*(r10)*(x475));
																			IKReal x478=((r00)*(r12)*(sj7)*(sj8));
																			IKReal x479=((cj8)*(r01)*(r12)*(sj7));
																			IKReal x480=((x476)+(x477)+(x478)+(x479));
																			IKReal x481=((cj7)*(r00)*(r11)*(x474));
																			IKReal x482=((cj7)*(r00)*(r11)*(x475));
																			IKReal x483=((cj8)*(r02)*(r11)*(sj7));
																			IKReal x484=((r02)*(r10)*(sj7)*(sj8));
																			IKReal x485=((x481)+(x483)+(x482)+(x484));
																			j3array[0]=IKatan2(((((IKabs(((((-1.00000000000000)*(x480)))+(x485))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x480)))+(x485)))):(IKReal)1.0e30))*(((((cj6)*(r12)*(sj7)))+(((cj6)*(cj7)*(cj8)*(r10)))+(((-1.00000000000000)*(cj6)*(cj7)*(r11)*(sj8)))))), ((((IKabs(((((-1.00000000000000)*(x485)))+(x480))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x485)))+(x480)))):(IKReal)1.0e30))*(((((cj6)*(cj7)*(r01)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj7)*(cj8)*(r00)))+(((-1.00000000000000)*(cj6)*(r02)*(sj7)))))));
																			sj3array[0]=IKsin(j3array[0]);
																			cj3array[0]=IKcos(j3array[0]);
																			if( j3array[0] > IKPI )
																			{
																				j3array[0]-=IK2PI;
																			}
																			else if( j3array[0] < -IKPI )
																			{
																				j3array[0]+=IK2PI;
																			}
																			j3valid[0] = true;
																			for(int ij3 = 0; ij3 < 1; ++ij3)
																			{
																				if( !j3valid[ij3] )
																				{
																					continue;
																				}
																				j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																				{
																					vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																					solution.basesol.resize(6);
																					solution.basesol[0].foffset = j3;
																					solution.basesol[1].foffset = j4;
																					solution.basesol[2].foffset = j5;
																					solution.basesol[3].foffset = j6;
																					solution.basesol[4].foffset = j7;
																					solution.basesol[5].foffset = j8;
																					solution.vfree.resize(0);
																				}
																			}
																		}

																	}

																}

															} else
															{
																{
																	IKReal j3array[1], cj3array[1], sj3array[1];
																	bool j3valid[1]={false};
																	j3array[0]=IKatan2(((gconst13)*(((((cj6)*(r11)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj8)*(r11)*(sj6)))+(((-1.00000000000000)*(r10)*(sj6)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r10)*(sj7)))+(((cj6)*(cj7)*(r12)))))), ((gconst13)*(((((cj6)*(r01)*(sj7)*(sj8)))+(((-1.00000000000000)*(cj6)*(cj8)*(r00)*(sj7)))+(((-1.00000000000000)*(r00)*(sj6)*(sj8)))+(((cj6)*(cj7)*(r02)))+(((-1.00000000000000)*(cj8)*(r01)*(sj6)))))));
																	sj3array[0]=IKsin(j3array[0]);
																	cj3array[0]=IKcos(j3array[0]);
																	if( j3array[0] > IKPI )
																	{
																		j3array[0]-=IK2PI;
																	}
																	else if( j3array[0] < -IKPI )
																	{
																		j3array[0]+=IK2PI;
																	}
																	j3valid[0] = true;
																	for(int ij3 = 0; ij3 < 1; ++ij3)
																	{
																		if( !j3valid[ij3] )
																		{
																			continue;
																		}
																		j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

																		{
																			vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
																			solution.basesol.resize(6);
																			solution.basesol[0].foffset = j3;
																			solution.basesol[1].foffset = j4;
																			solution.basesol[2].foffset = j5;
																			solution.basesol[3].foffset = j6;
																			solution.basesol[4].foffset = j7;
																			solution.basesol[5].foffset = j8;
																			solution.vfree.resize(0);
																		}
																	}
																}

															}

														}
													}
												}

											}

										}
									}
								}

							}

						}
					}
				}
				return vsolutions.size()>0;
			}

			static inline bool checkconsistency8(const IKReal* Breal)
			{
				IKReal norm = 0.1;
				for(int i = 0; i < 7; ++i)
				{
					norm += IKabs(Breal[i]);
				}
								 // have to increase the threshold since many computations are involved
				IKReal tol = 1e-5*norm;
				return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
			}
			/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
			///
			/// matcoeffs is of length 54*3, for 3 matrices
			static inline void solvedialyticpoly8qep(const IKReal* matcoeffs, IKReal* rawroots, int& numroots)
			{
				const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
				IKReal IKFAST_ALIGNED16(M[16*16]) = {0};
				IKReal IKFAST_ALIGNED16(A[8*8]);
				IKReal IKFAST_ALIGNED16(work[16*16*15]);
				int ipiv[8];
				int info, coeffindex;
				const int worksize=16*16*15;
				const int matrixdim = 8;
				const int matrixdim2 = 16;
				numroots = 0;
				// first setup M = [0 I; -C -B] and A
				coeffindex = 0;
				for(int j = 0; j < 4; ++j)
				{
					for(int k = 0; k < 6; ++k)
					{
						M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
					}
				}
				for(int j = 0; j < 4; ++j)
				{
					for(int k = 0; k < 6; ++k)
					{
						M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
					}
				}
				for(int j = 0; j < 4; ++j)
				{
					for(int k = 0; k < 6; ++k)
					{
						A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
					}
					for(int k = 0; k < 2; ++k)
					{
						A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
					}
				}
				const IKReal lfpossibilities[4][4] =
				{
					{
						1,-1,1,1
					}
					,
					{
						1,0,-2,1
					}
					,
					{
						1,1,2,0
					}
					,
					{
						1,-1,4,1
					}
				};
				int lfindex = -1;
				bool bsingular = true;
				do
				{
					dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
					if( info == 0 )
					{
						bsingular = false;
						for(int j = 0; j < matrixdim; ++j)
						{
							if( IKabs(A[j*matrixdim+j]) < 100*tol )
							{
								bsingular = true;
								break;
							}
						}
						if( !bsingular )
						{
							break;
						}
					}
					if( lfindex == 3 )
					{
						break;
					}
					// transform by the linear functional
					lfindex++;
					const IKReal* lf = lfpossibilities[lfindex];
					// have to reinitialize A
					coeffindex = 0;
					for(int j = 0; j < 4; ++j)
					{
						for(int k = 0; k < 6; ++k)
						{
							IKReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
							A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
							M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
							M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
							coeffindex++;
						}
						for(int k = 0; k < 2; ++k)
						{
							A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
						}
					}
				} while(lfindex<4);

				if( bsingular )
				{
					return;
				}
				dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
				if( info != 0 )
				{
					return;
				}

				// set identity in upper corner
				for(int j = 0; j < matrixdim; ++j)
				{
					M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
				}
				IKReal IKFAST_ALIGNED16(wr[16]);
				IKReal IKFAST_ALIGNED16(wi[16]);
				IKReal IKFAST_ALIGNED16(vr[16*16]);
				int one=1;
				dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
				if( info != 0 )
				{
					return;
				}
				IKReal Breal[matrixdim-1];
				for(int i = 0; i < matrixdim2; ++i)
				{
					if( IKabs(wi[i]) < tol*100 )
					{
						IKReal* ev = vr+matrixdim2*i;
						if( IKabs(wr[i]) > 1 )
						{
							ev += matrixdim;
						}
						// consistency has to be checked!!
						if( IKabs(ev[0]) < tol )
						{
							continue;
						}
						IKReal iconst = 1/ev[0];
						for(int j = 1; j < matrixdim; ++j)
						{
							Breal[j-1] = ev[j]*iconst;
						}
						if( checkconsistency8(Breal) )
						{
							if( lfindex >= 0 )
							{
								const IKReal* lf = lfpossibilities[lfindex];
								rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
							}
							else
							{
								rawroots[numroots++] = wr[i];
							}
							bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
							bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
							if( bsmall0 && bsmall1 )
							{
								rawroots[numroots++] = ev[2]/ev[0];
								rawroots[numroots++] = ev[1]/ev[0];
							}
							else if( bsmall0 && !bsmall1 )
							{
								rawroots[numroots++] = ev[3]/ev[1];
								rawroots[numroots++] = ev[1]/ev[0];
							}
							else if( !bsmall0 && bsmall1 )
							{
								rawroots[numroots++] = ev[6]/ev[4];
								rawroots[numroots++] = ev[7]/ev[6];
							}
							else if( !bsmall0 && !bsmall1 )
							{
								rawroots[numroots++] = ev[7]/ev[5];
								rawroots[numroots++] = ev[7]/ev[6];
							}
						}
					}
				}
			}
	};

	/// solves the inverse kinematics equations.
	/// \param pfree is an array specifying the free joints of the chain.
	IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions)
	{
		IKSolver solver;
		return solver.ik(eetrans,eerot,pfree,vsolutions);
	}

	IKFAST_API const char* getKinematicsHash() { return "ba2ac00ac66812b08d5c61678d306dcc"; }

	#ifdef IKFAST_NAMESPACE
}								 // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
	if( argc != 12+getNumFreeParameters()+1 )
	{
		printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
			"Returns the ik solutions given the transformation of the end effector specified by\n"
			"a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
			"There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
		return 1;
	}

	std::vector<IKSolution> vsolutions;
	std::vector<IKReal> vfree(getNumFreeParameters());
	IKReal eerot[9],eetrans[3];
	eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
	eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
	eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
	for(std::size_t i = 0; i < vfree.size(); ++i)
		vfree[i] = atof(argv[13+i]);
	bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

	if( !bSuccess )
	{
		fprintf(stderr,"Failed to get ik solution\n");
		return -1;
	}

	printf("Found %d ik solutions:\n", (int)vsolutions.size());
	std::vector<IKReal> sol(getNumJoints());
	for(std::size_t i = 0; i < vsolutions.size(); ++i)
	{
		printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
		std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
		vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
		for( std::size_t j = 0; j < sol.size(); ++j)
			printf("%.15f, ", sol[j]);
		printf("\n");
	}
	return 0;
}
#endif
